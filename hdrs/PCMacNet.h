#ifndef __PCMACNET__#define __PCMACNET__#include <Lion.h>#include "LionDoom.h"#include "doomdef.h"#include <Connections.h>#define kCTBWriteBufSize		(sizeof(doomdata_t) * 2) // Size of a single write buffer#define kNumCTBWriteBuffers	4						// Number of write bufferstypedef struct CTBWriteBuf CTBWriteBuf;struct CTBWriteBuf{	long			length;				// The number of bytes in this buffer	unsigned char	data[kCTBWriteBufSize];  // The data};typedef struct	CTBWriteBufArr CTBWriteBufArr;struct	CTBWriteBufArr{	long		ctbWriteReady;				// The current ready buffer	CTBWriteBuf	buf[kNumCTBWriteBuffers];	// Array of CTB write buffers};#define kCTBReadBufSize		(sizeof(doomdata_t) * 5) // Size of a single read buffer#define kNumCTBReadBuffers	3						 // Number of read buffers#define kCMReadTimeout		10typedef struct CTBReadBuf CTBReadBuf;struct CTBReadBuf{	short			start;					// where the data starts in this buffer	short			end;					// where the data ends in this buffer	long			used;					// If this buffer is being used	unsigned char	data[kCTBReadBufSize];  // The data};typedef struct	CTBReadBufArr CTBReadBufArr;struct	CTBReadBufArr{	tLong			dataSize;						// Size of data to send	tLong			currData;						// Current size of buffer to send	tLong			currHdr;						// Size of current header	tLong			startBuf;						// The first ready buffer	tLong			endBuf;							// The last ready buffer	tLong			bufPend;						// The buffer which was just read into	tLong			lastEOM;						// was the last one read an EOM	CTBReadBuf		buf[kNumCTBReadBuffers];		// Array of CTB read buffers	unsigned char	sendBuf[sizeof(doomdata_t)];	// Buffer to send};extern ConnHandle		gConn;typedef struct{	unsigned char byte1;	unsigned char byte2;	unsigned char byte3;	unsigned char byte4;	unsigned char byte5;	unsigned char byte6;	unsigned char byte7;	unsigned char byte8;} Bytes8;#endif // __PCMACNET__