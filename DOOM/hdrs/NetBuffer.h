#ifndef __NetBuffer__#define __NetBuffer__#define __MAC_VERSION__#include "LionDoom.h"#include "doomdef.h"#include <Connections.h>// Status of the buffersenum tBufStatus{	kHeadFree			= 1,			// Ready to read header	kHeadWaiting	= 2,			// Header read has been requested	kDataFree			= 4,			// Header read has been completed	kDataWaiting	= 16,			// Data  read has been requested	kDataFull			= 32			// Data read has been completed						};typedef enum tBufStatus tBufStatus;// The buffer containing status and a complete message.typedef struct tMessageBuf tMessageBuf;struct tMessageBuf{	tBufStatus			bufStat;								// Status of the buffer	tDoomDataHeader	headMsg;								// Header data	tDoomDataData		dataMsg;								// Message data};#define kNumMessageBufs	10									// Number of buffers in the array// An array of message bufferstypedef struct tMessageBufArr tMessageBufArr;struct tMessageBufArr{	long				cookie;	short				bufPend;										// The next buffer to be filled						short				nextMsg;										// The next message to pass on	long				readSize;										// The size of the current read				long				sizeToRead;									// The size of the current read				CMFlags			cmRFlags;	CMFlags			cmWFlags;	tMessageBuf	bufs[kNumMessageBufs];			// The actual buffer};#define	kCookie	123456#endif // __NetBuffer