Macintosh on RISC Tools Help SummariesCopyright Apple Computer, Inc. 1993-94	All rights reserved.-RISC	Help summaries are available for each of the Macintosh on RISC SDK Tools.	To see Help summaries, Enter a command such as		Help CreateMake			# create a simple makefile	Help ConvertExportList	# change PPCC's export file to comma-separated list for PPCLink	Help DumpPEF			# dump formatted PEF file	Help DumpSYM			# dump formatted SYM or xSYM file	Help DumpXCOFF			# write formatted XCOFF file	Help MakePEF			# XCOFF to PEF converter	Help MakeSYM			# extract SYM information from XCOFF	Help MergeFragment		# merge code fragments	Help PPCAsm				# PowerPC 60x Assembler	Help PPCC				# PowerPC C/C++ Compiler	Help PPCLink			# link an application, link library or shared library	Help SetShellSize		# set the shell's stack and Process Manager 							#  partition sizes	Help UnmangleTool		# unmangle mangled C++ names -CreateMake      # create a simple makefileCreateMake (([ -Application] [ -c creator ] [-sym on] (([-68K] [-mc68020] [-mc68881 |              -elems881] ) | ((-PowerPC | (-fat [-mc68020] [-mc68881 | -elems881]))              [-opt [ local | size | speed1 | speed2 | speed3 | speed4 ]]))) |             (-Tool [-68K] [-sym on] [-mc68020] [-mc68881 | -elems881]) |             (-DA  [-68K] [-mc68020] [-mc68881 | -elems881]) | 			(-SHRLIB -PowerPC [-opt [ local | size | speed1 | speed2 | speed3 | speed4 ]]) |            (-SIOW [-68K] [ -sym on ] [-mc68020] [-mc68881 | -elems881]) |            (-CR -m mainEntryPoint -rt resourceType [ -t fileType ] [ -c creator ]              [-68K] [-mc68020] [-mc68881 | -elems881] [-sym on]))           [-depends] [-export exportSymbol] program fileÉ    -Application            # create an Application (default)    -c creator              # optional Creator for Application or Code Resource    -Tool                   # create a Tool    -DA                     # create a Desk Accessory    -CR                     # create a Code Resource    -SIOW                   # create a Simple Input/Output Window    -m mainEntryPoint       # required Main Entry Point for Code Resource    -rt resourceType        # required Resource Type for Code Resource    -t type                 # optional File Type for Code Resource    -sym on                 # include debugging information in the object file    -mc68020                # generate 68020 instructions    -mc68881                # generate 68881 instructions for elementary operations    -elems881               # generate 68881 instructions for transcendental functions	-depends                # generate dependencies for include files for C and C++ source	-PowerPC                # generate code for the PowerPC microporocessor family	-68K                    # generate code for the 68000 microprocessor family	-opt                    # Specify PowerPC C/C++ Compiler optimization options	-SHRLIB                 # Create a shared library (not yet implemented)	-i path					# Specify an include file path to be searched for compiles.	-fat                    # generate a "fat" application containing 68000-family	                        #   and PowerPC-family code.-ConvertExportList	# change PPCC's export file to comma-separated list for PPCLink	This tool helps convert the export file emitted by PPCC into the 	comma-separated list of exported names expected by PPCLink.  See the PPCC release	notes for more information.	-DumpPEF			# dump formatted PEF fileDumpPEF [optionÉ] pefFileÉ	-a						# dump all except code + data	-c						# dump code-sections	-d						# dump data-sections	-e						# dump export-symbols	-f						# dump import-files	-h						# dump file-header+section-headers	-i						# dump import-symbols	-l						# dump loader-section	-r						# dump loader-relocs	-s						# dump sections+holes	-t						# dump loader-export-slot-table	-x						# dump loader-string-table-DumpSYM			# dump formatted SYM fileDumpSYM [Option] symFile	-only t1[,t2É]			# dump only listed tables	-allbut t1[,t2É]		# dump all tables except those listed								Tables are:		CLTE				# Contained Label Table		CMTE				# Contained Module Table		CSNTE				# Contained Statement Table		CTTE				# Contained Type Table		CVTE 				# Contained Variable Table		FITE				# File Information Table		FRTE				# File Reference Table		MTE					# Module Table		RTE					# Resource Table		TTE					# Type Table		TINFO				# Type Information Table							#	(same as TTE but more human readable)-DumpXCOFF [options...] xcoffFile [...] >output	-a[nnotate]				# Annotate each XCOFF field.	-cache on | off			# Enable/disable section hdrs, symbol and string tbl caching.	-c[heck]				# Check only.  All output is suppressed on whatever is processed.	-dialect cpu			# Set disassembly dialect to cpu, where cpu is,							#	Power      | Pwr    ==> RS/6000 Power							#	PowerPC601 | PPC601 ==> 601							#	PowerPC32  | PPC32  ==> 32-bit PowerPC							#	PowerPC64  | PPC64  ==> 64-bit PowerPC	-do All |				# Process the specified XCOFF sections, either "All" or	  optLetters			#	selected sections specified by one or more of the							# 	optLetters:							#		h    main header + opt aux header + section headers							#		r    relocation information							#		n    line number information							#		s    symbol table + string table							#		y    string table							#		a    all raw data sections (except .pad)							#		l    loader section							#		g    debug section							#		c    type check section							#		x    exception section							#		i    info (comment) section							#		t    text section							#		d    data section							#		b    bss section	-fmt fmtParams			# Same as -format.	-format fmtParams		# Change standard disassembly formatting options. The							#	fmtParams has the following syntax:							#		<on> | <off> | <fmtParams>,<on> | <fmtParams>,<off>							#	  		<on>  = ON=<fmtOptions>							#	  		<off> = OFF=<fmtOptions>							#	The <fmtOptions> are one or more of the following:							#		d     show d(RA) displacements in decimal instead of hex							#		f     show fields in decimal instead of hex							#		h | $ show hex values with leading '$' instead of '0x'							#		i | s show signed immediates in decimal instead of hex							#		m     show hex with the smallest even nbr of hex digits							#		p     show PC-relative values in decimal instead of hex							#		u     show unsigned immediates in decimal instead of hex							#		x     show extended mnemonics (except when -dialect power)							#		2     show neg hex in 2's comp. instead of negated hex	-h | -?					# Display help info (or run tool with no arguments).	-ibm					# Format disassembly using IBM assembly conventions.	-i dir1,...				# Interlisting with dirN's as directory search paths.	-ln						# Show file/line numbers associated with disassembly.	-m name1,...			# Disassemble only the specified functions (name1,...).	-mark					# Add MPW Shell markers to titles in output.	-m[ark]f[uncts]			# Add markers to function labels (implies -mark).	-maxlines n				# Limit section displays (except headers) to n lines.	-n[ames] spec			# List symbol table or Loader section symbols ONLY, where							#	spec has the following syntax:							#	  <keyword>[(<csectType>)][{<csectClass>}]							#	or,							#	  <keyword>[,<csectType>][,<csectClass>]							#	and,							#	  <keyword>   = All | AllLdr | Funct[ion][s] | <symClass> | <ldrSymClass>							#	<symClass>    = symbol table C_xxxx class (e.g., C_EXT)							#	<ldrSymClass> = <ldrClass> | <ldrSymClass><op><ldrClass>							#	<op>          = '|' | '&'							#	<ldrClass>    = Imp | Exp | Ent							#	<csectType>   = the 'xx' of XTY_xx (ER,SD,LD,CM,HL,EM,US)							#	<csectClass>  = the 'xx' of XMC_xx (PR, RO, RW, TC0, etc.)							#	Funct[ion][s] = "C_EXT(LD){PR}".							#	Note: Be careful of quoting if you use the braces in MPW!	-ntb					# Assume traceback tables are NOT present.	-o[ffsets]				# Suppress XCOFF file offsets.	-only name1,...			# Same as -m.	-p						# Display progress info to stderr.	-powerOpen				# Add validations specific to PowerOpen.	-sect[ion] s			# Limit section relative processing to only section s.							#	s is a number or a section name, e.g., ".text".	-summarize				# Summarize results (implied by -p).	-tb						# Disassemble traceback tables if present.	-u[nmangle]				# Unmangle symbols.	-v[erbose]				# Same as -annotate.	-w						# Suppress warnings.	-w601					# Show explicit warnings for Power instructions (done only when							#	when -dialect is PPC601).	-y						# Suppress "beep" in -summarize Power instruction message	-z c					# Pathname separator char is 'c' (default ':').		Default options are: -dialect PPC601 -do htdb -fmt on=xsf -cache on	-MakePEF			# XCOFF to PEF converterMakePEF [ options ] [ -o outfile ] infile(number arguments are read in decimal unless preceed by 0x ie:0x100 = hex 100)	-a n					# align code & data secitons to n byte boundary (def=8)	-b						# expand bss into zeroed data (def=no)	-c n					# set current-version to n (def=0)	-e name					# set entry point to routine name (def=what-XCOFF-says)	-d n					# set definition version to n (def=0)	-ft type				# set output file type to "type"  (e.g. APPL)	-fc creator				# set output file creator to "creator"  (e.g. PETE)	-f fname				# use file fname to load additional export list	-i name					# set initialization routine to procedure name (def=none)	-k						# keep init,term & main routines as export symbols							#	(def=remove)	-l oldname[=newname][#vers[-upfv]][!]	# change imported library with							# name oldname:			=newname		#	to newname			#vers    		#	to current-version vers (# required)			-upfv    		#	to up-from-version upfv			!        		#	to init before	-n						# pad exported loader symbols with trailing null							#	(def=nonull)	-o fname				# set the target output file name (def=a.peff)	-r						# mark data section as read-only (def=read-write)	-s n 					# set share option of data section to n (def=contextShare)	-t name					# set termination routine to procedure name (def=none)	-u n					# set implementation version to n (def=0)	-v n=m					# make section n have default virtual address m (def=0)	-w n:nam				# make import name from file n weak (ok to be undef at							#	runtime)	-x						# turn off automatic data section packing-MakeSYM			# extract debugging information from XCOFFMakeSYM [option] <XCOFFfile>	-i directory			# specifies directory for source files (default=current dir.)	-notypes				# don't include type information in xSYM file	-o xsymfile				# name output xSYM file 'xsymfile' (default=<appname>.xSYM)	-only sourcefileÉ		# include debugging info only from specified file(s)	-p						# write progress information to stderr	-r						# makes search for source files recursive	-sym (on | off | big)	# enable/disable generation of symbolic debugging information.				off			# 	disable generation of symbolic debugging information.				on			# 	enable generation of symbolic debugging information.				big			# 	use when PPCLink used the option -sym big	-v						# display the MakeSYM version number	-w						# suppress warning messages. -MergeFragment	# merge code fragmentsMergeFragment [ options] [ input fileÉ ] target file	-a 			# set 'cfrg' usage type to application	-c			# create default cfrg (meaningful only if no input files)	-d			# tag the data fork of the target in its 'cfrg' as not a 								#   code fragment	-n name		# use "name" for cfrg entry	-p			# report progress	-r			# create 'rseg' cfrg entry	-t pwpc|m68k # set architecture for created cfrg entry (default=pwpc)	-x			# delete any existing 'cfrg' entry in the target	-PPCAsm			# Assemble PowerPC 60x Assembly Language CodePPCAsm [options] filename[...] > listing ³ progress	-auxheader modtype		# generate auxiliary XCOFF header	-blocksize size 		# set I/O buffer size to (<size> * 512) bytes	-c[heck]          		# syntax check - don't create an XCOFF file	-define id[=value]		# define identifier (default value: 1					 	-dialect type 			# specify the default translation (e.g. Power, PowerPC)	-i directory,É			# search for include files in specified directories	-l              		# write listing to <stdout>	-lo filename    		# write listing to <filename>	-o filename     		# output written to object file named <filename>	-p              		# write progress information to stderr	-w              		# suppress warnings-PPCC			# Macintosh with PowerPC C/C++ CompilerPPCC [optionÉ] [file]	-align power			# specify power alignment for data structures (default)	-align mac68k			# specify 68K alignment for data structures	-appleext on			# enable Apple's language extensions.	-appleext off			# disable Apple's language extensions (default)	-char signed			# treat char type as signed. (default)	-char unsigned			# treat char type as unsigned	-d name					# define a preprocessing symbol. Equivalent to #define name 1.	-d name=value			# define a preprocessing symbol. Equivalent to #define name value.	-dialect ansic			# set source language dialect.	-dialect cplus			#	Files ending in ".cp" use "cplus" dialect by default.	-dialect krc	 		#	All others are have the default "ansic". See also: -strict.	-e						# write preprocessor results to stdout	-e2						# implies -e and also strips comments.	-enum int				# use int-sized enumeration types.	-enum min				# use minimum-sized enumeration types, same as 68K (default)	-errsource on|off		# do|don't include offending source line in error messages. (default: on)	-export_list filename	# specify a file in which to list exported names.							#	for use with -shared_lib_export. (default: <source filename>.x)	-fp_contract on|off		# on: may generate Multiply Add Fused instructions (default: on)							-i directory			# search for include files in directory.	-inline none			# disable all inlining. (defaults: if -opt off or -opt local then							#   -inline cplus,nouser,nolib;  if -opt size then -inline none;							#   if -opt speed then -inline all)	-inline all				# enable all inlining.	-inline [no]cplus		# disable/enable C++ inlining	-inline [no]user		# disable/enable implicit inlining	-inline [no]lib			# disable/enable lib function inlining	-ldsize	64|128			# select long double size (default: 128-bit)	-list pre				# send listing to stdout with preprocessing (default: no listing)	-list nopre				# as above, but without preprocessing	-maxerrors n			# set max error limit to n. (default: 20)	-nestcom				# allow nested comments (default: no nested comments)	-nocodegen				# perform syntax and semantic checking only; don't generate code.							#   (default: generate code)	-o pathname				# send generated code to pathname. (default: <source filename>.o)	-opt off				# suppress all optimizations. (default with -sym on)	-opt local				# perform local optimizations (default with -sym off)	-opt size				# optimize for size.	-opt speed				# optimize for speed.			[,nounroll]		#	as above, but no loop unrolling			[,norep]		#	as above, but do not repeatedly apply 							#	global copy propagation and redundant   							#	store elimination.	-p						# write progress information to stdout	-shared_lib_export on	# enable code generation for exporting names from a shared library.	-shared_lib_export off	# disable code generation for exporting names from a shared library.	-strict on				# enable/disable strict enforcement of the source language dialect semantics.	-strict off				# 	 (default) see also: -dialect.	-sym  on[,alltypes] | full | off	# enable/disable generation of symbolic debugging information.				on			# enable generation of symbolic debugging information.							# 	Note: Enabling sym info generation suppresses optimization.				on,alltypes	# generate debugging info for all types (even if unreferenced)				full		# same as -sym on.				off			# disable generation of symbolic debugging information.  (default)	-u name					# undefine a preprocessor symbol, equivalent to #undef name	-w off					# suppress all warnings.	-w conformance			# generate dialect conformance warnings	-w usage				# generate "questionable usage" warnings  (default)	-w all					# generate both usage and conformance warnings	-y directory			# write compiler temporary files to directory (default:{tempfolder})-PPCLink		# Macintosh with PowerPC Linker: link an application, link library or shared libraryPPCLink objectFileÉ [options]	-export <name>,<name>É	# export named symbol(s)	-d						# don't emit duplicate symbol warnings	-dead on | off			# activate garbage collection of unused csects							#	default value depends on value of -xm flag as follows:							#		-xm executable		-dead on							#		-xm sharedLibrary	-dead on							#		-xm library			-dead off	-main name				# set entry point to given name (default=__start)	-map filename			# create link map with given file name	-mf						# use multifinder memory	-o filename				# set output object file name (default=aout.o)	-p						# progress	-sym on | off | big		# include or exclude debug symbols. 							#   "big" uses less RAM and is faster but produces larger xcoff files.	-uf filename			# report unused (i.e. garbage collected) code and data symbols to <filename>	-unmangle on | off		# mangle or unmangle labels and entry points in the link map (default=on)	-v                		# use verbose progress (implies -p)	-w[arn]					# suppress warnings	-xm Executable|Library|Sharedlibrary							# set execution mode (default=executable)							# "e" or "executable" specifies an application							# "l" or "library" specifies a link library							# "s" or "sharedLibrary" specifies a Shared Library							-SetShellSize				# set the shell's stack and Process Manager partition sizesSetShellSize [-f ShellFileName] [-s StackSize[k]] [-p PartitionSize[k]]	-f ShellFileName		# specify pathname of MPW Shell to modify							# if omitted, sets sizes of currently executing shell	-s StackSize[k]			# set stack size in bytes or (with 'k' suffix) kilobytes	-p PartitionSize[k]		# set partition size in bytes or (with 'k' suffix) kilobytes                                     		If neither -p or -s options are supplied, the tool displays the current settings.	-UnmangleTool	# unmangle mangled C++ names UnmangleTool mangledNameÉ-