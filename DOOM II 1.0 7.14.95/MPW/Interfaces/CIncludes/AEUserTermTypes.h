/* 	File:		AEUserTermTypes.h  	Copyright:	© 1984-1994 by Apple Computer, Inc. 				All rights reserved.  	Version:	Universal Interfaces 2.0a3  ETO #16, MPW prerelease.  Friday, November 11, 1994.   	Bugs?:		If you find a problem with this file, send the file and version 				information (from above) and the problem description to:  					Internet:	apple.bugs@applelink.apple.com 					AppleLink:	APPLE.BUGS */#ifndef __AEUSERTERMTYPES__#define __AEUSERTERMTYPES__#ifdef __cplusplusextern "C" {#endif#if GENERATINGPOWERPC#pragma options align=mac68k#endif#ifdef __CFM68K__#pragma lib_export on#endifenum {	kAEUserTerminology			= 'aeut',						/*  0x61657574  */	kAETerminologyExtension		= 'aete',						/*  0x61657465  */	kAEScriptingSizeResource	= 'scsz'};enum {	kAEUTHasReturningParam		= 31,							/* if event has a keyASReturning param */	kAEUTOptional				= 15,							/* if something is optional */	kAEUTlistOfItems			= 14,							/* if property or reply is a list. */	kAEUTEnumerated				= 13,							/* if property or reply is of an enumerated type. */	kAEUTReadWrite				= 12,							/* if property is writable. */	kAEUTChangesState			= 12,							/* if an event changes state. */	kAEUTTightBindingFunction	= 12,							/* if this is a tight-binding precedence function. */	kAEUTApostrophe				= 3,							/* if a term contains an apostrophe. */	kAEUTFeminine				= 2,							/* if a term is feminine gender. */	kAEUTMasculine				= 1,							/* if a term is masculine gender. */	kAEUTPlural					= 0								/* if a term is plural. */};struct TScriptingSizeResource {	short							scriptingSizeFlags;	unsigned long					minStackSize;	unsigned long					preferredStackSize;	unsigned long					maxStackSize;	unsigned long					minHeapSize;	unsigned long					preferredHeapSize;	unsigned long					maxHeapSize;};enum {	kLaunchToGetTerminology		= (1 << 15),/* if 0, read aete directly from res file; if 1, then launch and use gdut event  */	kDontFindAppBySignature		= (1 << 14),/* if 0, then find app with signature if lost; if 1, then don't */	kAlwaysSendSubject			= (1 << 13)};/* if 0, then send subject when appropriate; if 1, then every event has Subject Attribute *//* old names for above bits. */enum {	kReadExtensionTermsMask		= (1 << 15)};#ifdef __CFM68K__#pragma lib_export off#endif#if GENERATINGPOWERPC#pragma options align=reset#endif#ifdef __cplusplus}#endif#endif /* __AEUSERTERMTYPES__ */