{ 	File:		MIDI.p  	Copyright:	© 1984-1994 by Apple Computer, Inc. 				All rights reserved.  	Version:	Universal Interfaces 2.0a1.  ETO #15, MPW prerelease.  Sunday, July 17, 1994.   	Bugs?:		If you find a problem with this file, send the file and version 				information (from above) and the problem description to:  					Internet:	apple.bugs@applelink.apple.com 					AppleLink:	APPLE.BUGS }{$IFC UNDEFINED UsingIncludes}{$SETC UsingIncludes := 0}{$ENDC}{$IFC NOT UsingIncludes} UNIT MIDI; INTERFACE{$ENDC}{$IFC UNDEFINED __MIDI__}{$SETC __MIDI__ := 1}{$I+}{$SETC MIDIIncludes := UsingIncludes}{$SETC UsingIncludes := 1}{$IFC UNDEFINED __ERRORS__}{$I Errors.p}{$ENDC}{	ConditionalMacros.p											}{$IFC UNDEFINED __TYPES__}{$I Types.p}{$ENDC}{$PUSH}{$ALIGN MAC68K}{$LibExport+}CONST	midiToolNum					= 4;							{tool number of MIDI Manager for SndDispVersion call}	midiMaxNameLen				= 31;							{maximum number of characters in port and client names}{ Time formats }	midiFormatMSec				= 0;							{milliseconds}	midiFormatBeats				= 1;							{beats}	midiFormat24fpsBit			= 2;							{24 frames/sec.}	midiFormat25fpsBit			= 3;							{25 frames/sec.}	midiFormat30fpsDBit			= 4;							{30 frames/sec. drop-frame}	midiFormat30fpsBit			= 5;							{30 frames/sec.}	midiFormat24fpsQF			= 6;							{24 frames/sec. longInt format }	midiFormat25fpsQF			= 7;							{25 frames/sec. longInt format }	midiFormat30fpsDQF			= 8;							{30 frames/sec. drop-frame longInt format }	midiFormat30fpsQF			= 9;							{30 frames/sec. longInt format }	midiInternalSync			= 0;							{internal sync}	midiExternalSync			= 1;							{external sync}{ Port types}	midiPortTypeTime			= 0;							{time port}	midiPortTypeInput			= 1;							{input port}	midiPortTypeOutput			= 2;							{output port}	midiPortTypeTimeInv			= 3;							{invisible time port}{ OffsetTimes  }	midiGetEverything			= $7FFFFFFF;					{get all packets, regardless of time stamps}	midiGetNothing				= $80000000;					{get no packets, regardless of time stamps}	midiGetCurrent				= $00000000;					{get current packets only}{    MIDI data and messages are passed in MIDIPacket records (see below).    The first byte of every MIDIPacket contains a set of flags       bits 0-1    00 = new MIDIPacket, not continued                     01 = begining of continued MIDIPacket                     10 = end of continued MIDIPacket                     11 = continuation    bits 2-3     reserved      bits 4-6      000 = packet contains MIDI data                     001 = packet contains MIDI Manager message       bit 7         0 = MIDIPacket has valid stamp                  1 = stamp with current clock }	midiContMask				= $03;	midiNoCont					= $00;	midiStartCont				= $01;	midiMidCont					= $03;	midiEndCont					= $02;	midiTypeMask				= $70;	midiMsgType					= $00;	midiMgrType					= $10;	midiTimeStampMask			= $80;	midiTimeStampCurrent		= $80;	midiTimeStampValid			= $00;{    MIDI Manager MIDIPacket command words (the first word in the data field    for midiMgrType messages) }	midiOverflowErr				= $0001;	midiSCCErr					= $0002;	midiPacketErr				= $0003;	midiMaxErr					= $00FF;						{all command words less than this value  are error indicators}{ Valid results to be returned by readHooks }	midiKeepPacket				= 0;	midiMorePacket				= 1;	midiNoMorePacket			= 2;{     Driver calls: }	midiOpenDriver				= 1;	midiCloseDriver				= 2;TYPE	MIDIPacket = PACKED RECORD		flags:					UInt8;		len:					UInt8;		tStamp:					LONGINT;		data:					ARRAY [0..248] OF UInt8;	END;	MIDIPacketPtr = ^MIDIPacket;	MIDIClkInfo = RECORD		sync:					INTEGER;								{synchronization external/internal}		curTime:				LONGINT;								{current value of port's clock}		format:					INTEGER;								{time code format}	END;	MIDIIDRec = RECORD		clientID:				OSType;		portID:					OSType;	END;	MIDIPortInfo = RECORD		portType:				INTEGER;								{type of port}		timeBase:				MIDIIDRec;								{MIDIIDRec for time base}		numConnects:			INTEGER;								{number of connections}		cList:					ARRAY [0..0] OF MIDIIDRec;				{ARRAY [1..numConnects] of MIDIIDRec}	END;	MIDIPortInfoPtr = ^MIDIPortInfo;	MIDIPortInfoHdl = ^MIDIPortInfoPtr;	MIDIPortInfoHandle = ^MIDIPortInfoPtr;	MIDIPortParams = RECORD		portID:					OSType;									{ID of port, unique within client}		portType:				INTEGER;								{Type of port - input, output, time, etc.}		timeBase:				INTEGER;								{refnum of time base, 0 if none}		offsetTime:				LONGINT;								{offset for current time stamps}		readHook:				Ptr;									{routine to call when input data is valid}		refCon:					LONGINT;								{refcon for port (for client use)}		initClock:				MIDIClkInfo;							{initial settings for a time base}		name:					Str255;									{name of the port, This is a real live string, not a ptr.}	END;	MIDIPortParamsPtr = ^MIDIPortParams;	MIDIIDList = RECORD		numIDs:					INTEGER;		list:					ARRAY [0..0] OF OSType;	END;	MIDIIDListPtr = ^MIDIIDList;	MIDIIDListHdl = ^MIDIIDListPtr;	MIDIIDListHandle = ^MIDIIDListPtr;{              Prototype Declarations for readHook and timeProc                 extern pascal short myReadHook(MIDIPacketPtr myPacket, long myRefCon);         extern pascal void myTimeProc(long curTime, long myRefCon);                 MIDI Manager Routines}FUNCTION MIDIVersion: NumVersion;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0000, 4, $A800;	{$ENDC}FUNCTION MIDISignIn(clientID: OSType; refCon: LONGINT; icon: Handle; name: ConstStr255Param): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0004, 4, $A800;	{$ENDC}PROCEDURE MIDISignOut(clientID: OSType);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0008, 4, $A800;	{$ENDC}FUNCTION MIDIGetClients: MIDIIDListHandle;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $000C, 4, $A800;	{$ENDC}PROCEDURE MIDIGetClientName(clientID: OSType; VAR name: Str255);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0010, 4, $A800;	{$ENDC}PROCEDURE MIDISetClientName(clientID: OSType; name: ConstStr255Param);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0014, 4, $A800;	{$ENDC}FUNCTION MIDIGetPorts(clientID: OSType): MIDIIDListHandle;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0018, 4, $A800;	{$ENDC}FUNCTION MIDIAddPort(clientID: OSType; BufSize: INTEGER; VAR refnum: INTEGER; init: MIDIPortParamsPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $001C, 4, $A800;	{$ENDC}FUNCTION MIDIGetPortInfo(clientID: OSType; portID: OSType): MIDIPortInfoHandle;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0020, 4, $A800;	{$ENDC}FUNCTION MIDIConnectData(srcClID: OSType; srcPortID: OSType; dstClID: OSType; dstPortID: OSType): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0024, 4, $A800;	{$ENDC}FUNCTION MIDIUnConnectData(srcClID: OSType; srcPortID: OSType; dstClID: OSType; dstPortID: OSType): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0028, 4, $A800;	{$ENDC}FUNCTION MIDIConnectTime(srcClID: OSType; srcPortID: OSType; dstClID: OSType; dstPortID: OSType): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $002C, 4, $A800;	{$ENDC}FUNCTION MIDIUnConnectTime(srcClID: OSType; srcPortID: OSType; dstClID: OSType; dstPortID: OSType): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0030, 4, $A800;	{$ENDC}PROCEDURE MIDIFlush(refnum: INTEGER);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0034, 4, $A800;	{$ENDC}FUNCTION MIDIGetReadHook(refnum: INTEGER): ProcPtr;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0038, 4, $A800;	{$ENDC}PROCEDURE MIDISetReadHook(refnum: INTEGER; hook: ProcPtr);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $003C, 4, $A800;	{$ENDC}PROCEDURE MIDIGetPortName(clientID: OSType; portID: OSType; VAR name: Str255);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0040, 4, $A800;	{$ENDC}PROCEDURE MIDISetPortName(clientID: OSType; portID: OSType; name: ConstStr255Param);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0044, 4, $A800;	{$ENDC}PROCEDURE MIDIWakeUp(refnum: INTEGER; time: LONGINT; period: LONGINT; timeProc: ProcPtr);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0048, 4, $A800;	{$ENDC}PROCEDURE MIDIRemovePort(refnum: INTEGER);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $004C, 4, $A800;	{$ENDC}FUNCTION MIDIGetSync(refnum: INTEGER): INTEGER;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0050, 4, $A800;	{$ENDC}PROCEDURE MIDISetSync(refnum: INTEGER; sync: INTEGER);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0054, 4, $A800;	{$ENDC}FUNCTION MIDIGetCurTime(refnum: INTEGER): LONGINT;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0058, 4, $A800;	{$ENDC}PROCEDURE MIDISetCurTime(refnum: INTEGER; time: LONGINT);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $005C, 4, $A800;	{$ENDC}PROCEDURE MIDIStartTime(refnum: INTEGER);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0060, 4, $A800;	{$ENDC}PROCEDURE MIDIStopTime(refnum: INTEGER);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0064, 4, $A800;	{$ENDC}PROCEDURE MIDIPoll(refnum: INTEGER; offsetTime: LONGINT);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0068, 4, $A800;	{$ENDC}FUNCTION MIDIWritePacket(refnum: INTEGER; packet: MIDIPacketPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $006C, 4, $A800;	{$ENDC}FUNCTION MIDIWorldChanged(clientID: OSType): BOOLEAN;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0070, 4, $A800;	{$ENDC}FUNCTION MIDIGetOffsetTime(refnum: INTEGER): LONGINT;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0074, 4, $A800;	{$ENDC}PROCEDURE MIDISetOffsetTime(refnum: INTEGER; offsetTime: LONGINT);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0078, 4, $A800;	{$ENDC}FUNCTION MIDIConvertTime(srcFormat: INTEGER; dstFormat: INTEGER; time: LONGINT): LONGINT;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $007C, 4, $A800;	{$ENDC}FUNCTION MIDIGetRefCon(refnum: INTEGER): LONGINT;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0080, 4, $A800;	{$ENDC}PROCEDURE MIDISetRefCon(refnum: INTEGER; refCon: LONGINT);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0084, 4, $A800;	{$ENDC}FUNCTION MIDIGetClRefCon(clientID: OSType): LONGINT;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0088, 4, $A800;	{$ENDC}PROCEDURE MIDISetClRefCon(clientID: OSType; refCon: LONGINT);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $008C, 4, $A800;	{$ENDC}FUNCTION MIDIGetTCFormat(refnum: INTEGER): INTEGER;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0090, 4, $A800;	{$ENDC}PROCEDURE MIDISetTCFormat(refnum: INTEGER; format: INTEGER);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0094, 4, $A800;	{$ENDC}PROCEDURE MIDISetRunRate(refnum: INTEGER; rate: INTEGER; time: LONGINT);	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0098, 4, $A800;	{$ENDC}FUNCTION MIDIGetClientIcon(clientID: OSType): Handle;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $009C, 4, $A800;	{$ENDC}FUNCTION SndDispVersion(toolnum: INTEGER): LONGINT;	{$IFC NOT GENERATINGCFM}	INLINE $203C, $0000, $0000, $A800;	{$ENDC}{$ALIGN RESET}{$POP}{$SETC UsingIncludes := MIDIIncludes}{$ENDC} {__MIDI__}{$IFC NOT UsingIncludes} END.{$ENDC}