{ 	File:		Displays.p  	Copyright:	© 1984-1994 by Apple Computer, Inc. 				All rights reserved.  	Version:	Universal Interfaces 2.0a1.  ETO #15, MPW prerelease.  Sunday, July 17, 1994.   	Bugs?:		If you find a problem with this file, send the file and version 				information (from above) and the problem description to:  					Internet:	apple.bugs@applelink.apple.com 					AppleLink:	APPLE.BUGS }{$IFC UNDEFINED UsingIncludes}{$SETC UsingIncludes := 0}{$ENDC}{$IFC NOT UsingIncludes} UNIT Displays; INTERFACE{$ENDC}{$IFC UNDEFINED __DISPLAYS__}{$SETC __DISPLAYS__ := 1}{$I+}{$SETC DisplaysIncludes := UsingIncludes}{$SETC UsingIncludes := 1}{$IFC UNDEFINED __APPLEEVENTS__}{$I AppleEvents.p}{$ENDC}{	Errors.p													}{		ConditionalMacros.p										}{	Types.p														}{	Memory.p													}{		MixedMode.p												}{	OSUtils.p													}{	Events.p													}{		Quickdraw.p												}{			QuickdrawText.p										}{	EPPC.p														}{		PPCToolbox.p											}{			AppleTalk.p											}{		Processes.p												}{			Files.p												}{	Notification.p												}{$IFC UNDEFINED __WINDOWS__}{$I Windows.p}{$ENDC}{	Controls.p													}{		Menus.p													}{$IFC UNDEFINED __COMPONENTS__}{$I Components.p}{$ENDC}{$PUSH}{$ALIGN MAC68K}{$LibExport+}CONST{ AppleEvents Core Suite }	kAESystemConfigNotice		= 'cnfg';{ Core Suite types }	kAEDisplayNotice			= 'dspl';	keyDMConfigVersion			= '¶cvr';	keyDMConfigFlags			= '¶cfg';	keyDMConfigReserved			= '¶crs';	keyDisplayID				= '¶did';	keyDisplayComponent			= '¶dcp';	keyDisplayDevice			= '¶dev';	keyDisplayFlags				= '¶dfg';	keyDisplayMode				= '¶dm ';	keyDisplayModeReserved		= '¶dmr';	keyDisplayReserved			= '¶ddr';	keyDeviceFlags				= '¶¶fg';	keyDeviceDepthMode			= '¶¶dm';	keyDeviceRect				= '¶¶re';	keyPixMapRect				= '¶pre';	keyPixMapHResolution		= '¶phr';	keyPixMapVResolution		= '¶pvr';	keyPixMapPixelType			= '¶ppt';	keyPixMapPixelSize			= '¶pps';	keyPixMapCmpCount			= '¶pcc';	keyPixMapCmpSize			= '¶pcs';	keyPixMapAlignment			= '¶ppa';	keyPixMapResReserved		= '¶pp¨';	keyPixMapReserved			= '¶ppr';	keyPixMapColorTableSeed		= '¶pct';	keyDisplayOldConfig			= 'dold';	keyDisplayNewConfig			= 'dnew';	TYPEDisplayIDType = LONGINT;{ Switch Flags }CONST{ Flag indicating that there is no need to confirm a switch to this mode }	kNoSwitchConfirmBit			= 0;TYPE	DMNotificationProcPtr = ProcPtr;  { PROCEDURE DMNotification(VAR theEvent: AppleEvent); }	DMNotificationUPP = UniversalProcPtr;CONST	uppDMNotificationProcInfo = $000000C0; { PROCEDURE (4 byte param); }FUNCTION NewDMNotificationProc(userRoutine: DMNotificationProcPtr): DMNotificationUPP;	{$IFC NOT GENERATINGCFM }	INLINE $2E9F;	{$ENDC}PROCEDURE CallDMNotificationProc(VAR theEvent: AppleEvent; userRoutine: DMNotificationUPP);	{$IFC NOT GENERATINGCFM}	INLINE $205F, $4E90;	{$ENDC}FUNCTION DMGetFirstScreenDevice(activeOnly: BOOLEAN): GDHandle;	{$IFC NOT GENERATINGCFM}	INLINE $7000, $ABEB;	{$ENDC}FUNCTION DMGetNextScreenDevice(theDevice: GDHandle; activeOnly: BOOLEAN): GDHandle;	{$IFC NOT GENERATINGCFM}	INLINE $7001, $ABEB;	{$ENDC}PROCEDURE DMDrawDesktopRect(VAR globalRect: Rect);	{$IFC NOT GENERATINGCFM}	INLINE $7002, $ABEB;	{$ENDC}PROCEDURE DMDrawDesktopRegion(globalRgn: RgnHandle);	{$IFC NOT GENERATINGCFM}	INLINE $7003, $ABEB;	{$ENDC}FUNCTION DMGetGDeviceTablecloth(displayDevice: GDHandle; VAR tableclothInstance: ComponentInstance): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7004, $ABEB;	{$ENDC}FUNCTION DMSetGDeviceTablecloth(displayDevice: GDHandle; tableclothInstance: ComponentInstance): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7005, $ABEB;	{$ENDC}FUNCTION DMBeginConfigureDisplays(VAR displayState: Handle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7006, $ABEB;	{$ENDC}FUNCTION DMEndConfigureDisplays(displayState: Handle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7007, $ABEB;	{$ENDC}FUNCTION DMAddDisplay(newDevice: GDHandle; driver: INTEGER; mode: LONGINT; reserved: LONGINT; displayID: LONGINT; displayComponent: ComponentInstance; displayState: Handle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0D08, $ABEB;	{$ENDC}FUNCTION DMMoveDisplay(moveDevice: GDHandle; x: INTEGER; y: INTEGER; displayState: Handle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7009, $ABEB;	{$ENDC}FUNCTION DMDisableDisplay(disableDevice: GDHandle; displayState: Handle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700A, $ABEB;	{$ENDC}FUNCTION DMEnableDisplay(enableDevice: GDHandle; displayState: Handle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700B, $ABEB;	{$ENDC}FUNCTION DMRemoveDisplay(removeDevice: GDHandle; displayState: Handle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700C, $ABEB;	{$ENDC}FUNCTION DMGetComponentAnimateTicks(animationComponent: ComponentInstance; VAR goodDelay: LONGINT; VAR maxDelay: LONGINT): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700D, $ABEB;	{$ENDC}FUNCTION DMSetComponentAnimateTicks(animationComponent: ComponentInstance; goodDelay: LONGINT; maxDelay: LONGINT): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700E, $ABEB;	{$ENDC}FUNCTION DMGetNextAnimateTime(VAR nextAnimateTime: LONGINT): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700F, $ABEB;	{$ENDC}FUNCTION DMSetMainDisplay(newMainDevice: GDHandle; displayState: Handle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7010, $ABEB;	{$ENDC}FUNCTION DMSetDisplayMode(theDevice: GDHandle; mode: LONGINT; VAR depthMode: LONGINT; reserved: LONGINT; displayState: Handle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0A11, $ABEB;	{$ENDC}FUNCTION DMCheckDisplayMode(theDevice: GDHandle; mode: LONGINT; depthMode: LONGINT; VAR switchFlags: LONGINT; reserved: LONGINT; VAR modeOk: BOOLEAN): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0C12, $ABEB;	{$ENDC}FUNCTION DMGetDeskRegion(VAR desktopRegion: RgnHandle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0213, $ABEB;	{$ENDC}FUNCTION DMRegisterNotifyProc(notificationProc: DMNotificationUPP; whichPSN: ProcessSerialNumberPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0414, $ABEB;	{$ENDC}FUNCTION DMRemoveNotifyProc(notificationProc: DMNotificationUPP; whichPSN: ProcessSerialNumberPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0415, $ABEB;	{$ENDC}FUNCTION DMGetDisplayComponent(theDevice: GDHandle; VAR displayComponent: ComponentInstance): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0416, $ABEB;	{$ENDC}FUNCTION DMSetDisplayComponent(theDevice: GDHandle; displayComponent: ComponentInstance): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0417, $ABEB;	{$ENDC}FUNCTION DMGetDisplayID(theDevice: GDHandle; VAR displayID: LONGINT): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0418, $ABEB;	{$ENDC}FUNCTION DMSetDisplayID(theDevice: GDHandle; displayID: LONGINT): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0419, $ABEB;	{$ENDC}FUNCTION DMGetDisplayDevice(displayID: LONGINT; VAR displayDevice: GDHandle): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0420, $ABEB;	{$ENDC}FUNCTION DMResolveDisplayComponents: OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $303C, $0021, $ABEB;	{$ENDC}{$ALIGN RESET}{$POP}{$SETC UsingIncludes := DisplaysIncludes}{$ENDC} {__DISPLAYS__}{$IFC NOT UsingIncludes} END.{$ENDC}