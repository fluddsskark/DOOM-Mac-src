{ 	File:		Files.p  	Copyright:	© 1984-1994 by Apple Computer, Inc. 				All rights reserved.  	Version:	Universal Interfaces 2.0a1.1  ETO #15, MPW prerelease.  Sunday, July 17, 1994.   	Bugs?:		If you find a problem with this file, send the file and version 				information (from above) and the problem description to:  					Internet:	apple.bugs@applelink.apple.com 					AppleLink:	APPLE.BUGS }{$IFC UNDEFINED UsingIncludes}{$SETC UsingIncludes := 0}{$ENDC}{$IFC NOT UsingIncludes} UNIT Files; INTERFACE{$ENDC}{$IFC UNDEFINED __FILES__}{$SETC __FILES__ := 1}{$I+}{$SETC FilesIncludes := UsingIncludes}{$SETC UsingIncludes := 1}{$IFC UNDEFINED __TYPES__}{$I Types.p}{$ENDC}{	ConditionalMacros.p											}{$IFC UNDEFINED __MIXEDMODE__}{$I MixedMode.p}{$ENDC}{$IFC UNDEFINED __OSUTILS__}{$I OSUtils.p}{$ENDC}{$PUSH}{$ALIGN MAC68K}{$LibExport+}CONST{ Finder Constants }	fsAtMark					= 0;	fOnDesk						= 1;	fsCurPerm					= 0;	fHasBundle					= 8192;	fsRdPerm					= 1;	fInvisible					= 16384;	fTrash						= -3;	fsWrPerm					= 2;	fDesktop					= -2;	fsRdWrPerm					= 3;	fDisk						= 0;	fsRdWrShPerm				= 4;	fsFromStart					= 1;	fsFromLEOF					= 2;	fsFromMark					= 3;	rdVerify					= 64;	ioDirFlg					= 3;							{ see IM IV-125 }	ioDirMask					= $10;	fsRtParID					= 1;	fsRtDirID					= 2;{ CatSearch SearchBits Constants }	fsSBPartialName				= 1;	fsSBFullName				= 2;	fsSBFlAttrib				= 4;	fsSBFlFndrInfo				= 8;	fsSBFlLgLen					= 32;	fsSBFlPyLen					= 64;	fsSBFlRLgLen				= 128;	fsSBFlRPyLen				= 256;	fsSBFlCrDat					= 512;	fsSBFlMdDat					= 1024;	fsSBFlBkDat					= 2048;	fsSBFlXFndrInfo				= 4096;	fsSBFlParID					= 8192;	fsSBNegate					= 16384;	fsSBDrUsrWds				= 8;	fsSBDrNmFls					= 16;	fsSBDrCrDat					= 512;	fsSBDrMdDat					= 1024;	fsSBDrBkDat					= 2048;	fsSBDrFndrInfo				= 4096;	fsSBDrParID					= 8192;{ vMAttrib (GetVolParms) bit position constants }	bLimitFCBs					= 31;	bLocalWList					= 30;	bNoMiniFndr					= 29;	bNoVNEdit					= 28;	bNoLclSync					= 27;	bTrshOffLine				= 26;	bNoSwitchTo					= 25;	bNoDeskItems				= 20;	bNoBootBlks					= 19;	bAccessCntl					= 18;	bNoSysDir					= 17;	bHasExtFSVol				= 16;	bHasOpenDeny				= 15;	bHasCopyFile				= 14;	bHasMoveRename				= 13;	bHasDesktopMgr				= 12;	bHasShortName				= 11;	bHasFolderLock				= 10;	bHasPersonalAccessPrivileges = 9;	bHasUserGroupList			= 8;	bHasCatSearch				= 7;	bHasFileIDs					= 6;	bHasBTreeMgr				= 5;	bHasBlankAccessPrivileges	= 4;{ Desktop Database icon Constants }	kLargeIcon					= 1;	kLarge4BitIcon				= 2;	kLarge8BitIcon				= 3;	kSmallIcon					= 4;	kSmall4BitIcon				= 5;	kSmall8BitIcon				= 6;	kLargeIconSize				= 256;	kLarge4BitIconSize			= 512;	kLarge8BitIconSize			= 1024;	kSmallIconSize				= 64;	kSmall4BitIconSize			= 128;	kSmall8BitIconSize			= 256;{ Foreign Privilege Model Identifiers }	fsUnixPriv					= 1;{ Version Release Stage Codes }	developStage				= $20;	alphaStage					= $40;	betaStage					= $60;	finalStage					= $80;{ Authentication Constants }	kNoUserAuthentication		= 1;	kPassword					= 2;	kEncryptPassword			= 3;	kTwoWayEncryptPassword		= 6;	hFileInfo					= 0;	dirInfo						= 1;	TYPECInfoType = SInt8;CONST{ mapping codes (ioObjType) for MapName & MapID }	kOwnerID2Name				= 1;	kGroupID2Name				= 2;	kOwnerName2ID				= 3;	kGroupName2ID				= 4;{ types of oj object to be returned (ioObjType) for _GetUGEntry }	kReturnNextUser				= 1;	kReturnNextGroup			= 2;	kReturnNextUG				= 3;TYPE	FInfo = RECORD		fdType:					OSType;									{the type of the file}		fdCreator:				OSType;									{file's creator}		fdFlags:				INTEGER;								{flags ex. hasbundle,invisible,locked, etc.}		fdLocation:				Point;									{file's location in folder}		fdFldr:					INTEGER;								{folder containing file}	END;	FXInfo = RECORD		fdIconID:				INTEGER;								{Icon ID}		fdUnused:				ARRAY [0..2] OF INTEGER;				{unused but reserved 6 bytes}		fdScript:				SInt8;									{Script flag and number}		fdXFlags:				SInt8;									{More flag bits}		fdComment:				INTEGER;								{Comment ID}		fdPutAway:				LONGINT;								{Home Dir ID}	END;	DInfo = RECORD		frRect:					Rect;									{folder rect}		frFlags:				INTEGER;								{Flags}		frLocation:				Point;									{folder location}		frView:					INTEGER;								{folder view}	END;	DXInfo = RECORD		frScroll:				Point;									{scroll position}		frOpenChain:			LONGINT;								{DirID chain of open folders}		frScript:				SInt8;									{Script flag and number}		frXFlags:				SInt8;									{More flag bits}		frComment:				INTEGER;								{comment}		frPutAway:				LONGINT;								{DirID}	END;	GetVolParmsInfoBuffer = RECORD		vMVersion:				INTEGER;								{version number}		vMAttrib:				LONGINT;								{bit vector of attributes (see vMAttrib constants)}		vMLocalHand:			Handle;									{handle to private data}		vMServerAdr:			LONGINT;								{AppleTalk server address or zero}		vMVolumeGrade:			LONGINT;								{approx. speed rating or zero if unrated}		vMForeignPrivID:		INTEGER;								{foreign privilege model supported or zero if none}	END;	ParmBlkPtr = ^ParamBlockRec;	{		IOCompletionProcPtr uses register based parameters on the 68k and cannot		be written in or called from a high-level language without the help of		mixed mode or assembly glue.		In:		 => paramBlock  	A0.L	}	IOCompletionProcPtr = ProcPtr;  { PROCEDURE IOCompletion(paramBlock: ParmBlkPtr); }	IOCompletionUPP = UniversalProcPtr;	ParamBlockRec = RECORD		qLink:					QElemPtr;		qType:					INTEGER;		ioTrap:					INTEGER;		ioCmdAddr:				Ptr;		ioCompletion:			IOCompletionUPP;		ioResult:				OSErr;		ioNamePtr:				StringPtr;		ioVRefNum:				INTEGER;		CASE INTEGER OF		0: (			ioRefNum:					INTEGER;			ioVersNum:					SInt8;			ioPermssn:					SInt8;			ioMisc:						Ptr;			ioBuffer:					Ptr;			ioReqCount:					LONGINT;			ioActCount:					LONGINT;			ioPosMode:					INTEGER;			ioPosOffset:				LONGINT;		   );		1: (			ioFRefNum:					INTEGER;			ioFVersNum:					SInt8;			filler1:					SInt8;			ioFDirIndex:				INTEGER;			ioFlAttrib:					SInt8;			ioFlVersNum:				SInt8;			ioFlFndrInfo:				FInfo;			ioFlNum:					LONGINT;			ioFlStBlk:					INTEGER;			ioFlLgLen:					LONGINT;			ioFlPyLen:					LONGINT;			ioFlRStBlk:					INTEGER;			ioFlRLgLen:					LONGINT;			ioFlRPyLen:					LONGINT;			ioFlCrDat:					LONGINT;			ioFlMdDat:					LONGINT;		   );		2: (			filler2:					LONGINT;			ioVolIndex:					INTEGER;			ioVCrDate:					LONGINT;			ioVLsBkUp:					LONGINT;			ioVAtrb:					INTEGER;			ioVNmFls:					INTEGER;			ioVDirSt:					INTEGER;			ioVBlLn:					INTEGER;			ioVNmAlBlks:				INTEGER;			ioVAlBlkSiz:				LONGINT;			ioVClpSiz:					LONGINT;			ioAlBlSt:					INTEGER;			ioVNxtFNum:					LONGINT;			ioVFrBlk:					INTEGER;		   );		3: (			ioCRefNum:					INTEGER;			csCode:						INTEGER;			csParam:					ARRAY [0..10] OF INTEGER;		   );		4: (			ioSRefNum:					INTEGER;			ioSVersNum:					SInt8;			ioSPermssn:					SInt8;			ioSMix:						Ptr;			ioSFlags:					INTEGER;			ioSlot:						SInt8;			ioID:						SInt8;		   );		5: (			ioMRefNum:					INTEGER;			ioMVersNum:					SInt8;			ioMPermssn:					SInt8;			ioMMix:						Ptr;			ioMFlags:					INTEGER;			ioSEBlkPtr:					Ptr;		   );	END;	CInfoPBRec = RECORD		qLink:					QElemPtr;		qType:					INTEGER;		ioTrap:					INTEGER;		ioCmdAddr:				Ptr;		ioCompletion:			IOCompletionUPP;		ioResult:				OSErr;		ioNamePtr:				StringPtr;		ioVRefNum:				INTEGER;		ioFRefNum:				INTEGER;		ioFVersNum:				SInt8;		filler1:				SInt8;		ioFDirIndex:			INTEGER;		ioFlAttrib:				SInt8;		filler2:				SInt8;		CASE INTEGER OF		0: (			ioFlFndrInfo:				FInfo;			ioDirID:					LONGINT;			ioFlStBlk:					INTEGER;			ioFlLgLen:					LONGINT;			ioFlPyLen:					LONGINT;			ioFlRStBlk:					INTEGER;			ioFlRLgLen:					LONGINT;			ioFlRPyLen:					LONGINT;			ioFlCrDat:					LONGINT;			ioFlMdDat:					LONGINT;			ioFlBkDat:					LONGINT;			ioFlXFndrInfo:				FXInfo;			ioFlParID:					LONGINT;			ioFlClpSiz:					LONGINT;		   );		1: (			ioDrUsrWds:					DInfo;			ioDrDirID:					LONGINT;			ioDrNmFls:					INTEGER;			filler3:					ARRAY [0..8] OF INTEGER;			ioDrCrDat:					LONGINT;			ioDrMdDat:					LONGINT;			ioDrBkDat:					LONGINT;			ioDrFndrInfo:				DXInfo;			ioDrParID:					LONGINT;		   );	END;	CInfoPBPtr = ^CInfoPBRec;	CatPositionRec = RECORD		initialize:				LONGINT;		priv:					ARRAY [0..5] OF INTEGER;	END;	FSSpec = RECORD		vRefNum:				INTEGER;		parID:					LONGINT;		name:					Str63;	END;	FSSpecPtr = ^FSSpec;	FSSpecHandle = ^FSSpecPtr;{ pointer to array of FSSpecs }	FSSpecArrayPtr = FSSpecPtr;{ The only difference between "const FSSpec*" and "ConstFSSpecPtr" is    that as a parameter, ConstFSSpecPtr is allowed to be NULL }	ConstFSSpecPtr = ^FSSpec;{ The following are structures to be filled out with the _GetVolMountInfo call and passed back into the _VolumeMount call for external file system mounts. }{ the "signature" of the file system }	VolumeType = OSType;CONST{ the signature for AppleShare }	AppleShareMediaType			= 'afpm';TYPE	VolMountInfoHeader = RECORD		length:					INTEGER;								{ length of location data (including self) }		media:					VolumeType;								{ type of media.  Variable length data follows }	END;	VolMountInfoPtr = ^VolMountInfoHeader;	AFPVolMountInfo = RECORD		length:					INTEGER;								{ length of location data (including self) }		media:					VolumeType;								{ type of media }		flags:					INTEGER;								{ bits for no messages, no reconnect }		nbpInterval:			SInt8;									{ NBP Interval parameter (IM2, p.322) }		nbpCount:				SInt8;									{ NBP Interval parameter (IM2, p.322) }		uamType:				INTEGER;								{ User Authentication Method }		zoneNameOffset:			INTEGER;								{ short positive offset from start of struct to Zone Name }		serverNameOffset:		INTEGER;								{ offset to pascal Server Name string }		volNameOffset:			INTEGER;								{ offset to pascal Volume Name string }		userNameOffset:			INTEGER;								{ offset to pascal User Name string }		userPasswordOffset:		INTEGER;								{ offset to pascal User Password string }		volPasswordOffset:		INTEGER;								{ offset to pascal Volume Password string }		AFPData:				PACKED ARRAY [0..143] OF CHAR;			{ variable length data may follow }	END;	AFPVolMountInfoPtr = ^AFPVolMountInfo;	DTPBRec = RECORD		qLink:					QElemPtr;		qType:					INTEGER;		ioTrap:					INTEGER;		ioCmdAddr:				Ptr;		ioCompletion:			IOCompletionUPP;		ioResult:				OSErr;		ioNamePtr:				StringPtr;		ioVRefNum:				INTEGER;		ioDTRefNum:				INTEGER;								{ desktop refnum }		ioIndex:				INTEGER;		ioTagInfo:				LONGINT;		ioDTBuffer:				Ptr;		ioDTReqCount:			LONGINT;		ioDTActCount:			LONGINT;		ioFiller1:				SInt8;		ioIconType:				SInt8;		ioFiller2:				INTEGER;		ioDirID:				LONGINT;		ioFileCreator:			OSType;		ioFileType:				OSType;		ioFiller3:				LONGINT;		ioDTLgLen:				LONGINT;		ioDTPyLen:				LONGINT;		ioFiller4:				ARRAY [0..13] OF INTEGER;		ioAPPLParID:			LONGINT;	END;	DTPBPtr = ^DTPBRec;	HParamBlockRec = RECORD		qLink:					QElemPtr;		qType:					INTEGER;		ioTrap:					INTEGER;		ioCmdAddr:				Ptr;		ioCompletion:			IOCompletionUPP;		ioResult:				OSErr;		ioNamePtr:				StringPtr;		ioVRefNum:				INTEGER;		CASE INTEGER OF		0: (			ioRefNum:					INTEGER;			ioVersNum:					SInt8;			ioPermssn:					SInt8;			ioMisc:						Ptr;			ioBuffer:					Ptr;			ioReqCount:					LONGINT;			ioActCount:					LONGINT;			ioPosMode:					INTEGER;			ioPosOffset:				LONGINT;		   );		1: (			ioFRefNum:					INTEGER;			ioFVersNum:					SInt8;			filler1:					SInt8;			ioFDirIndex:				INTEGER;			ioFlAttrib:					SInt8;			ioFlVersNum:				SInt8;			ioFlFndrInfo:				FInfo;			ioDirID:					LONGINT;			ioFlStBlk:					INTEGER;			ioFlLgLen:					LONGINT;			ioFlPyLen:					LONGINT;			ioFlRStBlk:					INTEGER;			ioFlRLgLen:					LONGINT;			ioFlRPyLen:					LONGINT;			ioFlCrDat:					LONGINT;			ioFlMdDat:					LONGINT;		   );		2: (			filler2:					LONGINT;			ioVolIndex:					INTEGER;			ioVCrDate:					LONGINT;			ioVLsMod:					LONGINT;			ioVAtrb:					INTEGER;			ioVNmFls:					INTEGER;			ioVBitMap:					INTEGER;			ioAllocPtr:					INTEGER;			ioVNmAlBlks:				INTEGER;			ioVAlBlkSiz:				LONGINT;			ioVClpSiz:					LONGINT;			ioAlBlSt:					INTEGER;			ioVNxtCNID:					LONGINT;			ioVFrBlk:					INTEGER;			ioVSigWord:					INTEGER;			ioVDrvInfo:					INTEGER;			ioVDRefNum:					INTEGER;			ioVFSID:					INTEGER;			ioVBkUp:					LONGINT;			ioVSeqNum:					INTEGER;			ioVWrCnt:					LONGINT;			ioVFilCnt:					LONGINT;			ioVDirCnt:					LONGINT;			ioVFndrInfo:				ARRAY [0..7] OF LONGINT;		   );		3: (			filler3:					INTEGER;			ioDenyModes:				INTEGER;			filler4:					INTEGER;			filler5:					SInt8;			ioACUser:					SInt8;			filler6:					LONGINT;			ioACOwnerID:				LONGINT;			ioACGroupID:				LONGINT;			ioACAccess:					LONGINT;		   );		4: (			filler7:					INTEGER;			ioObjType:					INTEGER;			ioObjNamePtr:				StringPtr;			ioObjID:					LONGINT;		   );		5: (			ioDstVRefNum:				INTEGER;			filler8:					INTEGER;			ioNewName:					StringPtr;			ioCopyName:					StringPtr;			ioNewDirID:					LONGINT;		   );		6: (			filler9:					INTEGER;			ioWDIndex:					INTEGER;			ioWDProcID:					LONGINT;			ioWDVRefNum:				INTEGER;			filler10:					INTEGER;			filler11:					LONGINT;			filler12:					LONGINT;			filler13:					LONGINT;			ioWDDirID:					LONGINT;		   );		7: (			filler14:					LONGINT;			ioDestNamePtr:				StringPtr;			filler15:					LONGINT;			ioDestDirID:				LONGINT;			filler16:					LONGINT;			filler17:					LONGINT;			ioSrcDirID:					LONGINT;			filler18:					INTEGER;			ioFileID:					LONGINT;		   );		8: (			ioMatchPtr:					FSSpecPtr;			ioReqMatchCount:			LONGINT;			ioActMatchCount:			LONGINT;			ioSearchBits:				LONGINT;			ioSearchInfo1:				CInfoPBPtr;			ioSearchInfo2:				CInfoPBPtr;			ioSearchTime:				LONGINT;			ioCatPosition:				CatPositionRec;			ioOptBuffer:				Ptr;			ioOptBufSize:				LONGINT;		   );		9: (			ioFiller21:					LONGINT;			ioFiller22:					LONGINT;			ioForeignPrivBuffer:		Ptr;			ioForeignPrivActCount:		LONGINT;			ioForeignPrivReqCount:		LONGINT;			ioFiller23:					LONGINT;			ioForeignPrivDirID:			LONGINT;			ioForeignPrivInfo1:			LONGINT;			ioForeignPrivInfo2:			LONGINT;			ioForeignPrivInfo3:			LONGINT;			ioForeignPrivInfo4:			LONGINT;		   );	END;	HParmBlkPtr = ^HParamBlockRec;	CMovePBRec = RECORD		qLink:					QElemPtr;		qType:					INTEGER;		ioTrap:					INTEGER;		ioCmdAddr:				Ptr;		ioCompletion:			IOCompletionUPP;		ioResult:				OSErr;		ioNamePtr:				StringPtr;		ioVRefNum:				INTEGER;		filler1:				LONGINT;		ioNewName:				StringPtr;		filler2:				LONGINT;		ioNewDirID:				LONGINT;		filler3:				ARRAY [0..1] OF LONGINT;		ioDirID:				LONGINT;	END;	CMovePBPtr = ^CMovePBRec;	WDPBRec = RECORD		qLink:					QElemPtr;		qType:					INTEGER;		ioTrap:					INTEGER;		ioCmdAddr:				Ptr;		ioCompletion:			IOCompletionUPP;		ioResult:				OSErr;		ioNamePtr:				StringPtr;		ioVRefNum:				INTEGER;		filler1:				INTEGER;		ioWDIndex:				INTEGER;		ioWDProcID:				LONGINT;		ioWDVRefNum:			INTEGER;		filler2:				ARRAY [0..6] OF INTEGER;		ioWDDirID:				LONGINT;	END;	WDPBPtr = ^WDPBRec;	FCBPBRec = RECORD		qLink:					QElemPtr;		qType:					INTEGER;		ioTrap:					INTEGER;		ioCmdAddr:				Ptr;		ioCompletion:			IOCompletionUPP;		ioResult:				OSErr;		ioNamePtr:				StringPtr;		ioVRefNum:				INTEGER;		ioRefNum:				INTEGER;		filler:					INTEGER;		ioFCBIndx:				INTEGER;		filler1:				INTEGER;		ioFCBFlNm:				LONGINT;		ioFCBFlags:				INTEGER;		ioFCBStBlk:				INTEGER;		ioFCBEOF:				LONGINT;		ioFCBPLen:				LONGINT;		ioFCBCrPs:				LONGINT;		ioFCBVRefNum:			INTEGER;		ioFCBClpSiz:			LONGINT;		ioFCBParID:				LONGINT;	END;	FCBPBPtr = ^FCBPBRec;	VCB = RECORD		qLink:					QElemPtr;		qType:					INTEGER;		vcbFlags:				INTEGER;		vcbSigWord:				INTEGER;		vcbCrDate:				LONGINT;		vcbLsMod:				LONGINT;		vcbAtrb:				INTEGER;		vcbNmFls:				INTEGER;		vcbVBMSt:				INTEGER;		vcbAllocPtr:			INTEGER;		vcbNmAlBlks:			INTEGER;		vcbAlBlkSiz:			LONGINT;		vcbClpSiz:				LONGINT;		vcbAlBlSt:				INTEGER;		vcbNxtCNID:				LONGINT;		vcbFreeBks:				INTEGER;		vcbVN:					Str27;		vcbDrvNum:				INTEGER;		vcbDRefNum:				INTEGER;		vcbFSID:				INTEGER;		vcbVRefNum:				INTEGER;		vcbMAdr:				Ptr;		vcbBufAdr:				Ptr;		vcbMLen:				INTEGER;		vcbDirIndex:			INTEGER;		vcbDirBlk:				INTEGER;		vcbVolBkUp:				LONGINT;		vcbVSeqNum:				INTEGER;		vcbWrCnt:				LONGINT;		vcbXTClpSiz:			LONGINT;		vcbCTClpSiz:			LONGINT;		vcbNmRtDirs:			INTEGER;		vcbFilCnt:				LONGINT;		vcbDirCnt:				LONGINT;		vcbFndrInfo:			ARRAY [0..7] OF LONGINT;		vcbVCSize:				INTEGER;		vcbVBMCSiz:				INTEGER;		vcbCtlCSiz:				INTEGER;		vcbXTAlBlks:			INTEGER;		vcbCTAlBlks:			INTEGER;		vcbXTRef:				INTEGER;		vcbCTRef:				INTEGER;		vcbCtlBuf:				Ptr;		vcbDirIDM:				LONGINT;		vcbOffsM:				INTEGER;	END;	DrvQEl = RECORD		qLink:					QElemPtr;		qType:					INTEGER;		dQDrive:				INTEGER;		dQRefNum:				INTEGER;		dQFSID:					INTEGER;		dQDrvSz:				INTEGER;		dQDrvSz2:				INTEGER;	END;	DrvQElPtr = ^DrvQEl;CONST	uppIOCompletionProcInfo = $00009802; { Register PROCEDURE (4 bytes in A0); }FUNCTION NewIOCompletionProc(userRoutine: IOCompletionProcPtr): IOCompletionUPP;	{$IFC NOT GENERATINGCFM }	INLINE $2E9F;	{$ENDC}PROCEDURE CallIOCompletionProc(paramBlock: ParmBlkPtr; userRoutine: IOCompletionUPP);	{$IFC NOT GENERATINGCFM}	{To be implemented:  Glue to move parameters into registers.}	{$ENDC}FUNCTION PBOpen(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBOpenSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A000, $3E80;	{$ENDC}FUNCTION PBOpenAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A400, $3E80;	{$ENDC}FUNCTION PBOpenImmed(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A200, $3E80;	{$ENDC}FUNCTION PBClose(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBCloseSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A001, $3E80;	{$ENDC}FUNCTION PBCloseAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A401, $3E80;	{$ENDC}FUNCTION PBCloseImmed(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A201, $3E80;	{$ENDC}FUNCTION PBRead(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBReadSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A002, $3E80;	{$ENDC}FUNCTION PBReadAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A402, $3E80;	{$ENDC}FUNCTION PBReadImmed(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A202, $3E80;	{$ENDC}FUNCTION PBWrite(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBWriteSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A003, $3E80;	{$ENDC}FUNCTION PBWriteAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A403, $3E80;	{$ENDC}FUNCTION PBWriteImmed(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A203, $3E80;	{$ENDC}FUNCTION PBGetVInfo(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBGetVInfoSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A007, $3E80;	{$ENDC}FUNCTION PBGetVInfoAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A407, $3E80;	{$ENDC}FUNCTION PBGetVol(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBGetVolSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A014, $3E80;	{$ENDC}FUNCTION PBGetVolAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A414, $3E80;	{$ENDC}FUNCTION PBSetVol(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBSetVolSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A015, $3E80;	{$ENDC}FUNCTION PBSetVolAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A415, $3E80;	{$ENDC}FUNCTION PBFlushVol(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBFlushVolSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A013, $3E80;	{$ENDC}FUNCTION PBFlushVolAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A413, $3E80;	{$ENDC}FUNCTION PBCreate(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBCreateSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A008, $3E80;	{$ENDC}FUNCTION PBCreateAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A408, $3E80;	{$ENDC}FUNCTION PBDelete(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBDeleteSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A009, $3E80;	{$ENDC}FUNCTION PBDeleteAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A409, $3E80;	{$ENDC}FUNCTION PBOpenDF(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBOpenDFSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $701A, $A060, $3E80;	{$ENDC}FUNCTION PBOpenDFAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $701A, $A460, $3E80;	{$ENDC}FUNCTION PBOpenRF(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBOpenRFSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A00A, $3E80;	{$ENDC}FUNCTION PBOpenRFAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A40A, $3E80;	{$ENDC}FUNCTION PBRename(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBRenameSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A00B, $3E80;	{$ENDC}FUNCTION PBRenameAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A40B, $3E80;	{$ENDC}FUNCTION PBGetFInfo(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBGetFInfoSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A00C, $3E80;	{$ENDC}FUNCTION PBGetFInfoAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A40C, $3E80;	{$ENDC}FUNCTION PBSetFInfo(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBSetFInfoSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A00D, $3E80;	{$ENDC}FUNCTION PBSetFInfoAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A40D, $3E80;	{$ENDC}FUNCTION PBSetFLock(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBSetFLockSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A041, $3E80;	{$ENDC}FUNCTION PBSetFLockAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A441, $3E80;	{$ENDC}FUNCTION PBRstFLock(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBRstFLockSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A042, $3E80;	{$ENDC}FUNCTION PBRstFLockAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A442, $3E80;	{$ENDC}FUNCTION PBSetFVers(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBSetFVersSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A043, $3E80;	{$ENDC}FUNCTION PBSetFVersAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A443, $3E80;	{$ENDC}FUNCTION PBAllocate(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBAllocateSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A010, $3E80;	{$ENDC}FUNCTION PBAllocateAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A410, $3E80;	{$ENDC}FUNCTION PBGetEOF(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBGetEOFSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A011, $3E80;	{$ENDC}FUNCTION PBGetEOFAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A411, $3E80;	{$ENDC}FUNCTION PBSetEOF(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBSetEOFSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A012, $3E80;	{$ENDC}FUNCTION PBSetEOFAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A412, $3E80;	{$ENDC}FUNCTION PBGetFPos(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBGetFPosSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A018, $3E80;	{$ENDC}FUNCTION PBGetFPosAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A418, $3E80;	{$ENDC}FUNCTION PBSetFPos(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBSetFPosSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A044, $3E80;	{$ENDC}FUNCTION PBSetFPosAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A444, $3E80;	{$ENDC}FUNCTION PBFlushFile(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBFlushFileSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A045, $3E80;	{$ENDC}FUNCTION PBFlushFileAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A445, $3E80;	{$ENDC}FUNCTION PBMountVol(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A00F, $3E80;	{$ENDC}FUNCTION PBUnmountVol(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A00E, $3E80;	{$ENDC}FUNCTION PBEject(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A017, $3E80;	{$ENDC}FUNCTION PBOffLine(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A035, $3E80;	{$ENDC}FUNCTION PBCatSearch(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBCatSearchSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7018, $A260, $3E80;	{$ENDC}FUNCTION PBCatSearchAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7018, $A660, $3E80;	{$ENDC}FUNCTION SetVol(volName: StringPtr; vRefNum: INTEGER): OSErr;FUNCTION UnmountVol(volName: StringPtr; vRefNum: INTEGER): OSErr;FUNCTION Eject(volName: StringPtr; vRefNum: INTEGER): OSErr;FUNCTION FlushVol(volName: StringPtr; vRefNum: INTEGER): OSErr;FUNCTION HSetVol(volName: StringPtr; vRefNum: INTEGER; dirID: LONGINT): OSErr;PROCEDURE AddDrive(drvrRefNum: INTEGER; drvNum: INTEGER; qEl: DrvQElPtr);FUNCTION FSOpen(fileName: ConstStr255Param; vRefNum: INTEGER; VAR refNum: INTEGER): OSErr;FUNCTION OpenDF(fileName: ConstStr255Param; vRefNum: INTEGER; VAR refNum: INTEGER): OSErr;FUNCTION FSClose(refNum: INTEGER): OSErr;FUNCTION FSRead(refNum: INTEGER; VAR count: LONGINT; buffPtr: UNIV Ptr): OSErr;FUNCTION FSWrite(refNum: INTEGER; VAR count: LONGINT; buffPtr: UNIV Ptr): OSErr;FUNCTION GetVInfo(drvNum: INTEGER; volName: StringPtr; VAR vRefNum: INTEGER; VAR freeBytes: LONGINT): OSErr;FUNCTION GetFInfo(fileName: ConstStr255Param; vRefNum: INTEGER; VAR fndrInfo: FInfo): OSErr;FUNCTION GetVol(volName: StringPtr; VAR vRefNum: INTEGER): OSErr;FUNCTION Create(fileName: ConstStr255Param; vRefNum: INTEGER; creator: OSType; fileType: OSType): OSErr;FUNCTION FSDelete(fileName: ConstStr255Param; vRefNum: INTEGER): OSErr;FUNCTION OpenRF(fileName: ConstStr255Param; vRefNum: INTEGER; VAR refNum: INTEGER): OSErr;FUNCTION Rename(oldName: ConstStr255Param; vRefNum: INTEGER; newName: ConstStr255Param): OSErr;FUNCTION SetFInfo(fileName: ConstStr255Param; vRefNum: INTEGER; fndrInfo: FInfo): OSErr;FUNCTION SetFLock(fileName: ConstStr255Param; vRefNum: INTEGER): OSErr;FUNCTION RstFLock(fileName: ConstStr255Param; vRefNum: INTEGER): OSErr;FUNCTION Allocate(refNum: INTEGER; VAR count: LONGINT): OSErr;FUNCTION GetEOF(refNum: INTEGER; VAR logEOF: LONGINT): OSErr;FUNCTION SetEOF(refNum: INTEGER; logEOF: LONGINT): OSErr;FUNCTION GetFPos(refNum: INTEGER; VAR filePos: LONGINT): OSErr;FUNCTION SetFPos(refNum: INTEGER; posMode: INTEGER; posOff: LONGINT): OSErr;FUNCTION GetVRefNum(fileRefNum: INTEGER; VAR vRefNum: INTEGER): OSErr;FUNCTION PBOpenWD(paramBlock: WDPBPtr; async: BOOLEAN): OSErr;FUNCTION PBOpenWDSync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7001, $A260, $3E80;	{$ENDC}FUNCTION PBOpenWDAsync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7001, $A660, $3E80;	{$ENDC}FUNCTION PBCloseWD(paramBlock: WDPBPtr; async: BOOLEAN): OSErr;FUNCTION PBCloseWDSync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7002, $A260, $3E80;	{$ENDC}FUNCTION PBCloseWDAsync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7002, $A660, $3E80;	{$ENDC}FUNCTION PBHSetVol(paramBlock: WDPBPtr; async: BOOLEAN): OSErr;FUNCTION PBHSetVolSync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A215, $3E80;	{$ENDC}FUNCTION PBHSetVolAsync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A615, $3E80;	{$ENDC}FUNCTION PBHGetVol(paramBlock: WDPBPtr; async: BOOLEAN): OSErr;FUNCTION PBHGetVolSync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A214, $3E80;	{$ENDC}FUNCTION PBHGetVolAsync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A614, $3E80;	{$ENDC}FUNCTION PBCatMove(paramBlock: CMovePBPtr; async: BOOLEAN): OSErr;FUNCTION PBCatMoveSync(paramBlock: CMovePBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7005, $A260, $3E80;	{$ENDC}FUNCTION PBCatMoveAsync(paramBlock: CMovePBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7005, $A660, $3E80;	{$ENDC}FUNCTION PBDirCreate(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBDirCreateSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7006, $A260, $3E80;	{$ENDC}FUNCTION PBDirCreateAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7006, $A660, $3E80;	{$ENDC}FUNCTION PBGetWDInfo(paramBlock: WDPBPtr; async: BOOLEAN): OSErr;FUNCTION PBGetWDInfoSync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7007, $A260, $3E80;	{$ENDC}FUNCTION PBGetWDInfoAsync(paramBlock: WDPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7007, $A660, $3E80;	{$ENDC}FUNCTION PBGetFCBInfo(paramBlock: FCBPBPtr; async: BOOLEAN): OSErr;FUNCTION PBGetFCBInfoSync(paramBlock: FCBPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7008, $A260, $3E80;	{$ENDC}FUNCTION PBGetFCBInfoAsync(paramBlock: FCBPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7008, $A660, $3E80;	{$ENDC}FUNCTION PBGetCatInfo(paramBlock: CInfoPBPtr; async: BOOLEAN): OSErr;FUNCTION PBGetCatInfoSync(paramBlock: CInfoPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7009, $A260, $3E80;	{$ENDC}FUNCTION PBGetCatInfoAsync(paramBlock: CInfoPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7009, $A660, $3E80;	{$ENDC}FUNCTION PBSetCatInfo(paramBlock: CInfoPBPtr; async: BOOLEAN): OSErr;FUNCTION PBSetCatInfoSync(paramBlock: CInfoPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $700A, $A260, $3E80;	{$ENDC}FUNCTION PBSetCatInfoAsync(paramBlock: CInfoPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $700A, $A660, $3E80;	{$ENDC}FUNCTION PBAllocContig(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBAllocContigSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A210, $3E80;	{$ENDC}FUNCTION PBAllocContigAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A610, $3E80;	{$ENDC}FUNCTION PBLockRange(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBLockRangeSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7010, $A260, $3E80;	{$ENDC}FUNCTION PBLockRangeAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7010, $A660, $3E80;	{$ENDC}FUNCTION PBUnlockRange(paramBlock: ParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBUnlockRangeSync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7011, $A260, $3E80;	{$ENDC}FUNCTION PBUnlockRangeAsync(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7011, $A660, $3E80;	{$ENDC}FUNCTION PBSetVInfo(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBSetVInfoSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $700B, $A260, $3E80;	{$ENDC}FUNCTION PBSetVInfoAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $700B, $A660, $3E80;	{$ENDC}FUNCTION PBHGetVInfo(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHGetVInfoSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A207, $3E80;	{$ENDC}FUNCTION PBHGetVInfoAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A607, $3E80;	{$ENDC}FUNCTION PBHOpen(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHOpenSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A200, $3E80;	{$ENDC}FUNCTION PBHOpenAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A600, $3E80;	{$ENDC}FUNCTION PBHOpenRF(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHOpenRFSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A20A, $3E80;	{$ENDC}FUNCTION PBHOpenRFAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A60A, $3E80;	{$ENDC}FUNCTION PBHOpenDF(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHOpenDFSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $701A, $A260, $3E80;	{$ENDC}FUNCTION PBHOpenDFAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $701A, $A660, $3E80;	{$ENDC}FUNCTION PBHCreate(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHCreateSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A208, $3E80;	{$ENDC}FUNCTION PBHCreateAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A608, $3E80;	{$ENDC}FUNCTION PBHDelete(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHDeleteSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A209, $3E80;	{$ENDC}FUNCTION PBHDeleteAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A609, $3E80;	{$ENDC}FUNCTION PBHRename(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHRenameSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A20B, $3E80;	{$ENDC}FUNCTION PBHRenameAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A60B, $3E80;	{$ENDC}FUNCTION PBHRstFLock(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHRstFLockSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A242, $3E80;	{$ENDC}FUNCTION PBHRstFLockAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A642, $3E80;	{$ENDC}FUNCTION PBHSetFLock(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHSetFLockSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A241, $3E80;	{$ENDC}FUNCTION PBHSetFLockAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A641, $3E80;	{$ENDC}FUNCTION PBHGetFInfo(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHGetFInfoSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A20C, $3E80;	{$ENDC}FUNCTION PBHGetFInfoAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A60C, $3E80;	{$ENDC}FUNCTION PBHSetFInfo(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHSetFInfoSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A20D, $3E80;	{$ENDC}FUNCTION PBHSetFInfoAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $A60D, $3E80;	{$ENDC}FUNCTION PBMakeFSSpec(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBMakeFSSpecSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $701B, $A260, $3E80;	{$ENDC}FUNCTION PBMakeFSSpecAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $701B, $A660, $3E80;	{$ENDC}PROCEDURE FInitQueue;	{$IFC NOT GENERATINGCFM}	INLINE $A016;	{$ENDC}FUNCTION GetFSQHdr: QHdrPtr;	{$IFC NOT GENERATINGCFM}	INLINE $2EBC, $0000, $0360;	{$ENDC}FUNCTION GetDrvQHdr: QHdrPtr;	{$IFC NOT GENERATINGCFM}	INLINE $2EBC, $0000, $0308;	{$ENDC}FUNCTION GetVCBQHdr: QHdrPtr;	{$IFC NOT GENERATINGCFM}	INLINE $2EBC, $0000, $0356;	{$ENDC}FUNCTION HGetVol(volName: StringPtr; VAR vRefNum: INTEGER; VAR dirID: LONGINT): OSErr;FUNCTION HOpen(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param; permission: ByteParameter; VAR refNum: INTEGER): OSErr;FUNCTION HOpenDF(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param; permission: ByteParameter; VAR refNum: INTEGER): OSErr;FUNCTION HOpenRF(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param; permission: ByteParameter; VAR refNum: INTEGER): OSErr;FUNCTION AllocContig(refNum: INTEGER; VAR count: LONGINT): OSErr;FUNCTION HCreate(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param; creator: OSType; fileType: OSType): OSErr;FUNCTION DirCreate(vRefNum: INTEGER; parentDirID: LONGINT; directoryName: ConstStr255Param; VAR createdDirID: LONGINT): OSErr;FUNCTION HDelete(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param): OSErr;FUNCTION HGetFInfo(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param; VAR fndrInfo: FInfo): OSErr;FUNCTION HSetFInfo(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param; fndrInfo: FInfo): OSErr;FUNCTION HSetFLock(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param): OSErr;FUNCTION HRstFLock(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param): OSErr;FUNCTION HRename(vRefNum: INTEGER; dirID: LONGINT; oldName: ConstStr255Param; newName: ConstStr255Param): OSErr;FUNCTION CatMove(vRefNum: INTEGER; dirID: LONGINT; oldName: ConstStr255Param; newDirID: LONGINT; newName: ConstStr255Param): OSErr;FUNCTION OpenWD(vRefNum: INTEGER; dirID: LONGINT; procID: LONGINT; VAR wdRefNum: INTEGER): OSErr;FUNCTION CloseWD(wdRefNum: INTEGER): OSErr;FUNCTION GetWDInfo(wdRefNum: INTEGER; VAR vRefNum: INTEGER; VAR dirID: LONGINT; VAR procID: LONGINT): OSErr;{  shared environment  }FUNCTION PBHGetVolParms(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHGetVolParmsSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7030, $A260, $3E80;	{$ENDC}FUNCTION PBHGetVolParmsAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7030, $A660, $3E80;	{$ENDC}FUNCTION PBHGetLogInInfo(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHGetLogInInfoSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7031, $A260, $3E80;	{$ENDC}FUNCTION PBHGetLogInInfoAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7031, $A660, $3E80;	{$ENDC}FUNCTION PBHGetDirAccess(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHGetDirAccessSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7032, $A260, $3E80;	{$ENDC}FUNCTION PBHGetDirAccessAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7032, $A660, $3E80;	{$ENDC}FUNCTION PBHSetDirAccess(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHSetDirAccessSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7033, $A260, $3E80;	{$ENDC}FUNCTION PBHSetDirAccessAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7033, $A660, $3E80;	{$ENDC}FUNCTION PBHMapID(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHMapIDSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7034, $A260, $3E80;	{$ENDC}FUNCTION PBHMapIDAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7034, $A660, $3E80;	{$ENDC}FUNCTION PBHMapName(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHMapNameSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7035, $A260, $3E80;	{$ENDC}FUNCTION PBHMapNameAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7035, $A660, $3E80;	{$ENDC}FUNCTION PBHCopyFile(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHCopyFileSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7036, $A260, $3E80;	{$ENDC}FUNCTION PBHCopyFileAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7036, $A660, $3E80;	{$ENDC}FUNCTION PBHMoveRename(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHMoveRenameSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7037, $A260, $3E80;	{$ENDC}FUNCTION PBHMoveRenameAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7037, $A660, $3E80;	{$ENDC}FUNCTION PBHOpenDeny(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHOpenDenySync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7038, $A260, $3E80;	{$ENDC}FUNCTION PBHOpenDenyAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7038, $A660, $3E80;	{$ENDC}FUNCTION PBHOpenRFDeny(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBHOpenRFDenySync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7039, $A260, $3E80;	{$ENDC}FUNCTION PBHOpenRFDenyAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7039, $A660, $3E80;	{$ENDC}FUNCTION PBExchangeFiles(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBExchangeFilesSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7017, $A260, $3E80;	{$ENDC}FUNCTION PBExchangeFilesAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7017, $A660, $3E80;	{$ENDC}FUNCTION PBCreateFileIDRef(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBCreateFileIDRefSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7014, $A260, $3E80;	{$ENDC}FUNCTION PBCreateFileIDRefAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7014, $A660, $3E80;	{$ENDC}FUNCTION PBResolveFileIDRef(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBResolveFileIDRefSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7016, $A260, $3E80;	{$ENDC}FUNCTION PBResolveFileIDRefAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7016, $A660, $3E80;	{$ENDC}FUNCTION PBDeleteFileIDRef(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBDeleteFileIDRefSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7015, $A260, $3E80;	{$ENDC}FUNCTION PBDeleteFileIDRefAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7015, $A660, $3E80;	{$ENDC}FUNCTION PBGetForeignPrivs(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBGetForeignPrivsSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7060, $A260, $3E80;	{$ENDC}FUNCTION PBGetForeignPrivsAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7060, $A660, $3E80;	{$ENDC}FUNCTION PBSetForeignPrivs(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBSetForeignPrivsSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7061, $A260, $3E80;	{$ENDC}FUNCTION PBSetForeignPrivsAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7061, $A660, $3E80;	{$ENDC}{  Desktop Manager  }FUNCTION PBDTGetPath(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7020, $A260, $3E80;	{$ENDC}FUNCTION PBDTCloseDown(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7021, $A260, $3E80;	{$ENDC}FUNCTION PBDTAddIcon(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTAddIconSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7022, $A260, $3E80;	{$ENDC}FUNCTION PBDTAddIconAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7022, $A660, $3E80;	{$ENDC}FUNCTION PBDTGetIcon(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTGetIconSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7023, $A260, $3E80;	{$ENDC}FUNCTION PBDTGetIconAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7023, $A660, $3E80;	{$ENDC}FUNCTION PBDTGetIconInfo(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTGetIconInfoSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7024, $A260, $3E80;	{$ENDC}FUNCTION PBDTGetIconInfoAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7024, $A660, $3E80;	{$ENDC}FUNCTION PBDTAddAPPL(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTAddAPPLSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7025, $A260, $3E80;	{$ENDC}FUNCTION PBDTAddAPPLAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7025, $A660, $3E80;	{$ENDC}FUNCTION PBDTRemoveAPPL(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTRemoveAPPLSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7026, $A260, $3E80;	{$ENDC}FUNCTION PBDTRemoveAPPLAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7026, $A660, $3E80;	{$ENDC}FUNCTION PBDTGetAPPL(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTGetAPPLSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7027, $A260, $3E80;	{$ENDC}FUNCTION PBDTGetAPPLAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7027, $A660, $3E80;	{$ENDC}FUNCTION PBDTSetComment(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTSetCommentSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7028, $A260, $3E80;	{$ENDC}FUNCTION PBDTSetCommentAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7028, $A660, $3E80;	{$ENDC}FUNCTION PBDTRemoveComment(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTRemoveCommentSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7029, $A260, $3E80;	{$ENDC}FUNCTION PBDTRemoveCommentAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7029, $A660, $3E80;	{$ENDC}FUNCTION PBDTGetComment(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTGetCommentSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702A, $A260, $3E80;	{$ENDC}FUNCTION PBDTGetCommentAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702A, $A660, $3E80;	{$ENDC}FUNCTION PBDTFlush(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTFlushSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702B, $A260, $3E80;	{$ENDC}FUNCTION PBDTFlushAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702B, $A660, $3E80;	{$ENDC}FUNCTION PBDTReset(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTResetSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702C, $A260, $3E80;	{$ENDC}FUNCTION PBDTResetAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702C, $A660, $3E80;	{$ENDC}FUNCTION PBDTGetInfo(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTGetInfoSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702D, $A260, $3E80;	{$ENDC}FUNCTION PBDTGetInfoAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702D, $A660, $3E80;	{$ENDC}FUNCTION PBDTOpenInform(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702E, $A060, $3E80;	{$ENDC}FUNCTION PBDTDelete(paramBlock: DTPBPtr; async: BOOLEAN): OSErr;FUNCTION PBDTDeleteSync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702F, $A060, $3E80;	{$ENDC}FUNCTION PBDTDeleteAsync(paramBlock: DTPBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $702F, $A460, $3E80;	{$ENDC}{  VolumeMount traps  }FUNCTION PBGetVolMountInfoSize(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $703F, $A260, $3E80;	{$ENDC}FUNCTION PBGetVolMountInfo(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7040, $A260, $3E80;	{$ENDC}FUNCTION PBVolumeMount(paramBlock: ParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7041, $A260, $3E80;	{$ENDC}{  FSp traps  }FUNCTION FSMakeFSSpec(vRefNum: INTEGER; dirID: LONGINT; fileName: ConstStr255Param; VAR spec: FSSpec): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7001, $AA52;	{$ENDC}FUNCTION FSpOpenDF(spec: FSSpec; permission: ByteParameter; VAR refNum: INTEGER): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7002, $AA52;	{$ENDC}FUNCTION FSpOpenRF(spec: FSSpec; permission: ByteParameter; VAR refNum: INTEGER): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7003, $AA52;	{$ENDC}FUNCTION FSpCreate(spec: FSSpec; creator: OSType; fileType: OSType; scriptTag: ScriptCode): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7004, $AA52;	{$ENDC}FUNCTION FSpDirCreate(spec: FSSpec; scriptTag: ScriptCode; VAR createdDirID: LONGINT): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7005, $AA52;	{$ENDC}FUNCTION FSpDelete(spec: FSSpec): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7006, $AA52;	{$ENDC}FUNCTION FSpGetFInfo(spec: FSSpec; VAR fndrInfo: FInfo): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7007, $AA52;	{$ENDC}FUNCTION FSpSetFInfo(spec: FSSpec; fndrInfo: FInfo): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7008, $AA52;	{$ENDC}FUNCTION FSpSetFLock(spec: FSSpec): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $7009, $AA52;	{$ENDC}FUNCTION FSpRstFLock(spec: FSSpec): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700A, $AA52;	{$ENDC}FUNCTION FSpRename(spec: FSSpec; newName: ConstStr255Param): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700B, $AA52;	{$ENDC}FUNCTION FSpCatMove(source: FSSpec; dest: FSSpec): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700C, $AA52;	{$ENDC}FUNCTION FSpExchangeFiles(source: FSSpec; dest: FSSpec): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $700F, $AA52;	{$ENDC}{	PBGetAltAccess and PBSetAltAccess are obsolete and will not be supported 	on PowerPC. Equivalent functionality is provided by the routines 	PBGetForeignPrivs and PBSetForeignPrivs.}{$IFC OLDROUTINENAMES  & NOT GENERATINGCFM }FUNCTION PBGetAltAccess(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBGetAltAccessSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7060, $A060, $3E80;	{$ENDC}FUNCTION PBGetAltAccessAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7060, $A460, $3E80;	{$ENDC}FUNCTION PBSetAltAccess(paramBlock: HParmBlkPtr; async: BOOLEAN): OSErr;FUNCTION PBSetAltAccessSync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7061, $A060, $3E80;	{$ENDC}FUNCTION PBSetAltAccessAsync(paramBlock: HParmBlkPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7061, $A460, $3E80;	{$ENDC}{$ENDC}FUNCTION PBShareSync(paramBlock: CMovePBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7042, $A260, $3E80;	{$ENDC}FUNCTION PBShareAsync(paramBlock: CMovePBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7042, $A660, $3E80;	{$ENDC}FUNCTION PBUnshareSync(paramBlock: CMovePBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7043, $A260, $3E80;	{$ENDC}FUNCTION PBUnshareAsync(paramBlock: CMovePBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7043, $A660, $3E80;	{$ENDC}FUNCTION PBGetUGEntrySync(paramBlock: CMovePBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7044, $A260, $3E80;	{$ENDC}FUNCTION PBGetUGEntryAsync(paramBlock: CMovePBPtr): OSErr;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $7044, $A660, $3E80;	{$ENDC}{$ALIGN RESET}{$POP}{$SETC UsingIncludes := FilesIncludes}{$ENDC} {__FILES__}{$IFC NOT UsingIncludes} END.{$ENDC}