{ 	File:		Lists.p  	Copyright:	© 1984-1994 by Apple Computer, Inc. 				All rights reserved.  	Version:	Universal Interfaces 2.0a1.  ETO #15, MPW prerelease.  Sunday, July 17, 1994.   	Bugs?:		If you find a problem with this file, send the file and version 				information (from above) and the problem description to:  					Internet:	apple.bugs@applelink.apple.com 					AppleLink:	APPLE.BUGS }{$IFC UNDEFINED UsingIncludes}{$SETC UsingIncludes := 0}{$ENDC}{$IFC NOT UsingIncludes} UNIT Lists; INTERFACE{$ENDC}{$IFC UNDEFINED __LISTS__}{$SETC __LISTS__ := 1}{$I+}{$SETC ListsIncludes := UsingIncludes}{$SETC UsingIncludes := 1}{$IFC UNDEFINED __TYPES__}{$I Types.p}{$ENDC}{	ConditionalMacros.p											}{$IFC UNDEFINED __CONTROLS__}{$I Controls.p}{$ENDC}{	Quickdraw.p													}{		MixedMode.p												}{		QuickdrawText.p											}{	Menus.p														}{		Memory.p												}{$PUSH}{$ALIGN MAC68K}{$LibExport+}CONST	lDoVAutoscroll				= 2;	lDoHAutoscroll				= 1;	lOnlyOne					= -128;	lExtendDrag					= 64;	lNoDisjoint					= 32;	lNoExtend					= 16;	lNoRect						= 8;	lUseSense					= 4;	lNoNilHilite				= 2;	lInitMsg					= 0;	lDrawMsg					= 1;	lHiliteMsg					= 2;	lCloseMsg					= 3;	TYPECell = Point;	DataArray = PACKED ARRAY [0..32000] OF CHAR;	DataPtr = ^DataArray;	DataHandle = ^DataPtr;	ListSearchProcPtr = ProcPtr;  { FUNCTION ListSearch(aPtr: Ptr; bPtr: Ptr; aLen: INTEGER; bLen: INTEGER): INTEGER; }	ListSearchUPP = UniversalProcPtr;CONST	uppListSearchProcInfo = $00002BE0; { FUNCTION (4 byte param, 4 byte param, 2 byte param, 2 byte param): 2 byte result; }FUNCTION NewListSearchProc(userRoutine: ListSearchProcPtr): ListSearchUPP;	{$IFC NOT GENERATINGCFM }	INLINE $2E9F;	{$ENDC}FUNCTION CallListSearchProc(aPtr: Ptr; bPtr: Ptr; aLen: INTEGER; bLen: INTEGER; userRoutine: ListSearchUPP): INTEGER;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $4E90;	{$ENDC}TYPE	ListClickLoopProcPtr = ProcPtr;  { FUNCTION ListClickLoop: BOOLEAN; }	ListClickLoopUPP = UniversalProcPtr;CONST	uppListClickLoopProcInfo = $00000011; { FUNCTION : 1 byte result; }FUNCTION NewListClickLoopProc(userRoutine: ListClickLoopProcPtr): ListClickLoopUPP;	{$IFC NOT GENERATINGCFM }	INLINE $2E9F;	{$ENDC}FUNCTION CallListClickLoopProc(userRoutine: ListClickLoopUPP): BOOLEAN;	{$IFC NOT GENERATINGCFM}	INLINE $205F, $4E90;	{$ENDC}TYPE	ListRec = RECORD		rView:					Rect;		port:					GrafPtr;		indent:					Point;		cellSize:				Point;		visible:				Rect;		vScroll:				ControlHandle;		hScroll:				ControlHandle;		selFlags:				SInt8;		lActive:				BOOLEAN;		lReserved:				SInt8;		listFlags:				SInt8;		clikTime:				LONGINT;		clikLoc:				Point;		mouseLoc:				Point;		lClickLoop:				ListClickLoopUPP;		lastClick:				Cell;		refCon:					LONGINT;		listDefProc:			Handle;		userHandle:				Handle;		dataBounds:				Rect;		cells:					DataHandle;		maxIndex:				INTEGER;		cellArray:				ARRAY [0..0] OF INTEGER;	END;	ListPtr = ^ListRec;	ListHandle = ^ListPtr;	ListDefProcPtr = ProcPtr;  { PROCEDURE ListDef(lMessage: INTEGER; lSelect: BOOLEAN; VAR lRect: Rect; lCell: Cell; lDataOffset: INTEGER; lDataLen: INTEGER; lHandle: ListHandle); }	ListDefUPP = UniversalProcPtr;CONST	uppListDefProcInfo = $000EBD80; { PROCEDURE (2 byte param, 1 byte param, 4 byte param, 4 byte param, 2 byte param, 2 byte param, 4 byte param); }FUNCTION NewListDefProc(userRoutine: ListDefProcPtr): ListDefUPP;	{$IFC NOT GENERATINGCFM }	INLINE $2E9F;	{$ENDC}PROCEDURE CallListDefProc(lMessage: INTEGER; lSelect: BOOLEAN; VAR lRect: Rect; lCell: Cell; lDataOffset: INTEGER; lDataLen: INTEGER; lHandle: ListHandle; userRoutine: ListDefUPP);	{$IFC NOT GENERATINGCFM}	INLINE $205F, $4E90;	{$ENDC}FUNCTION LNew(rView: Rect; dataBounds: Rect; cSize: Point; theProc: INTEGER; theWindow: WindowPtr; drawIt: BOOLEAN; hasGrow: BOOLEAN; scrollHoriz: BOOLEAN; scrollVert: BOOLEAN): ListHandle;	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0044, $A9E7;	{$ENDC}PROCEDURE LDispose(lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0028, $A9E7;	{$ENDC}FUNCTION LAddColumn(count: INTEGER; colNum: INTEGER; lHandle: ListHandle): INTEGER;	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0004, $A9E7;	{$ENDC}FUNCTION LAddRow(count: INTEGER; rowNum: INTEGER; lHandle: ListHandle): INTEGER;	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0008, $A9E7;	{$ENDC}PROCEDURE LDelColumn(count: INTEGER; colNum: INTEGER; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0020, $A9E7;	{$ENDC}PROCEDURE LDelRow(count: INTEGER; rowNum: INTEGER; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0024, $A9E7;	{$ENDC}FUNCTION LGetSelect(next: BOOLEAN; VAR theCell: Cell; lHandle: ListHandle): BOOLEAN;	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $003C, $A9E7;	{$ENDC}FUNCTION LLastClick(lHandle: ListHandle): Cell;	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0040, $A9E7;	{$ENDC}FUNCTION LNextCell(hNext: BOOLEAN; vNext: BOOLEAN; VAR theCell: Cell; lHandle: ListHandle): BOOLEAN;	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0048, $A9E7;	{$ENDC}FUNCTION LSearch(dataPtr: UNIV Ptr; dataLen: INTEGER; searchProc: ListSearchUPP; VAR theCell: Cell; lHandle: ListHandle): BOOLEAN;	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0054, $A9E7;	{$ENDC}PROCEDURE LSize(listWidth: INTEGER; listHeight: INTEGER; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0060, $A9E7;	{$ENDC}PROCEDURE LSetDrawingMode(drawIt: BOOLEAN; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $002C, $A9E7;	{$ENDC}PROCEDURE LScroll(dCols: INTEGER; dRows: INTEGER; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0050, $A9E7;	{$ENDC}PROCEDURE LAutoScroll(lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0010, $A9E7;	{$ENDC}PROCEDURE LUpdate(theRgn: RgnHandle; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0064, $A9E7;	{$ENDC}PROCEDURE LActivate(act: BOOLEAN; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $4267, $A9E7;	{$ENDC}PROCEDURE LCellSize(cSize: Point; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0014, $A9E7;	{$ENDC}FUNCTION LClick(pt: Point; modifiers: INTEGER; lHandle: ListHandle): BOOLEAN;	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0018, $A9E7;	{$ENDC}PROCEDURE LAddToCell(dataPtr: UNIV Ptr; dataLen: INTEGER; theCell: Cell; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $000C, $A9E7;	{$ENDC}PROCEDURE LClrCell(theCell: Cell; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $001C, $A9E7;	{$ENDC}PROCEDURE LGetCell(dataPtr: UNIV Ptr; VAR dataLen: INTEGER; theCell: Cell; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0038, $A9E7;	{$ENDC}PROCEDURE LGetCellDataLocation(VAR offset: INTEGER; VAR len: INTEGER; theCell: Cell; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0034, $A9E7;	{$ENDC}PROCEDURE LRect(VAR cellRect: Rect; theCell: Cell; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $004C, $A9E7;	{$ENDC}PROCEDURE LSetCell(dataPtr: UNIV Ptr; dataLen: INTEGER; theCell: Cell; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0058, $A9E7;	{$ENDC}PROCEDURE LSetSelect(setIt: BOOLEAN; theCell: Cell; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $005C, $A9E7;	{$ENDC}PROCEDURE LDraw(theCell: Cell; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0030, $A9E7;	{$ENDC}{$IFC OLDROUTINENAMES }PROCEDURE LDoDraw(drawIt: BOOLEAN; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $002C, $A9E7;	{$ENDC}PROCEDURE LFind(VAR offset: INTEGER; VAR len: INTEGER; theCell: Cell; lHandle: ListHandle);	{$IFC NOT GENERATINGCFM}	INLINE $3F3C, $0034, $A9E7;	{$ENDC}{$ENDC}{$ALIGN RESET}{$POP}{$SETC UsingIncludes := ListsIncludes}{$ENDC} {__LISTS__}{$IFC NOT UsingIncludes} END.{$ENDC}