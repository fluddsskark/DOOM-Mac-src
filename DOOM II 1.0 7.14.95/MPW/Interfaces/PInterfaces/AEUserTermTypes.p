{ 	File:		AEUserTermTypes.p  	Copyright:	© 1984-1994 by Apple Computer, Inc. 				All rights reserved.  	Version:	Universal Interfaces 2.0a1.  ETO #15, MPW prerelease.  Sunday, July 17, 1994.   	Bugs?:		If you find a problem with this file, send the file and version 				information (from above) and the problem description to:  					Internet:	apple.bugs@applelink.apple.com 					AppleLink:	APPLE.BUGS }{$IFC UNDEFINED UsingIncludes}{$SETC UsingIncludes := 0}{$ENDC}{$IFC NOT UsingIncludes} UNIT AEUserTermTypes; INTERFACE{$ENDC}{$IFC UNDEFINED __AEUSERTERMTYPES__}{$SETC __AEUSERTERMTYPES__ := 1}{$I+}{$SETC AEUserTermTypesIncludes := UsingIncludes}{$SETC UsingIncludes := 1}{$PUSH}{$ALIGN MAC68K}{$LibExport+}CONST	kAEUserTerminology			= 'aeut';						{  0x61657574  }	kAETerminologyExtension		= 'aete';						{  0x61657465  }	kAEScriptingSizeResource	= 'scsz';	kAEUTHasReturningParam		= 31;							{ if event has a keyASReturning param }	kAEUTOptional				= 15;							{ if something is optional }	kAEUTlistOfItems			= 14;							{ if property or reply is a list. }	kAEUTEnumerated				= 13;							{ if property or reply is of an enumerated type. }	kAEUTReadWrite				= 12;							{ if property is writable. }	kAEUTChangesState			= 12;							{ if an event changes state. }	kAEUTTightBindingFunction	= 12;							{ if this is a tight-binding precedence function. }	kAEUTApostrophe				= 3;							{ if a term contains an apostrophe. }	kAEUTFeminine				= 2;							{ if a term is feminine gender. }	kAEUTMasculine				= 1;							{ if a term is masculine gender. }	kAEUTPlural					= 0;							{ if a term is plural. }TYPE	TScriptingSizeResource = RECORD		scriptingSizeFlags:		INTEGER;		minStackSize:			LONGINT;		preferredStackSize:		LONGINT;		maxStackSize:			LONGINT;		minHeapSize:			LONGINT;		preferredHeapSize:		LONGINT;		maxHeapSize:			LONGINT;	END;CONST	kLaunchToGetTerminology		= 0+(1 * (2**(15)));{ if 0, read aete directly from res file; if 1, then launch and use gdut event  }	kDontFindAppBySignature		= 0+(1 * (2**(14)));{ if 0, then find app with signature if lost; if 1, then don't }	kAlwaysSendSubject			= 0+(1 * (2**(13)));{ if 0, then send subject when appropriate; if 1, then every event has Subject Attribute }{ old names for above bits. }	kReadExtensionTermsMask		= 0+(1 * (2**(15)));{$ALIGN RESET}{$POP}{$SETC UsingIncludes := AEUserTermTypesIncludes}{$ENDC} {__AEUSERTERMTYPES__}{$IFC NOT UsingIncludes} END.{$ENDC}