{ 	File:		LowMem.p  	Copyright:	© 1984-1994 by Apple Computer, Inc. 				All rights reserved.  	Version:	Universal Interfaces 2.0a1.  ETO #15, MPW prerelease.  Sunday, July 17, 1994.   	Bugs?:		If you find a problem with this file, send the file and version 				information (from above) and the problem description to:  					Internet:	apple.bugs@applelink.apple.com 					AppleLink:	APPLE.BUGS }{$IFC UNDEFINED UsingIncludes}{$SETC UsingIncludes := 0}{$ENDC}{$IFC NOT UsingIncludes} UNIT LowMem; INTERFACE{$ENDC}{$IFC UNDEFINED __LOWMEM__}{$SETC __LOWMEM__ := 1}{$I+}{$SETC LowMemIncludes := UsingIncludes}{$SETC UsingIncludes := 1}{$IFC UNDEFINED __TYPES__}{$I Types.p}{$ENDC}{	ConditionalMacros.p											}{$IFC UNDEFINED __CONTROLS__}{$I Controls.p}{$ENDC}{	Quickdraw.p													}{		MixedMode.p												}{		QuickdrawText.p											}{	Menus.p														}{		Memory.p												}{$IFC UNDEFINED __EVENTS__}{$I Events.p}{$ENDC}{	OSUtils.p													}{$IFC UNDEFINED __FILES__}{$I Files.p}{$ENDC}{$IFC UNDEFINED __FONTS__}{$I Fonts.p}{$ENDC}{$IFC UNDEFINED __RESOURCES__}{$I Resources.p}{$ENDC}{$IFC UNDEFINED __WINDOWS__}{$I Windows.p}{$ENDC}{$PUSH}{$ALIGN MAC68K}{$LibExport+}FUNCTION LMGetScrVRes : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0102;			{ MOVE.W $0102,(SP) }	{$ENDC}PROCEDURE LMSetScrVRes( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0102;			{ MOVE.W (SP)+,$0102 }	{$ENDC}FUNCTION LMGetScrHRes : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0104;			{ MOVE.W $0104,(SP) }	{$ENDC}PROCEDURE LMSetScrHRes( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0104;			{ MOVE.W (SP)+,$0104 }	{$ENDC}FUNCTION LMGetMemTop : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0108;			{ MOVE.L $0108,(SP) }	{$ENDC}PROCEDURE LMSetMemTop( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0108;			{ MOVE.L (SP)+,$0108 }	{$ENDC}FUNCTION LMGetBufPtr : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $010C;			{ MOVE.L $010C,(SP) }	{$ENDC}PROCEDURE LMSetBufPtr( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $010C;			{ MOVE.L (SP)+,$010C }	{$ENDC}FUNCTION LMGetStackLowPoint : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0110;			{ MOVE.L $0110,(SP) }	{$ENDC}PROCEDURE LMSetStackLowPoint( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0110;			{ MOVE.L (SP)+,$0110 }	{$ENDC}FUNCTION LMGetHeapEnd : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0114;			{ MOVE.L $0114,(SP) }	{$ENDC}PROCEDURE LMSetHeapEnd( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0114;			{ MOVE.L (SP)+,$0114 }	{$ENDC}FUNCTION LMGetTheZone : THz;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0118;			{ MOVE.L $0118,(SP) }	{$ENDC}PROCEDURE LMSetTheZone( value: THz );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0118;			{ MOVE.L (SP)+,$0118 }	{$ENDC}FUNCTION LMGetUTableBase : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $011C;			{ MOVE.L $011C,(SP) }	{$ENDC}PROCEDURE LMSetUTableBase( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $011C;			{ MOVE.L (SP)+,$011C }	{$ENDC}FUNCTION LMGetCPUFlag : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $012F;			{ MOVE.B $012F,(SP) }	{$ENDC}PROCEDURE LMSetCPUFlag( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $012F;			{ MOVE.B (SP)+,$012F }	{$ENDC}FUNCTION LMGetApplLimit : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0130;			{ MOVE.L $0130,(SP) }	{$ENDC}PROCEDURE LMSetApplLimit( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0130;			{ MOVE.L (SP)+,$0130 }	{$ENDC}FUNCTION LMGetSysEvtMask : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0144;			{ MOVE.W $0144,(SP) }	{$ENDC}PROCEDURE LMSetSysEvtMask( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0144;			{ MOVE.W (SP)+,$0144 }	{$ENDC}FUNCTION LMGetRndSeed : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0156;			{ MOVE.L $0156,(SP) }	{$ENDC}PROCEDURE LMSetRndSeed( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0156;			{ MOVE.L (SP)+,$0156 }	{$ENDC}FUNCTION LMGetSEvtEnb : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $015C;			{ MOVE.B $015C,(SP) }	{$ENDC}PROCEDURE LMSetSEvtEnb( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $015C;			{ MOVE.B (SP)+,$015C }	{$ENDC}FUNCTION LMGetTicks : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $016A;			{ MOVE.L $016A,(SP) }	{$ENDC}PROCEDURE LMSetTicks( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $016A;			{ MOVE.L (SP)+,$016A }	{$ENDC}FUNCTION LMGetKeyThresh : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $018E;			{ MOVE.W $018E,(SP) }	{$ENDC}PROCEDURE LMSetKeyThresh( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $018E;			{ MOVE.W (SP)+,$018E }	{$ENDC}FUNCTION LMGetKeyRepThresh : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0190;			{ MOVE.W $0190,(SP) }	{$ENDC}PROCEDURE LMSetKeyRepThresh( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0190;			{ MOVE.W (SP)+,$0190 }	{$ENDC}FUNCTION LMGetUnitTableEntryCount : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $01D2;			{ MOVE.W $01D2,(SP) }	{$ENDC}PROCEDURE LMSetUnitTableEntryCount( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $01D2;			{ MOVE.W (SP)+,$01D2 }	{$ENDC}FUNCTION LMGetVIA : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $01D4;			{ MOVE.L $01D4,(SP) }	{$ENDC}PROCEDURE LMSetVIA( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $01D4;			{ MOVE.L (SP)+,$01D4 }	{$ENDC}FUNCTION LMGetSCCRd : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $01D8;			{ MOVE.L $01D8,(SP) }	{$ENDC}PROCEDURE LMSetSCCRd( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $01D8;			{ MOVE.L (SP)+,$01D8 }	{$ENDC}FUNCTION LMGetSCCWr : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $01DC;			{ MOVE.L $01DC,(SP) }	{$ENDC}PROCEDURE LMSetSCCWr( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $01DC;			{ MOVE.L (SP)+,$01DC }	{$ENDC}FUNCTION LMGetSPValid : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $01F8;			{ MOVE.B $01F8,(SP) }	{$ENDC}PROCEDURE LMSetSPValid( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $01F8;			{ MOVE.B (SP)+,$01F8 }	{$ENDC}FUNCTION LMGetSPATalkA : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $01F9;			{ MOVE.B $01F9,(SP) }	{$ENDC}PROCEDURE LMSetSPATalkA( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $01F9;			{ MOVE.B (SP)+,$01F9 }	{$ENDC}FUNCTION LMGetSPATalkB : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $01FA;			{ MOVE.B $01FA,(SP) }	{$ENDC}PROCEDURE LMSetSPATalkB( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $01FA;			{ MOVE.B (SP)+,$01FA }	{$ENDC}FUNCTION LMGetSPConfig : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $01FB;			{ MOVE.B $01FB,(SP) }	{$ENDC}PROCEDURE LMSetSPConfig( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $01FB;			{ MOVE.B (SP)+,$01FB }	{$ENDC}FUNCTION LMGetSPPortA : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $01FC;			{ MOVE.W $01FC,(SP) }	{$ENDC}PROCEDURE LMSetSPPortA( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $01FC;			{ MOVE.W (SP)+,$01FC }	{$ENDC}FUNCTION LMGetSPPortB : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $01FE;			{ MOVE.W $01FE,(SP) }	{$ENDC}PROCEDURE LMSetSPPortB( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $01FE;			{ MOVE.W (SP)+,$01FE }	{$ENDC}FUNCTION LMGetSPAlarm : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0200;			{ MOVE.L $0200,(SP) }	{$ENDC}PROCEDURE LMSetSPAlarm( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0200;			{ MOVE.L (SP)+,$0200 }	{$ENDC}FUNCTION LMGetSPFont : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0204;			{ MOVE.W $0204,(SP) }	{$ENDC}PROCEDURE LMSetSPFont( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0204;			{ MOVE.W (SP)+,$0204 }	{$ENDC}FUNCTION LMGetSPKbd : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0206;			{ MOVE.B $0206,(SP) }	{$ENDC}PROCEDURE LMSetSPKbd( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0206;			{ MOVE.B (SP)+,$0206 }	{$ENDC}FUNCTION LMGetSPPrint : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0207;			{ MOVE.B $0207,(SP) }	{$ENDC}PROCEDURE LMSetSPPrint( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0207;			{ MOVE.B (SP)+,$0207 }	{$ENDC}FUNCTION LMGetSPVolCtl : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0208;			{ MOVE.B $0208,(SP) }	{$ENDC}PROCEDURE LMSetSPVolCtl( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0208;			{ MOVE.B (SP)+,$0208 }	{$ENDC}FUNCTION LMGetSPClikCaret : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0209;			{ MOVE.B $0209,(SP) }	{$ENDC}PROCEDURE LMSetSPClikCaret( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0209;			{ MOVE.B (SP)+,$0209 }	{$ENDC}FUNCTION LMGetSPMisc2 : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $020B;			{ MOVE.B $020B,(SP) }	{$ENDC}PROCEDURE LMSetSPMisc2( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $020B;			{ MOVE.B (SP)+,$020B }	{$ENDC}FUNCTION LMGetTime : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $020C;			{ MOVE.L $020C,(SP) }	{$ENDC}PROCEDURE LMSetTime( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $020C;			{ MOVE.L (SP)+,$020C }	{$ENDC}FUNCTION LMGetBootDrive : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0210;			{ MOVE.W $0210,(SP) }	{$ENDC}PROCEDURE LMSetBootDrive( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0210;			{ MOVE.W (SP)+,$0210 }	{$ENDC}FUNCTION LMGetSFSaveDisk : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0214;			{ MOVE.W $0214,(SP) }	{$ENDC}PROCEDURE LMSetSFSaveDisk( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0214;			{ MOVE.W (SP)+,$0214 }	{$ENDC}FUNCTION LMGetKbdLast : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0218;			{ MOVE.B $0218,(SP) }	{$ENDC}PROCEDURE LMSetKbdLast( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0218;			{ MOVE.B (SP)+,$0218 }	{$ENDC}FUNCTION LMGetKbdType : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $021E;			{ MOVE.B $021E,(SP) }	{$ENDC}PROCEDURE LMSetKbdType( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $021E;			{ MOVE.B (SP)+,$021E }	{$ENDC}FUNCTION LMGetMemErr : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0220;			{ MOVE.W $0220,(SP) }	{$ENDC}PROCEDURE LMSetMemErr( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0220;			{ MOVE.W (SP)+,$0220 }	{$ENDC}FUNCTION LMGetSdVolume : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0260;			{ MOVE.B $0260,(SP) }	{$ENDC}PROCEDURE LMSetSdVolume( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0260;			{ MOVE.B (SP)+,$0260 }	{$ENDC}FUNCTION LMGetSoundPtr : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0262;			{ MOVE.L $0262,(SP) }	{$ENDC}PROCEDURE LMSetSoundPtr( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0262;			{ MOVE.L (SP)+,$0262 }	{$ENDC}FUNCTION LMGetSoundBase : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0266;			{ MOVE.L $0266,(SP) }	{$ENDC}PROCEDURE LMSetSoundBase( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0266;			{ MOVE.L (SP)+,$0266 }	{$ENDC}FUNCTION LMGetSoundLevel : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $027F;			{ MOVE.B $027F,(SP) }	{$ENDC}PROCEDURE LMSetSoundLevel( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $027F;			{ MOVE.B (SP)+,$027F }	{$ENDC}FUNCTION LMGetCurPitch : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0280;			{ MOVE.W $0280,(SP) }	{$ENDC}PROCEDURE LMSetCurPitch( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0280;			{ MOVE.W (SP)+,$0280 }	{$ENDC}FUNCTION LMGetROM85 : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $028E;			{ MOVE.W $028E,(SP) }	{$ENDC}PROCEDURE LMSetROM85( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $028E;			{ MOVE.W (SP)+,$028E }	{$ENDC}FUNCTION LMGetPortBUse : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0291;			{ MOVE.B $0291,(SP) }	{$ENDC}PROCEDURE LMSetPortBUse( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0291;			{ MOVE.B (SP)+,$0291 }	{$ENDC}FUNCTION LMGetGNEFilter : GNEFilterUPP;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $029A;			{ MOVE.L $029A,(SP) }	{$ENDC}PROCEDURE LMSetGNEFilter( value: GNEFilterUPP );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $029A;			{ MOVE.L (SP)+,$029A }	{$ENDC}FUNCTION LMGetSysZone : THz;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $02A6;			{ MOVE.L $02A6,(SP) }	{$ENDC}PROCEDURE LMSetSysZone( value: THz );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $02A6;			{ MOVE.L (SP)+,$02A6 }	{$ENDC}FUNCTION LMGetApplZone : THz;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $02AA;			{ MOVE.L $02AA,(SP) }	{$ENDC}PROCEDURE LMSetApplZone( value: THz );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $02AA;			{ MOVE.L (SP)+,$02AA }	{$ENDC}FUNCTION LMGetROMBase : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $02AE;			{ MOVE.L $02AE,(SP) }	{$ENDC}PROCEDURE LMSetROMBase( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $02AE;			{ MOVE.L (SP)+,$02AE }	{$ENDC}FUNCTION LMGetRAMBase : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $02B2;			{ MOVE.L $02B2,(SP) }	{$ENDC}PROCEDURE LMSetRAMBase( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $02B2;			{ MOVE.L (SP)+,$02B2 }	{$ENDC}FUNCTION LMGetDSAlertTab : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $02BA;			{ MOVE.L $02BA,(SP) }	{$ENDC}PROCEDURE LMSetDSAlertTab( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $02BA;			{ MOVE.L (SP)+,$02BA }	{$ENDC}FUNCTION LMGetDoubleTime : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $02F0;			{ MOVE.L $02F0,(SP) }	{$ENDC}PROCEDURE LMSetDoubleTime( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $02F0;			{ MOVE.L (SP)+,$02F0 }	{$ENDC}FUNCTION LMGetCaretTime : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $02F4;			{ MOVE.L $02F4,(SP) }	{$ENDC}PROCEDURE LMSetCaretTime( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $02F4;			{ MOVE.L (SP)+,$02F4 }	{$ENDC}FUNCTION LMGetScrDmpEnb : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $02F8;			{ MOVE.B $02F8,(SP) }	{$ENDC}PROCEDURE LMSetScrDmpEnb( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $02F8;			{ MOVE.B (SP)+,$02F8 }	{$ENDC}FUNCTION LMGetBufTgFNum : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $02FC;			{ MOVE.L $02FC,(SP) }	{$ENDC}PROCEDURE LMSetBufTgFNum( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $02FC;			{ MOVE.L (SP)+,$02FC }	{$ENDC}FUNCTION LMGetBufTgFFlg : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0300;			{ MOVE.W $0300,(SP) }	{$ENDC}PROCEDURE LMSetBufTgFFlg( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0300;			{ MOVE.W (SP)+,$0300 }	{$ENDC}FUNCTION LMGetBufTgFBkNum : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0302;			{ MOVE.W $0302,(SP) }	{$ENDC}PROCEDURE LMSetBufTgFBkNum( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0302;			{ MOVE.W (SP)+,$0302 }	{$ENDC}FUNCTION LMGetBufTgDate : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0304;			{ MOVE.L $0304,(SP) }	{$ENDC}PROCEDURE LMSetBufTgDate( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0304;			{ MOVE.L (SP)+,$0304 }	{$ENDC}FUNCTION LMGetLo3Bytes : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $031A;			{ MOVE.L $031A,(SP) }	{$ENDC}PROCEDURE LMSetLo3Bytes( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $031A;			{ MOVE.L (SP)+,$031A }	{$ENDC}FUNCTION LMGetMinStack : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $031E;			{ MOVE.L $031E,(SP) }	{$ENDC}PROCEDURE LMSetMinStack( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $031E;			{ MOVE.L (SP)+,$031E }	{$ENDC}FUNCTION LMGetDefltStack : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0322;			{ MOVE.L $0322,(SP) }	{$ENDC}PROCEDURE LMSetDefltStack( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0322;			{ MOVE.L (SP)+,$0322 }	{$ENDC}FUNCTION LMGetGZRootHnd : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0328;			{ MOVE.L $0328,(SP) }	{$ENDC}PROCEDURE LMSetGZRootHnd( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0328;			{ MOVE.L (SP)+,$0328 }	{$ENDC}FUNCTION LMGetGZMoveHnd : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0330;			{ MOVE.L $0330,(SP) }	{$ENDC}PROCEDURE LMSetGZMoveHnd( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0330;			{ MOVE.L (SP)+,$0330 }	{$ENDC}FUNCTION LMGetFCBSPtr : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $034E;			{ MOVE.L $034E,(SP) }	{$ENDC}PROCEDURE LMSetFCBSPtr( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $034E;			{ MOVE.L (SP)+,$034E }	{$ENDC}FUNCTION LMGetDefVCBPtr : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0352;			{ MOVE.L $0352,(SP) }	{$ENDC}PROCEDURE LMSetDefVCBPtr( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0352;			{ MOVE.L (SP)+,$0352 }	{$ENDC}FUNCTION LMGetCurDirStore : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0398;			{ MOVE.L $0398,(SP) }	{$ENDC}PROCEDURE LMSetCurDirStore( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0398;			{ MOVE.L (SP)+,$0398 }	{$ENDC}FUNCTION LMGetToExtFS : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $03F2;			{ MOVE.L $03F2,(SP) }	{$ENDC}PROCEDURE LMSetToExtFS( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $03F2;			{ MOVE.L (SP)+,$03F2 }	{$ENDC}FUNCTION LMGetFSFCBLen : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $03F6;			{ MOVE.W $03F6,(SP) }	{$ENDC}PROCEDURE LMSetFSFCBLen( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $03F6;			{ MOVE.W (SP)+,$03F6 }	{$ENDC}FUNCTION LMGetScrnBase : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0824;			{ MOVE.L $0824,(SP) }	{$ENDC}PROCEDURE LMSetScrnBase( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0824;			{ MOVE.L (SP)+,$0824 }	{$ENDC}FUNCTION LMGetMainDevice : GDHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $08A4;			{ MOVE.L $08A4,(SP) }	{$ENDC}PROCEDURE LMSetMainDevice( value: GDHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $08A4;			{ MOVE.L (SP)+,$08A4 }	{$ENDC}FUNCTION LMGetDeviceList : GDHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $08A8;			{ MOVE.L $08A8,(SP) }	{$ENDC}PROCEDURE LMSetDeviceList( value: GDHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $08A8;			{ MOVE.L (SP)+,$08A8 }	{$ENDC}FUNCTION LMGetQDColors : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $08B0;			{ MOVE.L $08B0,(SP) }	{$ENDC}PROCEDURE LMSetQDColors( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $08B0;			{ MOVE.L (SP)+,$08B0 }	{$ENDC}FUNCTION LMGetCrsrBusy : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $08CD;			{ MOVE.B $08CD,(SP) }	{$ENDC}PROCEDURE LMSetCrsrBusy( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $08CD;			{ MOVE.B (SP)+,$08CD }	{$ENDC}FUNCTION LMGetWidthListHand : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $08E4;			{ MOVE.L $08E4,(SP) }	{$ENDC}PROCEDURE LMSetWidthListHand( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $08E4;			{ MOVE.L (SP)+,$08E4 }	{$ENDC}FUNCTION LMGetJournalRef : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $08E8;			{ MOVE.W $08E8,(SP) }	{$ENDC}PROCEDURE LMSetJournalRef( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $08E8;			{ MOVE.W (SP)+,$08E8 }	{$ENDC}FUNCTION LMGetCrsrThresh : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $08EC;			{ MOVE.W $08EC,(SP) }	{$ENDC}PROCEDURE LMSetCrsrThresh( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $08EC;			{ MOVE.W (SP)+,$08EC }	{$ENDC}FUNCTION LMGetJFetch : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $08F4;			{ MOVE.L $08F4,(SP) }	{$ENDC}PROCEDURE LMSetJFetch( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $08F4;			{ MOVE.L (SP)+,$08F4 }	{$ENDC}FUNCTION LMGetJStash : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $08F8;			{ MOVE.L $08F8,(SP) }	{$ENDC}PROCEDURE LMSetJStash( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $08F8;			{ MOVE.L (SP)+,$08F8 }	{$ENDC}FUNCTION LMGetJIODone : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $08FC;			{ MOVE.L $08FC,(SP) }	{$ENDC}PROCEDURE LMSetJIODone( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $08FC;			{ MOVE.L (SP)+,$08FC }	{$ENDC}FUNCTION LMGetCurApRefNum : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0900;			{ MOVE.W $0900,(SP) }	{$ENDC}PROCEDURE LMSetCurApRefNum( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0900;			{ MOVE.W (SP)+,$0900 }	{$ENDC}FUNCTION LMGetCurrentA5 : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0904;			{ MOVE.L $0904,(SP) }	{$ENDC}PROCEDURE LMSetCurrentA5( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0904;			{ MOVE.L (SP)+,$0904 }	{$ENDC}FUNCTION LMGetCurStackBase : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0908;			{ MOVE.L $0908,(SP) }	{$ENDC}PROCEDURE LMSetCurStackBase( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0908;			{ MOVE.L (SP)+,$0908 }	{$ENDC}FUNCTION LMGetCurJTOffset : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0934;			{ MOVE.W $0934,(SP) }	{$ENDC}PROCEDURE LMSetCurJTOffset( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0934;			{ MOVE.W (SP)+,$0934 }	{$ENDC}FUNCTION LMGetCurPageOption : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0936;			{ MOVE.W $0936,(SP) }	{$ENDC}PROCEDURE LMSetCurPageOption( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0936;			{ MOVE.W (SP)+,$0936 }	{$ENDC}FUNCTION LMGetHiliteMode : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0938;			{ MOVE.B $0938,(SP) }	{$ENDC}PROCEDURE LMSetHiliteMode( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0938;			{ MOVE.B (SP)+,$0938 }	{$ENDC}FUNCTION LMGetPrintErr : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0944;			{ MOVE.W $0944,(SP) }	{$ENDC}PROCEDURE LMSetPrintErr( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0944;			{ MOVE.W (SP)+,$0944 }	{$ENDC}FUNCTION LMGetScrapSize : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0960;			{ MOVE.L $0960,(SP) }	{$ENDC}PROCEDURE LMSetScrapSize( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0960;			{ MOVE.L (SP)+,$0960 }	{$ENDC}FUNCTION LMGetScrapHandle : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0964;			{ MOVE.L $0964,(SP) }	{$ENDC}PROCEDURE LMSetScrapHandle( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0964;			{ MOVE.L (SP)+,$0964 }	{$ENDC}FUNCTION LMGetScrapCount : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0968;			{ MOVE.W $0968,(SP) }	{$ENDC}PROCEDURE LMSetScrapCount( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0968;			{ MOVE.W (SP)+,$0968 }	{$ENDC}FUNCTION LMGetScrapState : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $096A;			{ MOVE.W $096A,(SP) }	{$ENDC}PROCEDURE LMSetScrapState( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $096A;			{ MOVE.W (SP)+,$096A }	{$ENDC}FUNCTION LMGetScrapName : StringPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $096C;			{ MOVE.L $096C,(SP) }	{$ENDC}PROCEDURE LMSetScrapName( value: StringPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $096C;			{ MOVE.L (SP)+,$096C }	{$ENDC}FUNCTION LMGetROMFont0 : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0980;			{ MOVE.L $0980,(SP) }	{$ENDC}PROCEDURE LMSetROMFont0( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0980;			{ MOVE.L (SP)+,$0980 }	{$ENDC}FUNCTION LMGetApFontID : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0984;			{ MOVE.W $0984,(SP) }	{$ENDC}PROCEDURE LMSetApFontID( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0984;			{ MOVE.W (SP)+,$0984 }	{$ENDC}FUNCTION LMGetWindowList : WindowRef;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $09D6;			{ MOVE.L $09D6,(SP) }	{$ENDC}FUNCTION LMGetSaveUpdate : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $09DA;			{ MOVE.W $09DA,(SP) }	{$ENDC}PROCEDURE LMSetSaveUpdate( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $09DA;			{ MOVE.W (SP)+,$09DA }	{$ENDC}FUNCTION LMGetPaintWhite : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $09DC;			{ MOVE.W $09DC,(SP) }	{$ENDC}PROCEDURE LMSetPaintWhite( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $09DC;			{ MOVE.W (SP)+,$09DC }	{$ENDC}FUNCTION LMGetWMgrPort : GrafPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $09DE;			{ MOVE.L $09DE,(SP) }	{$ENDC}PROCEDURE LMSetWMgrPort( value: GrafPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $09DE;			{ MOVE.L (SP)+,$09DE }	{$ENDC}FUNCTION LMGetGrayRgn : RgnHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $09EE;			{ MOVE.L $09EE,(SP) }	{$ENDC}FUNCTION LMGetDragHook : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $09F6;			{ MOVE.L $09F6,(SP) }	{$ENDC}PROCEDURE LMSetDragHook( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $09F6;			{ MOVE.L (SP)+,$09F6 }	{$ENDC}{ To best work with future versions of the window manager, avoid using anything not defined with STRICT_WINDOWS set to true.  Most, if not all of these will still be supported in the next major version of the window manager but will trigger non-optimal compatibility code paths that should be avoided if possible.}{$IFC NOT STRICT_WINDOWS }{ There is no reason to set the window list directly. Use BringToFront and SendBehind. If you need to do floating windows, avoid using GhostWindow  and especially avoid patching the window manager. See Dean Yu's article in Develop 15 about how to implement floating windows using low-level window manager calls.  The next generation Macintosh Window Manager will have built-in support for floating and modal windows.}PROCEDURE LMSetWindowList( value: WindowRef );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $09D6;			{ MOVE.L (SP)+,$09D6 }	{$ENDC}FUNCTION LMGetGhostWindow : WindowRef;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A84;			{ MOVE.L $0A84,(SP) }	{$ENDC}PROCEDURE LMSetGhostWindow( value: WindowRef );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A84;			{ MOVE.L (SP)+,$0A84 }	{$ENDC}{ The auxiliary window record list will be empty in future versions of the window manager.  There is no reason to  walk it or change it. }FUNCTION LMGetAuxWinHead : AuxWinHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0CD0;			{ MOVE.L $0CD0,(SP) }	{$ENDC}PROCEDURE LMSetAuxWinHead( value: AuxWinHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0CD0;			{ MOVE.L (SP)+,$0CD0 }	{$ENDC}{ Please rely on the event manager to deliver activate and  deactivate events and on the window manager to generate them. The next generation window manager will queue these events rather than just slamming these lowmems with the latest generated event, so it pays to rely on the event manager.}FUNCTION LMGetCurActivate : WindowRef;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A64;			{ MOVE.L $0A64,(SP) }	{$ENDC}PROCEDURE LMSetCurActivate( value: WindowRef );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A64;			{ MOVE.L (SP)+,$0A64 }	{$ENDC}FUNCTION LMGetCurDeactive : WindowRef;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A68;			{ MOVE.L $0A68,(SP) }	{$ENDC}PROCEDURE LMSetCurDeactive( value: WindowRef );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A68;			{ MOVE.L (SP)+,$0A68 }	{$ENDC}FUNCTION LMGetOldStructure : RgnHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $09E6;			{ MOVE.L $09E6,(SP) }	{$ENDC}PROCEDURE LMSetOldStructure( value: RgnHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $09E6;			{ MOVE.L (SP)+,$09E6 }	{$ENDC}FUNCTION LMGetOldContent : RgnHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $09EA;			{ MOVE.L $09EA,(SP) }	{$ENDC}PROCEDURE LMSetOldContent( value: RgnHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $09EA;			{ MOVE.L (SP)+,$09EA }	{$ENDC}{ Please don't mess with the gray region.  There has to be a better way.  If not, please manipulate the existing region, don't change the value of the lowmem.}PROCEDURE LMSetGrayRgn( value: RgnHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $09EE;			{ MOVE.L (SP)+,$09EE }	{$ENDC}FUNCTION LMGetSaveVisRgn : RgnHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $09F2;			{ MOVE.L $09F2,(SP) }	{$ENDC}PROCEDURE LMSetSaveVisRgn( value: RgnHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $09F2;			{ MOVE.L (SP)+,$09F2 }	{$ENDC}{$ENDC}FUNCTION LMGetOneOne : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A02;			{ MOVE.L $0A02,(SP) }	{$ENDC}PROCEDURE LMSetOneOne( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A02;			{ MOVE.L (SP)+,$0A02 }	{$ENDC}FUNCTION LMGetMinusOne : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A06;			{ MOVE.L $0A06,(SP) }	{$ENDC}PROCEDURE LMSetMinusOne( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A06;			{ MOVE.L (SP)+,$0A06 }	{$ENDC}FUNCTION LMGetTopMenuItem : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A0A;			{ MOVE.W $0A0A,(SP) }	{$ENDC}PROCEDURE LMSetTopMenuItem( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A0A;			{ MOVE.W (SP)+,$0A0A }	{$ENDC}FUNCTION LMGetAtMenuBottom : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A0C;			{ MOVE.W $0A0C,(SP) }	{$ENDC}PROCEDURE LMSetAtMenuBottom( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A0C;			{ MOVE.W (SP)+,$0A0C }	{$ENDC}FUNCTION LMGetMenuList : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A1C;			{ MOVE.L $0A1C,(SP) }	{$ENDC}PROCEDURE LMSetMenuList( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A1C;			{ MOVE.L (SP)+,$0A1C }	{$ENDC}FUNCTION LMGetMBarEnable : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A20;			{ MOVE.W $0A20,(SP) }	{$ENDC}PROCEDURE LMSetMBarEnable( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A20;			{ MOVE.W (SP)+,$0A20 }	{$ENDC}FUNCTION LMGetMenuFlash : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A24;			{ MOVE.W $0A24,(SP) }	{$ENDC}PROCEDURE LMSetMenuFlash( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A24;			{ MOVE.W (SP)+,$0A24 }	{$ENDC}FUNCTION LMGetTheMenu : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A26;			{ MOVE.W $0A26,(SP) }	{$ENDC}PROCEDURE LMSetTheMenu( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A26;			{ MOVE.W (SP)+,$0A26 }	{$ENDC}FUNCTION LMGetMBarHook : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A2C;			{ MOVE.L $0A2C,(SP) }	{$ENDC}PROCEDURE LMSetMBarHook( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A2C;			{ MOVE.L (SP)+,$0A2C }	{$ENDC}FUNCTION LMGetMenuHook : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A30;			{ MOVE.L $0A30,(SP) }	{$ENDC}PROCEDURE LMSetMenuHook( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A30;			{ MOVE.L (SP)+,$0A30 }	{$ENDC}FUNCTION LMGetTopMapHndl : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A50;			{ MOVE.L $0A50,(SP) }	{$ENDC}PROCEDURE LMSetTopMapHndl( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A50;			{ MOVE.L (SP)+,$0A50 }	{$ENDC}FUNCTION LMGetSysMapHndl : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A54;			{ MOVE.L $0A54,(SP) }	{$ENDC}PROCEDURE LMSetSysMapHndl( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A54;			{ MOVE.L (SP)+,$0A54 }	{$ENDC}FUNCTION LMGetSysMap : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A58;			{ MOVE.W $0A58,(SP) }	{$ENDC}PROCEDURE LMSetSysMap( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A58;			{ MOVE.W (SP)+,$0A58 }	{$ENDC}FUNCTION LMGetCurMap : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A5A;			{ MOVE.W $0A5A,(SP) }	{$ENDC}PROCEDURE LMSetCurMap( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A5A;			{ MOVE.W (SP)+,$0A5A }	{$ENDC}FUNCTION LMGetResLoad : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0A5E;			{ MOVE.B $0A5E,(SP) }	{$ENDC}PROCEDURE LMSetResLoad( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0A5E;			{ MOVE.B (SP)+,$0A5E }	{$ENDC}FUNCTION LMGetResErr : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A60;			{ MOVE.W $0A60,(SP) }	{$ENDC}PROCEDURE LMSetResErr( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A60;			{ MOVE.W (SP)+,$0A60 }	{$ENDC}FUNCTION LMGetFScaleDisable : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0A63;			{ MOVE.B $0A63,(SP) }	{$ENDC}PROCEDURE LMSetFScaleDisable( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0A63;			{ MOVE.B (SP)+,$0A63 }	{$ENDC}FUNCTION LMGetDeskHook : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A6C;			{ MOVE.L $0A6C,(SP) }	{$ENDC}PROCEDURE LMSetDeskHook( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A6C;			{ MOVE.L (SP)+,$0A6C }	{$ENDC}FUNCTION LMGetTEDoText : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A70;			{ MOVE.L $0A70,(SP) }	{$ENDC}PROCEDURE LMSetTEDoText( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A70;			{ MOVE.L (SP)+,$0A70 }	{$ENDC}FUNCTION LMGetTERecal : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A74;			{ MOVE.L $0A74,(SP) }	{$ENDC}PROCEDURE LMSetTERecal( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A74;			{ MOVE.L (SP)+,$0A74 }	{$ENDC}FUNCTION LMGetResumeProc : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A8C;			{ MOVE.L $0A8C,(SP) }	{$ENDC}PROCEDURE LMSetResumeProc( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A8C;			{ MOVE.L (SP)+,$0A8C }	{$ENDC}FUNCTION LMGetANumber : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A98;			{ MOVE.W $0A98,(SP) }	{$ENDC}PROCEDURE LMSetANumber( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A98;			{ MOVE.W (SP)+,$0A98 }	{$ENDC}FUNCTION LMGetACount : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0A9A;			{ MOVE.W $0A9A,(SP) }	{$ENDC}PROCEDURE LMSetACount( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0A9A;			{ MOVE.W (SP)+,$0A9A }	{$ENDC}FUNCTION LMGetDABeeper : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0A9C;			{ MOVE.L $0A9C,(SP) }	{$ENDC}PROCEDURE LMSetDABeeper( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0A9C;			{ MOVE.L (SP)+,$0A9C }	{$ENDC}FUNCTION LMGetTEScrpLength : UInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0AB0;			{ MOVE.W $0AB0,(SP) }	{$ENDC}PROCEDURE LMSetTEScrpLength( value: UInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0AB0;			{ MOVE.W (SP)+,$0AB0 }	{$ENDC}FUNCTION LMGetTEScrpHandle : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0AB4;			{ MOVE.L $0AB4,(SP) }	{$ENDC}PROCEDURE LMSetTEScrpHandle( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0AB4;			{ MOVE.L (SP)+,$0AB4 }	{$ENDC}FUNCTION LMGetAppParmHandle : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0AEC;			{ MOVE.L $0AEC,(SP) }	{$ENDC}PROCEDURE LMSetAppParmHandle( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0AEC;			{ MOVE.L (SP)+,$0AEC }	{$ENDC}FUNCTION LMGetDSErrCode : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0AF0;			{ MOVE.W $0AF0,(SP) }	{$ENDC}PROCEDURE LMSetDSErrCode( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0AF0;			{ MOVE.W (SP)+,$0AF0 }	{$ENDC}FUNCTION LMGetResErrProc : ResErrUPP;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0AF2;			{ MOVE.L $0AF2,(SP) }	{$ENDC}PROCEDURE LMSetResErrProc( value: ResErrUPP );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0AF2;			{ MOVE.L (SP)+,$0AF2 }	{$ENDC}FUNCTION LMGetDlgFont : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0AFA;			{ MOVE.W $0AFA,(SP) }	{$ENDC}PROCEDURE LMSetDlgFont( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0AFA;			{ MOVE.W (SP)+,$0AFA }	{$ENDC}FUNCTION LMGetROMMapHandle : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0B06;			{ MOVE.L $0B06,(SP) }	{$ENDC}PROCEDURE LMSetROMMapHandle( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0B06;			{ MOVE.L (SP)+,$0B06 }	{$ENDC}FUNCTION LMGetWidthPtr : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0B10;			{ MOVE.L $0B10,(SP) }	{$ENDC}PROCEDURE LMSetWidthPtr( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0B10;			{ MOVE.L (SP)+,$0B10 }	{$ENDC}FUNCTION LMGetATalkHk2 : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0B18;			{ MOVE.L $0B18,(SP) }	{$ENDC}PROCEDURE LMSetATalkHk2( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0B18;			{ MOVE.L (SP)+,$0B18 }	{$ENDC}FUNCTION LMGetHWCfgFlags : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0B22;			{ MOVE.W $0B22,(SP) }	{$ENDC}PROCEDURE LMSetHWCfgFlags( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0B22;			{ MOVE.W (SP)+,$0B22 }	{$ENDC}FUNCTION LMGetWidthTabHandle : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0B2A;			{ MOVE.L $0B2A,(SP) }	{$ENDC}PROCEDURE LMSetWidthTabHandle( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0B2A;			{ MOVE.L (SP)+,$0B2A }	{$ENDC}FUNCTION LMGetLastSPExtra : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0B4C;			{ MOVE.L $0B4C,(SP) }	{$ENDC}PROCEDURE LMSetLastSPExtra( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0B4C;			{ MOVE.L (SP)+,$0B4C }	{$ENDC}FUNCTION LMGetMenuDisable : SInt32;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0B54;			{ MOVE.L $0B54,(SP) }	{$ENDC}PROCEDURE LMSetMenuDisable( value: SInt32 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0B54;			{ MOVE.L (SP)+,$0B54 }	{$ENDC}FUNCTION LMGetROMMapInsert : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0B9E;			{ MOVE.B $0B9E,(SP) }	{$ENDC}PROCEDURE LMSetROMMapInsert( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0B9E;			{ MOVE.B (SP)+,$0B9E }	{$ENDC}FUNCTION LMGetTmpResLoad : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0B9F;			{ MOVE.B $0B9F,(SP) }	{$ENDC}PROCEDURE LMSetTmpResLoad( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0B9F;			{ MOVE.B (SP)+,$0B9F }	{$ENDC}FUNCTION LMGetIntlSpec : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0BA0;			{ MOVE.L $0BA0,(SP) }	{$ENDC}PROCEDURE LMSetIntlSpec( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0BA0;			{ MOVE.L (SP)+,$0BA0 }	{$ENDC}FUNCTION LMGetWordRedraw : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0BA5;			{ MOVE.B $0BA5,(SP) }	{$ENDC}PROCEDURE LMSetWordRedraw( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0BA5;			{ MOVE.B (SP)+,$0BA5 }	{$ENDC}FUNCTION LMGetSysFontFam : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0BA6;			{ MOVE.W $0BA6,(SP) }	{$ENDC}PROCEDURE LMSetSysFontFam( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0BA6;			{ MOVE.W (SP)+,$0BA6 }	{$ENDC}FUNCTION LMGetSysFontSize : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0BA8;			{ MOVE.W $0BA8,(SP) }	{$ENDC}PROCEDURE LMSetSysFontSize( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0BA8;			{ MOVE.W (SP)+,$0BA8 }	{$ENDC}FUNCTION LMGetMBarHeight : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0BAA;			{ MOVE.W $0BAA,(SP) }	{$ENDC}PROCEDURE LMSetMBarHeight( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0BAA;			{ MOVE.W (SP)+,$0BAA }	{$ENDC}FUNCTION LMGetTESysJust : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0BAC;			{ MOVE.W $0BAC,(SP) }	{$ENDC}PROCEDURE LMSetTESysJust( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0BAC;			{ MOVE.W (SP)+,$0BAC }	{$ENDC}FUNCTION LMGetHighHeapMark : Ptr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0BAE;			{ MOVE.L $0BAE,(SP) }	{$ENDC}PROCEDURE LMSetHighHeapMark( value: Ptr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0BAE;			{ MOVE.L (SP)+,$0BAE }	{$ENDC}FUNCTION LMGetLastFOND : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0BC2;			{ MOVE.L $0BC2,(SP) }	{$ENDC}PROCEDURE LMSetLastFOND( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0BC2;			{ MOVE.L (SP)+,$0BC2 }	{$ENDC}FUNCTION LMGetFractEnable : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0BF4;			{ MOVE.B $0BF4,(SP) }	{$ENDC}PROCEDURE LMSetFractEnable( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0BF4;			{ MOVE.B (SP)+,$0BF4 }	{$ENDC}FUNCTION LMGetMMU32Bit : ByteParameter;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $1EB8, $0CB2;			{ MOVE.B $0CB2,(SP) }	{$ENDC}PROCEDURE LMSetMMU32Bit( value: ByteParameter );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $11DF, $0CB2;			{ MOVE.B (SP)+,$0CB2 }	{$ENDC}FUNCTION LMGetTheGDevice : GDHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0CC8;			{ MOVE.L $0CC8,(SP) }	{$ENDC}PROCEDURE LMSetTheGDevice( value: GDHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0CC8;			{ MOVE.L (SP)+,$0CC8 }	{$ENDC}FUNCTION LMGetDeskCPat : PixPatHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0CD8;			{ MOVE.L $0CD8,(SP) }	{$ENDC}PROCEDURE LMSetDeskCPat( value: PixPatHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0CD8;			{ MOVE.L (SP)+,$0CD8 }	{$ENDC}FUNCTION LMGetTimeDBRA : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0D00;			{ MOVE.W $0D00,(SP) }	{$ENDC}PROCEDURE LMSetTimeDBRA( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0D00;			{ MOVE.W (SP)+,$0D00 }	{$ENDC}FUNCTION LMGetTimeSCCDB : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0D02;			{ MOVE.W $0D02,(SP) }	{$ENDC}PROCEDURE LMSetTimeSCCDB( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0D02;			{ MOVE.W (SP)+,$0D02 }	{$ENDC}FUNCTION LMGetJVBLTask : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0D28;			{ MOVE.L $0D28,(SP) }	{$ENDC}PROCEDURE LMSetJVBLTask( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0D28;			{ MOVE.L (SP)+,$0D28 }	{$ENDC}FUNCTION LMGetSynListHandle : Handle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0D32;			{ MOVE.L $0D32,(SP) }	{$ENDC}PROCEDURE LMSetSynListHandle( value: Handle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0D32;			{ MOVE.L (SP)+,$0D32 }	{$ENDC}FUNCTION LMGetMenuCInfo : MCTableHandle;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0D50;			{ MOVE.L $0D50,(SP) }	{$ENDC}PROCEDURE LMSetMenuCInfo( value: MCTableHandle );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0D50;			{ MOVE.L (SP)+,$0D50 }	{$ENDC}FUNCTION LMGetDTQueue : QHdrPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0D92;			{ MOVE.L $0D92,(SP) }	{$ENDC}PROCEDURE LMSetDTQueue( value: QHdrPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0D92;			{ MOVE.L (SP)+,$0D92 }	{$ENDC}FUNCTION LMGetJDTInstall : UniversalProcPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0D9C;			{ MOVE.L $0D9C,(SP) }	{$ENDC}PROCEDURE LMSetJDTInstall( value: UniversalProcPtr );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $21DF, $0D9C;			{ MOVE.L (SP)+,$0D9C }	{$ENDC}FUNCTION LMGetTimeSCSIDB : SInt16;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $3EB8, $0B24;			{ MOVE.W $0B24,(SP) }	{$ENDC}PROCEDURE LMSetTimeSCSIDB( value: SInt16 );	{$IFC NOT CFMSYSTEMCALLS}	INLINE $31DF, $0B24;			{ MOVE.W (SP)+,$0B24 }	{$ENDC}FUNCTION LMGetFSQHdr : QHdrPtr;	{$IFC NOT CFMSYSTEMCALLS}	INLINE $2EB8, $0360;			{ MOVE.L $0360,(SP) }	{$ENDC}{*************************************************************************************	MORE COMPLEX LOWMEM ACCESSORS*************************************************************************************}{$IFC CFMSYSTEMCALLS }PROCEDURE LMGetDSAlertRect(VAR DSAlertRectValue: Rect); C;PROCEDURE LMSetDSAlertRect(VAR DSAlertRectValue: Rect); C;PROCEDURE LMGetDragPattern(VAR DragPatternValue: Pattern); C;PROCEDURE LMSetDragPattern(VAR DragPatternValue: Pattern); C;PROCEDURE LMGetDeskPattern(VAR DeskPatternValue: Pattern); C;PROCEDURE LMSetDeskPattern(VAR DeskPatternValue: Pattern); C;PROCEDURE LMGetHiliteRGB(VAR HiliteRGBValue: RGBColor); C;PROCEDURE LMSetHiliteRGB(VAR HiliteRGBValue: RGBColor); C;FUNCTION LMGetEventQueue: QHdrPtr; C;PROCEDURE LMSetEventQueue(EventQueueValue: QHdrPtr); C;FUNCTION LMGetVBLQueue: QHdrPtr; C;PROCEDURE LMSetVBLQueue(VBLQueueValue: QHdrPtr); C;FUNCTION LMGetDrvQHdr: QHdrPtr; C;PROCEDURE LMSetDrvQHdr(DrvQHdrValue: QHdrPtr); C;FUNCTION LMGetVCBQHdr: QHdrPtr; C;PROCEDURE LMSetVCBQHdr(VCBQHdrValue: QHdrPtr); C;{*************************************************************************************	"BLOCKMOVE ACCESSORS"			These lowmem accessors use the BlockMove trap*************************************************************************************}FUNCTION LMGetCurApName: StringPtr; C;PROCEDURE LMSetCurApName(CurApNameValue: StringPtr); C;FUNCTION LMGetSysResName: StringPtr; C;PROCEDURE LMSetSysResName(SysResNameValue: StringPtr); C;FUNCTION LMGetFinderName: StringPtr; C;PROCEDURE LMSetFinderName(FinderNameValue: StringPtr); C;FUNCTION LMGetABusVars: Ptr; C;PROCEDURE LMSetABusVars(ABusVarsValue: Ptr); C;FUNCTION LMGetScratch20: Ptr; C;PROCEDURE LMSetScratch20(Scratch20Value: Ptr); C;FUNCTION LMGetToolScratch: Ptr; C;PROCEDURE LMSetToolScratch(ToolScratchValue: Ptr); C;FUNCTION LMGetApplScratch: Ptr; C;PROCEDURE LMSetApplScratch(ApplScratchValue: Ptr); C;{*************************************************************************************	"INDEXED ACCESSORS"			These lowmem accessors take an index parameter to get/set an indexed		lowmem global.*************************************************************************************}FUNCTION LMGetDAStrings(whichString: INTEGER): StringHandle; C;PROCEDURE LMSetDAStrings(DAStringsValue: StringHandle; whichString: INTEGER); C;FUNCTION LMGetLvl2DT(vectorNumber: INTEGER): UniversalProcPtr; C;PROCEDURE LMSetLvl2DT(Lvl2DTValue: UniversalProcPtr; vectorNumber: INTEGER); C;FUNCTION LMGetExtStsDT(vectorNumber: INTEGER): UniversalProcPtr; C;PROCEDURE LMSetExtStsDT(ExtStsDTValue: UniversalProcPtr; vectorNumber: INTEGER); C;{$ENDC}{$ALIGN RESET}{$POP}{$SETC UsingIncludes := LowMemIncludes}{$ENDC} {__LOWMEM__}{$IFC NOT UsingIncludes} END.{$ENDC}