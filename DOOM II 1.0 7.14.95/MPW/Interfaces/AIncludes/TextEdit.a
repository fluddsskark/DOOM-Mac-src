;;	File:		TextEdit.a;;	Copyright:	© 1984-1994 by Apple Computer, Inc.;				All rights reserved.;;	Version:	Universal Interfaces 2.0a3  ETO #16, MPW prerelease.  Friday, November 11, 1994. ;;	Bugs?:		If you find a problem with this file, send the file and version;				information (from above) and the problem description to:;;					Internet:	apple.bugs@applelink.apple.com;					AppleLink:	APPLE.BUGS;;	IF &TYPE('__TEXTEDIT__') = 'UNDEFINED' THEN__TEXTEDIT__ SET 1	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN	include 'Quickdraw.a'	ENDIF;		include 'Types.a'											;;			include 'ConditionalMacros.a'							;;		include 'MixedMode.a'										;;		include 'QuickdrawText.a'									;;;	The following ProcPtrs cannot be written in or called from a high-level ;	language without the help of mixed mode or assembly glue because they ;	use the following parameter-passing conventions:;;	typedef pascal void (*HighHookProcPtr)(const Rect *r, TEPtr pTE);;	typedef pascal void (*CaretHookProcPtr)(const Rect *r, TEPtr pTE);;;		In:;			=> 	r						on stack;			=>	pTE						A3.L;		Out:;			none;;	typedef pascal Boolean (*EOLHookProcPtr)(char theChar, TEPtr pTE, TEHandle hTE);;;		In:;			=> 	theChar					D0.B;			=>	pTE						A3.L;			=>	hTE						A4.L;		Out:;			<=	Boolean					Z bit of the CCR;;	typedef pascal unsigned short (*WidthHookProcPtr)(unsigned short textLen,;	 unsigned short textOffset, void *textBufferPtr, TEPtr pTE, TEHandle hTE);;	typedef pascal unsigned short (*TextWidthHookProcPtr)(unsigned short textLen,;	 unsigned short textOffset, void *textBufferPtr, TEPtr pTE, TEHandle hTE);;;		In:;			=> 	textLen					D0.W;			=>	textOffset				D1.W;			=>	textBufferPtr			A0.L;			=>	pTE						A3.L;			=>	hTE						A4.L;		Out:;			<=	unsigned short			D1.W;;	typedef pascal unsigned short (*NWidthHookProcPtr)(unsigned short styleRunLen,;	 unsigned short styleRunOffset, short slop, short direction, void *textBufferPtr, ;	 short *lineStart, TEPtr pTE, TEHandle hTE);;;		In:;			=> 	styleRunLen				D0.W;			=>	styleRunOffset			D1.W;			=>	slop					D2.W (low);			=>	direction				D2.W (high);			=>	textBufferPtr			A0.L;			=>	lineStart				A2.L;			=>	pTE						A3.L;			=>	hTE						A4.L;		Out:;			<=	unsigned short			D1.W;;	typedef pascal void (*DrawHookProcPtr)(unsigned short textOffset, unsigned short drawLen,;	 void *textBufferPtr, TEPtr pTE, TEHandle hTE);;;		In:;			=> 	textOffset				D0.W;			=>	drawLen					D1.W;			=>	textBufferPtr			A0.L;			=>	pTE						A3.L;			=>	hTE						A4.L;		Out:;			none;;	typedef pascal Boolean (*HitTestHookProcPtr)(unsigned short styleRunLen,;	 unsigned short styleRunOffset, unsigned short slop, void *textBufferPtr,;	 TEPtr pTE, TEHandle hTE, unsigned short *pixelWidth, unsigned short *charOffset, ;	 Boolean *pixelInChar);;;		In:;			=> 	styleRunLen				D0.W;			=>	styleRunOffset			D1.W;			=>	slop					D2.W;			=>	textBufferPtr			A0.L;			=>	pTE						A3.L;			=>	hTE						A4.L;		Out:;			<=	pixelWidth				D0.W (low);			<=	Boolean					D0.W (high);			<=	charOffset				D1.W;			<=	pixelInChar				D2.W;;	typedef pascal void (*TEFindWordProcPtr)(unsigned short currentPos, short caller, ;	 TEPtr pTE, TEHandle hTE, unsigned short *wordStart, unsigned short *wordEnd);;;		In:;			=> 	currentPos				D0.W;			=>	caller					D2.W;			=>	pTE						A3.L;			=>	hTE						A4.L;		Out:;			<=	wordStart				D0.W;			<=	wordEnd					D1.W;;	typedef pascal void (*TERecalcProcPtr)(TEPtr pTE, unsigned short changeLength,;  	 unsigned short *lineStart, unsigned short *firstChar, unsigned short *lastChar);;;		In:;			=> 	pTE						A3.L;			=>	changeLength			D7.W;		Out:;			<=	lineStart				D2.W;			<=	firstChar				D3.W;			<=	lastChar				D4.W;;	typedef pascal void (*TEDoTextProcPtr)(TEPtr pTE, unsigned short firstChar, unsigned short lastChar,;	 					short selector, GrafPtr *currentGrafPort, short *charPosition);;;		In:;			=> 	pTE						A3.L;			=>	firstChar				D3.W;			=>	lastChar				D4.W;			=>	selector				D7.W;		Out:;			<=	currentGrafPort			A0.L;			<=	charPosition			D0.W;			;TERec 					RECORD	0destRect				 ds		RectviewRect				 ds		RectselRect					 ds		RectlineHeight				 ds.w	1fontAscent				 ds.w	1selPoint				 ds		PointselStart				 ds.w	1selEnd					 ds.w	1active					 ds.w	1wordBreak				 ds.l	1clickLoop				 ds.l	1clickTime				 ds.l	1clickLoc				 ds.w	1caretTime				 ds.l	1caretState				 ds.w	1just					 ds.w	1teLength				 ds.w	1hText					 ds.l	1hDispatchRec			 ds.l	1									; added to replace recalBack & recalLines.  it's a handle anyway clikStuff				 ds.w	1crOnly					 ds.w	1txFont					 ds.w	1txFace					 ds.b	1									;txFace is unpacked bytefiller					 ds.b	1txMode					 ds.w	1txSize					 ds.w	1inPort					 ds.l	1highHook				 ds.l	1caretHook				 ds.l	1nLines					 ds.w	1lineStarts				 ds.w	16001sizeof					 EQU	32098						ENDR; Justification (word alignment) styles teJustLeft						EQU		0teJustCenter					EQU		1teJustRight						EQU		-1teForceLeft						EQU		-2; new names for the Justification (word alignment) styles teFlushDefault					EQU		0					;flush according to the line direction teCenter						EQU		1					;center justify (word alignment) teFlushRight					EQU		-1					;flush right for all scripts teFlushLeft						EQU		-2					;flush left for all scripts ; Set/Replace style modes fontBit							EQU		0					;set fontfaceBit							EQU		1					;set facesizeBit							EQU		2					;set sizeclrBit							EQU		3					;set coloraddSizeBit						EQU		4					;add size modetoggleBit						EQU		5					;set faces in toggle modetoglBit							EQU		5					; obsolete.  use toggleBit ; TESetStyle/TEContinuousStyle modes doFont							EQU		1					; set font (family) numberdoFace							EQU		2					;set character styledoSize							EQU		4					;set type sizedoColor							EQU		8					;set colordoAll							EQU		15					;set all attributesaddSize							EQU		16					;adjust type sizedoToggle						EQU		32					;toggle mode for TESetStyle; offsets into TEDispatchRec EOLHook							EQU		0					;[UniversalProcPtr] TEEOLHookDRAWHook						EQU		4					;[UniversalProcPtr] TEWidthHookWIDTHHook						EQU		8					;[UniversalProcPtr] TEDrawHookHITTESTHook						EQU		12					;[UniversalProcPtr] TEHitTestHooknWIDTHHook						EQU		24					;[UniversalProcPtr] nTEWidthHookTextWidthHook					EQU		28					;[UniversalProcPtr] TETextWidthHook; selectors for TECustomHook intEOLHook						EQU		0					;TEIntHook valueintDrawHook						EQU		1					;TEIntHook valueintWidthHook					EQU		2					;TEIntHook valueintHitTestHook					EQU		3					;TEIntHook valueintNWidthHook					EQU		6					;TEIntHook value for new version of WidthHookintTextWidthHook				EQU		7					;TEIntHook value for new TextWidthHook; feature or bit definitions for TEFeatureFlag teFAutoScroll					EQU		0					;00000001bteFAutoScr						EQU		0					;00000001b  obsolete. use teFAutoScrollteFTextBuffering				EQU		1					;00000010bteFOutlineHilite				EQU		2					;00000100bteFInlineInput					EQU		3					;00001000b teFUseTextServices				EQU		4					;00010000b ; action for the new "bit (un)set" interface, TEFeatureFlag teBitClear						EQU		0teBitSet						EQU		1					;set the selector bitteBitTest						EQU		-1					;no change; just return the current setting;constants for identifying the routine that called FindWord teWordSelect					EQU		4					;clickExpand to select wordteWordDrag						EQU		8					;clickExpand to drag new wordteFromFind						EQU		12					;FindLine called it ($0C)teFromRecal						EQU		16					;RecalLines called it ($10)      obsolete ;constants for identifying TEDoText selectors teFind							EQU		0					;TEDoText called for searchingteHighlight						EQU		1					;TEDoText called for highlightingteDraw							EQU		-1					;TEDoText called for drawing textteCaret							EQU		-2					;TEDoText called for drawing the caretStyleRun 				RECORD	0startChar				 ds.w	1									;starting character positionstyleIndex				 ds.w	1									;index in style tablesizeof					 EQU	4						ENDRSTElement 				RECORD	0stCount					 ds.w	1									;number of runs in this stylestHeight				 ds.w	1									;line heightstAscent				 ds.w	1									;font ascentstFont					 ds.w	1									;font (family) numberstFace					 ds.b	1									;character Stylefiller					 ds.b	1									;stFace is unpacked bytestSize					 ds.w	1									;size in pointsstColor					 ds		RGBColor							;absolute (RGB) colorsizeof					 EQU	18						ENDRLHElement 				RECORD	0lhHeight				 ds.w	1									;maximum height in linelhAscent				 ds.w	1									;maximum ascent in linesizeof					 EQU	4						ENDRScrpSTElement 			RECORD	0scrpStartChar			 ds.l	1									;starting character positionscrpHeight				 ds.w	1									;starting character positionscrpAscent				 ds.w	1scrpFont				 ds.w	1scrpFace				 ds.b	1									;unpacked bytefiller					 ds.b	1									;scrpFace is unpacked bytescrpSize				 ds.w	1scrpColor				 ds		RGBColorsizeof					 EQU	20						ENDR; ARRAY [0..1600] OF ScrpSTElement StScrpRec 				RECORD	0scrpNStyles				 ds.w	1									;number of styles in scrapscrpStyleTab			 ds.l	8005								;table of styles for scrapsizeof					 EQU	32022						ENDRNullStRec 				RECORD	0teReserved				 ds.l	1									;reserved for future expansionnullScrap				 ds.l	1									;handle to scrap style tablesizeof					 EQU	8						ENDRTEStyleRec 				RECORD	0nRuns					 ds.w	1									;number of style runsnStyles					 ds.w	1									;size of style tablestyleTab				 ds.l	1									;handle to style tablelhTab					 ds.l	1									;handle to line-height tableteRefCon				 ds.l	1									;reserved for application usenullStyle				 ds.l	1									;Handle to style set at null selectionruns					 ds.b	8001 * StyleRun					;ARRAY [0..8000] OF StyleRunsizeof					 EQU	32024						ENDRTextStyle 				RECORD	0tsFont					 ds.w	1									;font (family) numbertsFace					 ds.b	1									;character Stylefiller					 ds.b	1									;tsFace is unpacked bytetsSize					 ds.w	1									;size in pointtsColor					 ds		RGBColor							;absolute (RGB) colorsizeof					 EQU	12						ENDR	IF GENERATING68K THEN		Macro		TEScrapHandle			move.L $0AB4,(sp)		EndM	ELSE		IMPORT	TEScrapHandle	ENDIF	IF GENERATING68K THEN		_TEInit:	OPWORD	$A9CC	ELSE		IMPORT	TEInit	ENDIF	IF GENERATING68K THEN		_TENew:	OPWORD	$A9D2	ELSE		IMPORT	TENew	ENDIF	IF GENERATING68K THEN		_TEDispose:	OPWORD	$A9CD	ELSE		IMPORT	TEDispose	ENDIF	IF GENERATING68K THEN		_TESetText:	OPWORD	$A9CF	ELSE		IMPORT	TESetText	ENDIF	IF GENERATING68K THEN		_TEGetText:	OPWORD	$A9CB	ELSE		IMPORT	TEGetText	ENDIF	IF GENERATING68K THEN		_TEIdle:	OPWORD	$A9DA	ELSE		IMPORT	TEIdle	ENDIF	IF GENERATING68K THEN		_TESetSelect:	OPWORD	$A9D1	ELSE		IMPORT	TESetSelect	ENDIF	IF GENERATING68K THEN		_TEActivate:	OPWORD	$A9D8	ELSE		IMPORT	TEActivate	ENDIF	IF GENERATING68K THEN		_TEDeactivate:	OPWORD	$A9D9	ELSE		IMPORT	TEDeactivate	ENDIF	IF GENERATING68K THEN		_TEKey:	OPWORD	$A9DC	ELSE		IMPORT	TEKey	ENDIF	IF GENERATING68K THEN		_TECut:	OPWORD	$A9D6	ELSE		IMPORT	TECut	ENDIF	IF GENERATING68K THEN		_TECopy:	OPWORD	$A9D5	ELSE		IMPORT	TECopy	ENDIF	IF GENERATING68K THEN		_TEPaste:	OPWORD	$A9DB	ELSE		IMPORT	TEPaste	ENDIF	IF GENERATING68K THEN		_TEDelete:	OPWORD	$A9D7	ELSE		IMPORT	TEDelete	ENDIF	IF GENERATING68K THEN		_TEInsert:	OPWORD	$A9DE	ELSE		IMPORT	TEInsert	ENDIF	IF GENERATING68K THEN		_TESetAlignment:	OPWORD	$A9DF	ELSE		IMPORT	TESetAlignment	ENDIF	IF GENERATING68K THEN		_TEUpdate:	OPWORD	$A9D3	ELSE		IMPORT	TEUpdate	ENDIF	IF GENERATING68K THEN		_TETextBox:	OPWORD	$A9CE	ELSE		IMPORT	TETextBox	ENDIF	IF GENERATING68K THEN		_TEScroll:	OPWORD	$A9DD	ELSE		IMPORT	TEScroll	ENDIF	IF GENERATING68K THEN		_TESelView:	OPWORD	$A811	ELSE		IMPORT	TESelView	ENDIF	IF GENERATING68K THEN		_TEPinScroll:	OPWORD	$A812	ELSE		IMPORT	TEPinScroll	ENDIF	IF GENERATING68K THEN		_TEAutoView:	OPWORD	$A813	ELSE		IMPORT	TEAutoView	ENDIF	IF GENERATING68K THEN		_TECalText:	OPWORD	$A9D0	ELSE		IMPORT	TECalText	ENDIF	IF GENERATING68K THEN		_TEGetOffset:	OPWORD	$A83C	ELSE		IMPORT	TEGetOffset	ENDIF	IF GENERATING68K THEN		Macro		_TEGetPoint			move.w	#$0008,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEGetPoint	ENDIF	IF GENERATING68K THEN		_TEClick:	OPWORD	$A9D4	ELSE		IMPORT	TEClick	ENDIF	IF GENERATING68K THEN		_TEStyleNew:	OPWORD	$A83E	ELSE		IMPORT	TEStyleNew	ENDIF	IF GENERATING68K THEN		Macro		_TESetStyleHandle			move.w	#$0005,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TESetStyleHandle	ENDIF	IF GENERATING68K THEN		Macro		_TEGetStyleHandle			move.w	#$0004,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEGetStyleHandle	ENDIF	IF GENERATING68K THEN		Macro		_TEGetStyle			move.w	#$0003,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEGetStyle	ENDIF	IF GENERATING68K THEN		Macro		_TEStylePaste			move.w	#$0000,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEStylePaste	ENDIF	IF GENERATING68K THEN		Macro		_TESetStyle			move.w	#$0001,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TESetStyle	ENDIF	IF GENERATING68K THEN		Macro		_TEReplaceStyle			move.w	#$0002,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEReplaceStyle	ENDIF	IF GENERATING68K THEN		Macro		_TEGetStyleScrapHandle			move.w	#$0006,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEGetStyleScrapHandle	ENDIF	IF GENERATING68K THEN		Macro		_TEStyleInsert			move.w	#$0007,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEStyleInsert	ENDIF	IF GENERATING68K THEN		Macro		_TEGetHeight			move.w	#$0009,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEGetHeight	ENDIF	IF GENERATING68K THEN		Macro		_TEContinuousStyle			move.w	#$000A,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEContinuousStyle	ENDIF	IF GENERATING68K THEN		Macro		_TEUseStyleScrap			move.w	#$000B,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEUseStyleScrap	ENDIF	IF GENERATING68K THEN		Macro		_TECustomHook			move.w	#$000C,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TECustomHook	ENDIF	IF GENERATING68K THEN		Macro		_TENumStyles			move.w	#$000D,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TENumStyles	ENDIF	IF GENERATING68K THEN		Macro		_TEFeatureFlag			move.w	#$000E,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEFeatureFlag	ENDIF	IF GENERATING68K THEN		Macro		_TEGetHiliteRgn			move.w	#$000F,-(sp)			dc.w 	$A83D		EndM	ELSE		IMPORT	TEGetHiliteRgn	ENDIF	IF OLDROUTINENAMES  THEN	ENDIF	ENDIF ; __TEXTEDIT__