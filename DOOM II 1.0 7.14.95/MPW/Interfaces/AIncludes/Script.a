;;	File:		Script.a;;	Copyright:	© 1984-1994 by Apple Computer, Inc.;				All rights reserved.;;	Version:	Universal Interfaces 2.0a3  ETO #16, MPW prerelease.  Friday, November 11, 1994. ;;	Bugs?:		If you find a problem with this file, send the file and version;				information (from above) and the problem description to:;;					Internet:	apple.bugs@applelink.apple.com;					AppleLink:	APPLE.BUGS;;	IF &TYPE('__SCRIPT__') = 'UNDEFINED' THEN__SCRIPT__ SET 1	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN	include 'Types.a'	ENDIF;		include 'ConditionalMacros.a'								;	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN	include 'Quickdraw.a'	ENDIF;		include 'MixedMode.a'										;;		include 'QuickdrawText.a'									;	IF &TYPE('__INTLRESOURCES__') = 'UNDEFINED' THEN	include 'IntlResources.a'	ENDIF	IF &TYPE('__EVENTS__') = 'UNDEFINED' THEN	include 'Events.a'	ENDIF;		include 'OSUtils.a'										;;			include 'Memory.a'										;; Script System constants smSystemScript					EQU		-1					;designates system script.smCurrentScript					EQU		-2					;designates current font script.smAllScripts					EQU		-3					;designates any script	smRoman							EQU		0					;RomansmJapanese						EQU		1					;JapanesesmTradChinese					EQU		2					;Traditional ChinesesmKorean						EQU		3					;KoreansmArabic						EQU		4					;ArabicsmHebrew						EQU		5					;HebrewsmGreek							EQU		6					;GreeksmCyrillic						EQU		7					;CyrillicsmRSymbol						EQU		8					;Right-left symbolsmDevanagari					EQU		9					;DevanagarismGurmukhi						EQU		10					;GurmukhismGujarati						EQU		11					;GujaratismOriya							EQU		12					;OriyasmBengali						EQU		13					;BengalismTamil							EQU		14					;TamilsmTelugu						EQU		15					;TelugusmKannada						EQU		16					;Kannada/KanaresesmMalayalam						EQU		17					;MalayalamsmSinhalese						EQU		18					;SinhalesesmBurmese						EQU		19					;BurmesesmKhmer							EQU		20					;Khmer/CambodiansmThai							EQU		21					;ThaismLaotian						EQU		22					;LaotiansmGeorgian						EQU		23					;GeorgiansmArmenian						EQU		24					;ArmeniansmSimpChinese					EQU		25					;Simplified ChinesesmTibetan						EQU		26					;TibetansmMongolian						EQU		27					;MongoliansmGeez							EQU		28					;Geez/EthiopicsmEthiopic						EQU		28					;Synonym for smGeezsmEastEurRoman					EQU		29					;Synonym for smSlavicsmVietnamese					EQU		30					;VietnamesesmExtArabic						EQU		31					;extended ArabicsmUninterp						EQU		32					;uninterpreted symbols, e.g. palette symbolssmKlingon						EQU		32					;Klingon;Obsolete names for script systems (kept for backward compatibility)smChinese						EQU		2					;(use smTradChinese or smSimpChinese)smRussian						EQU		7					;(old name for smCyrillic); smMaldivian = 25;         (no more smMaldivian!)smAmharic						EQU		28					;(old name for smGeez)smSlavic						EQU		29					;(old name for smEastEurRoman)smSindhi						EQU		31					;(old name for smExtArabic); Language Codes langEnglish						EQU		0					; smRoman script langFrench						EQU		1					; smRoman script langGerman						EQU		2					; smRoman script langItalian						EQU		3					; smRoman script langDutch						EQU		4					; smRoman script langSwedish						EQU		5					; smRoman script langSpanish						EQU		6					; smRoman script langDanish						EQU		7					; smRoman script langPortuguese					EQU		8					; smRoman script langNorwegian					EQU		9					; smRoman script langHebrew						EQU		10					; smHebrew script langJapanese					EQU		11					; smJapanese script langArabic						EQU		12					; smArabic script langFinnish						EQU		13					; smRoman script langGreek						EQU		14					; smGreek script langIcelandic					EQU		15					; extended Roman script langMaltese						EQU		16					; extended Roman script langTurkish						EQU		17					; extended Roman script langCroatian					EQU		18					; Serbo-Croatian in extended Roman script langTradChinese					EQU		19					; Chinese in traditional characters langUrdu						EQU		20					; smArabic script langHindi						EQU		21					; smDevanagari script langThai						EQU		22					; smThai script langKorean						EQU		23					; smKorean script langLithuanian					EQU		24					; smEastEurRoman script langPolish						EQU		25					; smEastEurRoman script langHungarian					EQU		26					; smEastEurRoman script langEstonian					EQU		27					; smEastEurRoman script langLettish						EQU		28					; smEastEurRoman script langLatvian						EQU		28					; Synonym for langLettish langSaamisk						EQU		29					; ext. Roman script, lang. of the Sami/Lapp people of Scand. langLappish						EQU		29					; Synonym for langSaamisk langFaeroese					EQU		30					; smRoman script langFarsi						EQU		31					; smArabic script langPersian						EQU		31					; Synonym for langFarsi langRussian						EQU		32					; smCyrillic script langSimpChinese					EQU		33					; Chinese in simplified characters langFlemish						EQU		34					; smRoman script langIrish						EQU		35					; smRoman script langAlbanian					EQU		36					; smRoman script langRomanian					EQU		37					; smEastEurRoman script langCzech						EQU		38					; smEastEurRoman script langSlovak						EQU		39					; smEastEurRoman script langSlovenian					EQU		40					; smEastEurRoman script langYiddish						EQU		41					; smHebrew script langSerbian						EQU		42					; Serbo-Croatian in smCyrillic script langMacedonian					EQU		43					; smCyrillic script langBulgarian					EQU		44					; smCyrillic script langUkrainian					EQU		45					; smCyrillic script langByelorussian				EQU		46					; smCyrillic script langUzbek						EQU		47					; smCyrillic script langKazakh						EQU		48					; smCyrillic script langAzerbaijani					EQU		49					; Azerbaijani in smCyrillic script (USSR) langAzerbaijanAr				EQU		50					; Azerbaijani in smArabic script (Iran) langArmenian					EQU		51					; smArmenian script langGeorgian					EQU		52					; smGeorgian script langMoldavian					EQU		53					; smCyrillic script langKirghiz						EQU		54					; smCyrillic script langTajiki						EQU		55					; smCyrillic script langTurkmen						EQU		56					; smCyrillic script langMongolian					EQU		57					; Mongolian in smMongolian script langMongolianCyr				EQU		58					; Mongolian in smCyrillic script langPashto						EQU		59					; smArabic script langKurdish						EQU		60					; smArabic script langKashmiri					EQU		61					; smArabic script langSindhi						EQU		62					; smExtArabic script langTibetan						EQU		63					; smTibetan script langNepali						EQU		64					; smDevanagari script langSanskrit					EQU		65					; smDevanagari script langMarathi						EQU		66					; smDevanagari script langBengali						EQU		67					; smBengali script langAssamese					EQU		68					; smBengali script langGujarati					EQU		69					; smGujarati script langPunjabi						EQU		70					; smGurmukhi script langOriya						EQU		71					; smOriya script langMalayalam					EQU		72					; smMalayalam script langKannada						EQU		73					; smKannada script langTamil						EQU		74					; smTamil script langTelugu						EQU		75					; smTelugu script langSinhalese					EQU		76					; smSinhalese script langBurmese						EQU		77					; smBurmese script langKhmer						EQU		78					; smKhmer script langLao							EQU		79					; smLaotian script langVietnamese					EQU		80					; smVietnamese script langIndonesian					EQU		81					; smRoman script langTagalog						EQU		82					; smRoman script langMalayRoman					EQU		83					; Malay in smRoman script langMalayArabic					EQU		84					; Malay in smArabic script langAmharic						EQU		85					; smEthiopic script langTigrinya					EQU		86					; smEthiopic script langGalla						EQU		87					; smEthiopic script langOromo						EQU		87					; Synonym for langGalla langSomali						EQU		88					; smRoman script langSwahili						EQU		89					; smRoman script langRuanda						EQU		90					; smRoman script langRundi						EQU		91					; smRoman script langChewa						EQU		92					; smRoman script langMalagasy					EQU		93					; smRoman script langEsperanto					EQU		94					; extended Roman script langWelsh						EQU		128					; smRoman script langBasque						EQU		129					; smRoman script langCatalan						EQU		130					; smRoman script langLatin						EQU		131					; smRoman script langQuechua						EQU		132					; smRoman script langGuarani						EQU		133					; smRoman script langAymara						EQU		134					; smRoman script langTatar						EQU		135					; smCyrillic script langUighur						EQU		136					; smArabic script langDzongkha					EQU		137					; (lang of Bhutan) smTibetan script langJavaneseRom					EQU		138					; Javanese in smRoman script langSundaneseRom				EQU		139					; Sundanese in smRoman script ; Obsolete names, kept for backward compatibility langPortugese					EQU		8					; old misspelled version, kept for compatibility langMalta						EQU		16					; old misspelled version, kept for compatibility langYugoslavian					EQU		18					; (use langCroatian, langSerbian, etc.) langChinese						EQU		19					; (use langTradChinese or langSimpChinese) langLapponian					EQU		29					; Synonym for langSaamisk, not correct name ; Regional version codes verUS							EQU		0verFrance						EQU		1verBritain						EQU		2verGermany						EQU		3verItaly						EQU		4verNetherlands					EQU		5verFrBelgiumLux					EQU		6					; French for Belgium & Luxembourg verSweden						EQU		7verSpain						EQU		8verDenmark						EQU		9verPortugal						EQU		10verFrCanada						EQU		11verNorway						EQU		12verIsrael						EQU		13verJapan						EQU		14verAustralia					EQU		15verArabic						EQU		16					; synonym for verArabia verFinland						EQU		17verFrSwiss						EQU		18					; French Swiss verGrSwiss						EQU		19					; German Swiss verGreece						EQU		20verIceland						EQU		21verMalta						EQU		22verCyprus						EQU		23verTurkey						EQU		24verYugoCroatian					EQU		25					; Croatian system for Yugoslavia verNetherlandsComma				EQU		26verBelgiumLuxPoint				EQU		27verCanadaComma					EQU		28verCanadaPoint					EQU		29vervariantPortugal				EQU		30vervariantNorway				EQU		31vervariantDenmark				EQU		32verIndiaHindi					EQU		33					; Hindi system for India verPakistan						EQU		34verTurkishModified				EQU		35verGreekAncient					EQU		40verLithuania					EQU		41verPoland						EQU		42verHungary						EQU		43verEstonia						EQU		44verLatvia						EQU		45verLapland						EQU		46verFaeroeIsl					EQU		47verIran							EQU		48verRussia						EQU		49verIreland						EQU		50					; English-language version for Ireland verKorea						EQU		51verChina						EQU		52verTaiwan						EQU		53verThailand						EQU		54verCzech						EQU		56verSlovak						EQU		57verGenericFE					EQU		58verMagyar						EQU		59verBengali						EQU		60verByeloRussian					EQU		61verUkrania						EQU		62verItalianSwiss					EQU		63verAlternateGr					EQU		64minCountry						EQU		verUSmaxCountry						EQU		verAlternateGr		; changed from verThailand when additional enums added ; Obsolete region code names, kept for backward compatibility verBelgiumLux					EQU		6					; (use verFrBelgiumLux instead, less ambiguous) verArabia						EQU		16verYugoslavia					EQU		25					; (use verYugoCroatian instead, less ambiguous) verIndia						EQU		33					; (use verIndiaHindi instead, less ambiguous) ; Calendar Codes calGregorian					EQU		0calArabicCivil					EQU		1calArabicLunar					EQU		2calJapanese						EQU		3calJewish						EQU		4calCoptic						EQU		5calPersian						EQU		6; Integer Format Codes intWestern						EQU		0intArabic						EQU		1intRoman						EQU		2intJapanese						EQU		3intEuropean						EQU		4intOutputMask					EQU		$8000; CharByte byte types smSingleByte					EQU		0smFirstByte						EQU		-1smLastByte						EQU		1smMiddleByte					EQU		2; CharType field masks smcTypeMask						EQU		$000FsmcReserved						EQU		$00F0smcClassMask					EQU		$0F00smcOrientationMask				EQU		$1000				;two-byte script glyph orientationsmcRightMask					EQU		$2000smcUpperMask					EQU		$4000smcDoubleMask					EQU		$8000; Basic CharType character types smCharPunct						EQU		$0000smCharAscii						EQU		$0001smCharEuro						EQU		$0007smCharExtAscii					EQU		$0007				; More correct synonym for smCharEuro ; Additional CharType character types for script systems smCharKatakana					EQU		$0002				;Japanese KatakanasmCharHiragana					EQU		$0003				;Japanese HiraganasmCharIdeographic				EQU		$0004				;Hanzi, Kanji, HanjasmCharTwoByteGreek				EQU		$0005				;2-byte Greek in Far East systemssmCharTwoByteRussian			EQU		$0006				;2-byte Cyrillic in Far East systemssmCharBidirect					EQU		$0008				;Arabic/HebrewsmCharContextualLR				EQU		$0009				;Contextual left-right: Thai, Indic scriptssmCharNonContextualLR			EQU		$000A				;Non-contextual left-right: Cyrillic, GreeksmCharHangul					EQU		$000C				;Korean HangulsmCharJamo						EQU		$000D				;Korean JamosmCharBopomofo					EQU		$000E				;Chinese Bopomofo; old names for some of above, for backward compatibility smCharFISKana					EQU		$0002				;KatakanasmCharFISGana					EQU		$0003				;HiraganasmCharFISIdeo					EQU		$0004				;Hanzi, Kanji, HanjasmCharFISGreek					EQU		$0005				;2-byte Greek in Far East systemssmCharFISRussian				EQU		$0006				;2-byte Cyrillic in Far East systems; CharType classes for punctuation (smCharPunct) smPunctNormal					EQU		$0000smPunctNumber					EQU		$0100smPunctSymbol					EQU		$0200smPunctBlank					EQU		$0300; Additional CharType classes for punctuation in two-byte systems smPunctRepeat					EQU		$0400				; repeat marker smPunctGraphic					EQU		$0500				; line graphics ; CharType Katakana and Hiragana classes for two-byte systems smKanaSmall						EQU		$0100				;small kana charactersmKanaHardOK					EQU		$0200				;can have dakutensmKanaSoftOK					EQU		$0300				;can have dakuten or han-dakuten; CharType Ideographic classes for two-byte systems smIdeographicLevel1				EQU		$0000				;level 1 charsmIdeographicLevel2				EQU		$0100				;level 2 charsmIdeographicUser				EQU		$0200				;user char; old names for above, for backward compatibility smFISClassLvl1					EQU		$0000				;level 1 charsmFISClassLvl2					EQU		$0100				;level 2 charsmFISClassUser					EQU		$0200				;user char; CharType Jamo classes for Korean systems smJamoJaeum						EQU		$0000				;simple consonant charsmJamoBogJaeum					EQU		$0100				;complex consonant charsmJamoMoeum						EQU		$0200				;simple vowel charsmJamoBogMoeum					EQU		$0300				;complex vowel char; CharType glyph orientation for two-byte systems smCharHorizontal				EQU		$0000				; horizontal character form, or for both smCharVertical					EQU		$1000				; vertical character form ; CharType directions smCharLeft						EQU		$0000smCharRight						EQU		$2000; CharType case modifers smCharLower						EQU		$0000smCharUpper						EQU		$4000; CharType character size modifiers (1 or multiple bytes). smChar1byte						EQU		$0000smChar2byte						EQU		$8000; TransliterateText target types for Roman smTransAscii					EQU		0					;convert to ASCIIsmTransNative					EQU		1					;convert to font scriptsmTransCase						EQU		$FE					;convert case for all textsmTransSystem					EQU		$FF					;convert to system script; TransliterateText target types for two-byte scripts smTransAscii1					EQU		2					;1-byte RomansmTransAscii2					EQU		3					;2-byte RomansmTransKana1					EQU		4					;1-byte Japanese KatakanasmTransKana2					EQU		5					;2-byte Japanese KatakanasmTransGana2					EQU		7					;2-byte Japanese Hiragana (no 1-byte Hiragana)smTransHangul2					EQU		8					;2-byte Korean HangulsmTransJamo2					EQU		9					;2-byte Korean JamosmTransBopomofo2				EQU		10					;2-byte Chinese Bopomofo; TransliterateText target modifiers smTransLower					EQU		$4000				;target becomes lowercasesmTransUpper					EQU		$8000				;target becomes uppercase; TransliterateText resource format numbers smTransRuleBaseFormat			EQU		1					;Rule based trsl resource format smTransHangulFormat				EQU		2					;Table based Hangul trsl resource format; TransliterateText property flags smTransPreDoubleByting			EQU		1					;Convert all text to double byte before transliterationsmTransPreLowerCasing			EQU		2					;Convert all text to lower case before transliteration; TransliterateText source mask - general smMaskAll						EQU		$FFFFFFFF			;Convert all text; TransliterateText source masks smMaskAscii						EQU		$00000001			;2^smTransAsciismMaskNative					EQU		$00000002			;2^smTransNative; TransliterateText source masks for two-byte scripts smMaskAscii1					EQU		$00000004			;2^smTransAscii1smMaskAscii2					EQU		$00000008			;2^smTransAscii2smMaskKana1						EQU		$00000010			;2^smTransKana1smMaskKana2						EQU		$00000020			;2^smTransKana2smMaskGana2						EQU		$00000080			;2^smTransGana2smMaskHangul2					EQU		$00000100			;2^smTransHangul2smMaskJamo2						EQU		$00000200			;2^smTransJamo2smMaskBopomofo2					EQU		$00000400			;2^smTransBopomofo2; Result values from GetScriptManagerVariable and SetScriptManagerVariable calls. smNotInstalled					EQU		0					;routine not available in scriptsmBadVerb						EQU		-1					;Bad verb passed to a routinesmBadScript						EQU		-2					;Bad script code passed to a routine; Values for script redraw flag. smRedrawChar					EQU		0					;Redraw character onlysmRedrawWord					EQU		1					;Redraw entire word (2-byte systems)smRedrawLine					EQU		-1					;Redraw entire line (bidirectional systems); GetScriptManagerVariable and SetScriptManagerVariable verbs smVersion						EQU		0					;Script Manager version numbersmMunged						EQU		2					;Globals change countsmEnabled						EQU		4					;Count of enabled scripts, incl RomansmBidirect						EQU		6					;At least one bidirectional scriptsmFontForce						EQU		8					;Force font flagsmIntlForce						EQU		10					;Force intl flagsmForced						EQU		12					;Script was forced to system scriptsmDefault						EQU		14					;Script was defaulted to Roman scriptsmPrint							EQU		16					;Printer action routinesmSysScript						EQU		18					;System scriptsmLastScript					EQU		20					;Last keyboard scriptsmKeyScript						EQU		22					;Keyboard scriptsmSysRef						EQU		24					;System folder refNumsmKeyCache						EQU		26					;obsoletesmKeySwap						EQU		28					;Swapping table handlesmGenFlags						EQU		30					;General flags longsmOverride						EQU		32					;Script override flagssmCharPortion					EQU		34					;Ch vs SpExtra proportion; New for System 7.0: smDoubleByte					EQU		36					;Flag for double-byte script installedsmKCHRCache						EQU		38					;Returns pointer to KCHR cachesmRegionCode					EQU		40					;Returns current region code (verXxx)smKeyDisableState				EQU		42					;Returns current keyboard disable state; GetScriptVariable and SetScriptVariable verbs.;Note: Verbs private to script systems are negative, while;those general across script systems are non-negative. smScriptVersion					EQU		0					;Script software versionsmScriptMunged					EQU		2					;Script entry changed countsmScriptEnabled					EQU		4					;Script enabled flagsmScriptRight					EQU		6					;Right to left flagsmScriptJust					EQU		8					;Justification flagsmScriptRedraw					EQU		10					;Word redraw flagsmScriptSysFond					EQU		12					;Preferred system fontsmScriptAppFond					EQU		14					;Preferred Application fontsmScriptBundle					EQU		16					;Beginning of itlb verbssmScriptNumber					EQU		16					;Script itl0 idsmScriptDate					EQU		18					;Script itl1 idsmScriptSort					EQU		20					;Script itl2 idsmScriptFlags					EQU		22					;flags wordsmScriptToken					EQU		24					;Script itl4 idsmScriptEncoding				EQU		26					;id of optional itl5, if presentsmScriptLang					EQU		28					;Current language for scriptsmScriptNumDate					EQU		30					;Script Number/Date formats.smScriptKeys					EQU		32					;Script KCHR idsmScriptIcon					EQU		34					;ID # of SICN or kcs#/kcs4/kcs8 suitesmScriptPrint					EQU		36					;Script printer action routinesmScriptTrap					EQU		38					;Trap entry pointersmScriptCreator					EQU		40					;Script file creatorsmScriptFile					EQU		42					;Script file namesmScriptName					EQU		44					;Script name; There is a hole here for old Kanji private verbs 46-76 ;; New for System 7.0: smScriptMonoFondSize			EQU		78					;default monospace FOND (hi) & size (lo)smScriptPrefFondSize			EQU		80					;preferred FOND (hi) & size (lo)smScriptSmallFondSize			EQU		82					;default small FOND (hi) & size (lo)smScriptSysFondSize				EQU		84					;default system FOND (hi) & size (lo)smScriptAppFondSize				EQU		86					;default app FOND (hi) & size (lo)smScriptHelpFondSize			EQU		88					;default Help Mgr FOND (hi) & size (lo)smScriptValidStyles				EQU		90					;mask of valid styles for scriptsmScriptAliasStyle				EQU		92					;style (set) to use for aliases; Special script code values for International Utilities iuSystemScript					EQU		-1					; <obsolete>  system script iuCurrentScript					EQU		-2					; <obsolete>  current script (for font of grafPort) ; Negative verbs for KeyScript smKeyNextScript					EQU		-1					; Switch to next available script smKeySysScript					EQU		-2					; Switch to the system script smKeySwapScript					EQU		-3					; Switch to previously-used script ; New for System 7.0: smKeyNextKybd					EQU		-4					; Switch to next keyboard in current keyscript smKeySwapKybd					EQU		-5					; Switch to previously-used keyboard in current keyscript smKeyDisableKybds				EQU		-6					; Disable keyboards not in system or Roman script smKeyEnableKybds				EQU		-7					; Re-enable keyboards for all enabled scripts smKeyToggleInline				EQU		-8					; Toggle inline input for current keyscript smKeyToggleDirection			EQU		-9					; Toggle default line direction (TESysJust) smKeyNextInputMethod			EQU		-10					; Switch to next input method in current keyscript smKeySwapInputMethod			EQU		-11					; Switch to last-used input method in current keyscript smKeyDisableKybdSwitch			EQU		-12					; Disable switching from the current keyboard smKeySetDirLeftRight			EQU		-15					; Set default line dir to left-right, align left smKeySetDirRightLeft			EQU		-16					; Set default line dir to right-left, align right smKeyRoman						EQU		-17					; Set keyscript to Roman. Does nothing if Roman-only;										system, unlike KeyScript(smRoman) which forces;										an update to current default Roman keyboard ; Bits in the smScriptFlags word;(bits above 8 are non-static) smsfIntellCP					EQU		0					;Script has intelligent cut & pastesmsfSingByte					EQU		1					;Script has only single bytessmsfNatCase						EQU		2					;Native chars have upper & lower casesmsfContext						EQU		3					;Script is contextualsmsfNoForceFont					EQU		4					;Script will not force characterssmsfB0Digits					EQU		5					;Script has alternate digits at B0-B9smsfAutoInit					EQU		6					;Auto initialize the scriptsmsfUnivExt						EQU		7					;Script is handled by universal extensionsmsfSynchUnstyledTE				EQU		8					;Script synchronizes for unstyled TEsmsfForms						EQU		13					;Uses contextual forms for letterssmsfLigatures					EQU		14					;Uses contextual ligaturessmsfReverse						EQU		15					;Reverses native text, right-left; Bits in the smGenFlags long.;First (high-order) byte is set from itlc flags byte. smfShowIcon						EQU		31					;Show icon even if only one scriptsmfDualCaret					EQU		30					;Use dual caret for mixed direction textsmfNameTagEnab					EQU		29					;Reserved for internal usesmfUseAssocFontInfo				EQU		28					;Use the associated font info for FontMetrics calls <48>; Roman script constants ; The following are here for backward compatibility, but should not be used. ; This information should be obtained using GetScript. romanSysFond					EQU		$3FFF				;system font id numberromanAppFond					EQU		3					;application font id numberromanFlags						EQU		$0007				;roman settings; Script Manager font equates. smFondStart						EQU		$4000				;start from 16KsmFondEnd						EQU		$C000				;past end of range at 48K; Miscellaneous font equates. smUprHalfCharSet				EQU		$80					;first char code in top half of std char set; Character Set Extensions diaeresisUprY					EQU		$D9fraction						EQU		$DAintlCurrency					EQU		$DBleftSingGuillemet				EQU		$DCrightSingGuillemet				EQU		$DDfiLigature						EQU		$DEflLigature						EQU		$DFdblDagger						EQU		$E0centeredDot						EQU		$E1baseSingQuote					EQU		$E2baseDblQuote					EQU		$E3perThousand						EQU		$E4circumflexUprA					EQU		$E5circumflexUprE					EQU		$E6acuteUprA						EQU		$E7diaeresisUprE					EQU		$E8graveUprE						EQU		$E9acuteUprI						EQU		$EAcircumflexUprI					EQU		$EBdiaeresisUprI					EQU		$ECgraveUprI						EQU		$EDacuteUprO						EQU		$EEcircumflexUprO					EQU		$EFappleLogo						EQU		$F0graveUprO						EQU		$F1acuteUprU						EQU		$F2circumflexUprU					EQU		$F3graveUprU						EQU		$F4dotlessLwrI						EQU		$F5circumflex						EQU		$F6tilde							EQU		$F7macron							EQU		$F8breveMark						EQU		$F9overDot							EQU		$FAringMark						EQU		$FBcedilla							EQU		$FCdoubleAcute						EQU		$FDogonek							EQU		$FEhachek							EQU		$FF; TokenType values tokenIntl						EQU		4					;the itl resource number of the tokenizertokenEmpty						EQU		-1					;used internally as an empty flagtokenUnknown					EQU		0					;chars that do not match a defined token typetokenWhite						EQU		1					;white spacetokenLeftLit					EQU		2					;literal begintokenRightLit					EQU		3					;literal endtokenAlpha						EQU		4					;alphabetictokenNumeric					EQU		5					;numerictokenNewLine					EQU		6					;new linetokenLeftComment				EQU		7					;open commenttokenRightComment				EQU		8					;close commenttokenLiteral					EQU		9					;literaltokenEscape						EQU		10					;character escape (e.g. '\' in "\n", "\t")tokenAltNum						EQU		11					;alternate number (e.g. $B0-B9 in Arabic,Hebrew)tokenRealNum					EQU		12					;real numbertokenAltReal					EQU		13					;alternate real numbertokenReserve1					EQU		14					;reservedtokenReserve2					EQU		15					;reservedtokenLeftParen					EQU		16					;open parenthesistokenRightParen					EQU		17					;close parenthesistokenLeftBracket				EQU		18					;open square brackettokenRightBracket				EQU		19					;close square brackettokenLeftCurly					EQU		20					;open curly brackettokenRightCurly					EQU		21					;close curly brackettokenLeftEnclose				EQU		22					;open guillemettokenRightEnclose				EQU		23					;close guillemettokenPlus						EQU		24tokenMinus						EQU		25tokenAsterisk					EQU		26					;times/multiplytokenDivide						EQU		27tokenPlusMinus					EQU		28					;plus or minus symboltokenSlash						EQU		29tokenBackSlash					EQU		30tokenLess						EQU		31					;less than symboltokenGreat						EQU		32					;greater than symboltokenEqual						EQU		33tokenLessEqual2					EQU		34					;less than or equal, 2 characters (e.g. <=)tokenLessEqual1					EQU		35					;less than or equal, 1 charactertokenGreatEqual2				EQU		36					;greater than or equal, 2 characters (e.g. >=)tokenGreatEqual1				EQU		37					;greater than or equal, 1 charactertoken2Equal						EQU		38					;double equal (e.g. ==)tokenColonEqual					EQU		39					;colon equaltokenNotEqual					EQU		40					;not equal, 1 charactertokenLessGreat					EQU		41					;less/greater, Pascal not equal (e.g. <>)tokenExclamEqual				EQU		42					;exclamation equal, C not equal (e.g. !=)tokenExclam						EQU		43					;exclamation pointtokenTilde						EQU		44					;centered tildetokenComma						EQU		45tokenPeriod						EQU		46tokenLeft2Quote					EQU		47					;open double quotetokenRight2Quote				EQU		48					;close double quotetokenLeft1Quote					EQU		49					;open single quotetokenRight1Quote				EQU		50					;close single quotetoken2Quote						EQU		51					;double quotetoken1Quote						EQU		52					;single quotetokenSemicolon					EQU		53tokenPercent					EQU		54tokenCaret						EQU		55tokenUnderline					EQU		56tokenAmpersand					EQU		57tokenAtSign						EQU		58tokenBar						EQU		59					;vertical bartokenQuestion					EQU		60tokenPi							EQU		61					;lower-case pitokenRoot						EQU		62					;square root symboltokenSigma						EQU		63					;capital sigmatokenIntegral					EQU		64					;integral signtokenMicro						EQU		65tokenCapPi						EQU		66					;capital pitokenInfinity					EQU		67tokenColon						EQU		68tokenHash						EQU		69					;e.g. #tokenDollar						EQU		70tokenNoBreakSpace				EQU		71					;non-breaking spacetokenFraction					EQU		72tokenIntlCurrency				EQU		73tokenLeftSingGuillemet			EQU		74tokenRightSingGuillemet			EQU		75tokenPerThousand				EQU		76tokenEllipsis					EQU		77tokenCenterDot					EQU		78tokenNil						EQU		127delimPad						EQU		-2; obsolete, misspelled token names kept for backward compatibility tokenTilda						EQU		44tokenCarat						EQU		55; Table selectors for GetItlTable smWordSelectTable				EQU		0					; get word select break table from 'itl2' smWordWrapTable					EQU		1					; get word wrap break table from 'itl2' smNumberPartsTable				EQU		2					; get default number parts table from 'itl4' smUnTokenTable					EQU		3					; get unToken table from 'itl4' smWhiteSpaceList				EQU		4					; get white space list from 'itl4' iuWordSelectTable				EQU		0					; <obsolete>  get word select break table from 'itl2' iuWordWrapTable					EQU		1					; <obsolete>  get word wrap break table from 'itl2' iuNumberPartsTable				EQU		2					; <obsolete>  get default number parts table from 'itl4' iuUnTokenTable					EQU		3					; <obsolete>  get unToken table from 'itl4' iuWhiteSpaceList				EQU		4					; <obsolete>  get white space list from 'itl4' ; end of stuff moved from Packages.h tokenOK							EQU		0					; TokenResults tokenOverflow					EQU		1					; TokenResults stringOverflow					EQU		2					; TokenResults badDelim						EQU		3					; TokenResults badEnding						EQU		4					; TokenResults crash							EQU		5					; TokenResults TokenRec 				RECORD	0theToken				 ds.w	1position				 ds.l	1									;pointer into original sourcelength					 ds.l	1									;length of text in original sourcestringPosition			 ds.l	1									;Pascal/C string copy of identifiersizeof					 EQU	14						ENDRTokenBlock 				RECORD	0source					 ds.l	1									;pointer to stream of characterssourceLength			 ds.l	1									;length of source streamtokenList				 ds.l	1									;pointer to array of tokenstokenLength				 ds.l	1									;maximum length of TokenListtokenCount				 ds.l	1									;number tokens generated by tokenizerstringList				 ds.l	1									;pointer to stream of identifiersstringLength			 ds.l	1									;length of string liststringCount				 ds.l	1									;number of bytes currently useddoString				 ds.b	1									;make strings & put into StringListdoAppend				 ds.b	1									;append to TokenList rather than replacedoAlphanumeric			 ds.b	1									;identifiers may include numericdoNest					 ds.b	1									;do comments nest?leftDelims				 ds.w	2rightDelims				 ds.w	2leftComment				 ds.w	4rightComment			 ds.w	4escapeCode				 ds.w	1									;escape symbol codedecimalCode				 ds.w	1itlResource				 ds.l	1									;handle to itl4 resource of current scriptreserved				 ds.l	8									;must be zero!sizeof					 EQU	100						ENDR	IF GENERATING68K THEN		Macro		GetSysDirection			move.W $0BAC,(sp)		EndM	ELSE		IMPORT	GetSysDirection	ENDIF	IF GENERATING68K THEN		Macro		SetSysDirection			move.W (sp)+,$0BAC		EndM	ELSE		IMPORT	SetSysDirection	ENDIF	IF GENERATING68K THEN		Macro		_FontScript			dc.w 	$2F3C			dc.w 	$8200			dc.w 	$0000			dc.w 	$A8B5		EndM	ELSE		IMPORT	FontScript	ENDIF	IF GENERATING68K THEN		Macro		_IntlScript			dc.w 	$2F3C			dc.w 	$8200			dc.w 	$0002			dc.w 	$A8B5		EndM	ELSE		IMPORT	IntlScript	ENDIF	IF GENERATING68K THEN		Macro		_KeyScript			dc.w 	$2F3C			dc.w 	$8002			dc.w 	$0004			dc.w 	$A8B5		EndM	ELSE		IMPORT	KeyScript	ENDIF	IF GENERATING68K THEN		Macro		_CharByte			dc.w 	$2F3C			dc.w 	$8206			dc.w 	$0010			dc.w 	$A8B5		EndM	ELSE		IMPORT	CharByte	ENDIF	IF GENERATING68K THEN		Macro		_CharType			dc.w 	$2F3C			dc.w 	$8206			dc.w 	$0012			dc.w 	$A8B5		EndM	ELSE		IMPORT	CharType	ENDIF	IF GENERATING68K THEN		Macro		_IsCmdChar			dc.w 	$2F3C			dc.w 	$8206			dc.w 	$FFD0			dc.w 	$A8B5		EndM	ELSE		IMPORT	IsCmdChar	ENDIF	IF GENERATING68K THEN		Macro		_Transliterate			dc.w 	$2F3C			dc.w 	$820E			dc.w 	$0018			dc.w 	$A8B5		EndM	ELSE		IMPORT	Transliterate	ENDIF	IF GENERATING68K THEN		Macro		_ParseTable			dc.w 	$2F3C			dc.w 	$8204			dc.w 	$0022			dc.w 	$A8B5		EndM	ELSE		IMPORT	ParseTable	ENDIF	IF GENERATING68K THEN		Macro		_IntlTokenize			dc.w 	$2F3C			dc.w 	$8204			dc.w 	$FFFA			dc.w 	$A8B5		EndM	ELSE		IMPORT	IntlTokenize	ENDIF	IF GENERATING68K THEN		Macro		_FontToScript			dc.w 	$2F3C			dc.w 	$8202			dc.w 	$0006			dc.w 	$A8B5		EndM	ELSE		IMPORT	FontToScript	ENDIF	IF GENERATING68K THEN		Macro		_GetScriptManagerVariable			dc.w 	$2F3C			dc.w 	$8402			dc.w 	$0008			dc.w 	$A8B5		EndM	ELSE		IMPORT	GetScriptManagerVariable	ENDIF	IF GENERATING68K THEN		Macro		_SetScriptManagerVariable			dc.w 	$2F3C			dc.w 	$8206			dc.w 	$000A			dc.w 	$A8B5		EndM	ELSE		IMPORT	SetScriptManagerVariable	ENDIF	IF GENERATING68K THEN		Macro		_GetScriptVariable			dc.w 	$2F3C			dc.w 	$8404			dc.w 	$000C			dc.w 	$A8B5		EndM	ELSE		IMPORT	GetScriptVariable	ENDIF	IF GENERATING68K THEN		Macro		_GetScript			dc.w 	$2F3C			dc.w 	$8404			dc.w 	$000C			dc.w 	$A8B5		EndM	ELSE		IMPORT	GetScript	ENDIF	IF GENERATING68K THEN		Macro		_SetScriptVariable			dc.w 	$2F3C			dc.w 	$8208			dc.w 	$000E			dc.w 	$A8B5		EndM	ELSE		IMPORT	SetScriptVariable	ENDIF	IF GENERATING68K THEN		Macro		_SetScript			dc.w 	$2F3C			dc.w 	$8208			dc.w 	$000E			dc.w 	$A8B5		EndM	ELSE		IMPORT	SetScript	ENDIF;  New for 7.1  	IF GENERATING68K THEN		Macro		_GetScriptUtilityAddress			dc.w 	$2F3C			dc.w 	$C404			dc.w 	$0038			dc.w 	$A8B5		EndM	ELSE		IMPORT	GetScriptUtilityAddress	ENDIF	IF GENERATING68K THEN		Macro		_SetScriptUtilityAddress			dc.w 	$2F3C			dc.w 	$C008			dc.w 	$003A			dc.w 	$A8B5		EndM	ELSE		IMPORT	SetScriptUtilityAddress	ENDIF	IF GENERATING68K THEN		Macro		_GetScriptQDPatchAddress			dc.w 	$2F3C			dc.w 	$C406			dc.w 	$003C			dc.w 	$A8B5		EndM	ELSE		IMPORT	GetScriptQDPatchAddress	ENDIF	IF GENERATING68K THEN		Macro		_SetScriptQDPatchAddress			dc.w 	$2F3C			dc.w 	$C00A			dc.w 	$003E			dc.w 	$A8B5		EndM	ELSE		IMPORT	SetScriptQDPatchAddress	ENDIF	IF GENERATING68K THEN		Macro		_CharacterByteType			dc.w 	$2F3C			dc.w 	$C206			dc.w 	$0010			dc.w 	$A8B5		EndM	ELSE		IMPORT	CharacterByteType	ENDIF	IF GENERATING68K THEN		Macro		_CharacterType			dc.w 	$2F3C			dc.w 	$C206			dc.w 	$0012			dc.w 	$A8B5		EndM	ELSE		IMPORT	CharacterType	ENDIF	IF GENERATING68K THEN		Macro		_TransliterateText			dc.w 	$2F3C			dc.w 	$C20E			dc.w 	$0018			dc.w 	$A8B5		EndM	ELSE		IMPORT	TransliterateText	ENDIF	IF GENERATING68K THEN		Macro		_FillParseTable			dc.w 	$2F3C			dc.w 	$C204			dc.w 	$0022			dc.w 	$A8B5		EndM	ELSE		IMPORT	FillParseTable	ENDIF; Moved from Packages.h 	IF GENERATING68K THEN		Macro		_GetIntlResource			move.w	#$0006,-(sp)			dc.w 	$A9ED		EndM	ELSE		IMPORT	GetIntlResource	ENDIF	IF GENERATING68K THEN		Macro		_SetIntlResource			move.w	#$0008,-(sp)			dc.w 	$A9ED		EndM	ELSE		IMPORT	SetIntlResource	ENDIF	IF GENERATING68K THEN		Macro		_ClearIntlResourceCache			move.w	#$0018,-(sp)			dc.w 	$A9ED		EndM	ELSE		IMPORT	ClearIntlResourceCache	ENDIF	IF GENERATING68K THEN		Macro		_GetIntlResourceTable			move.w	#$0024,-(sp)			dc.w 	$A9ED		EndM	ELSE		IMPORT	GetIntlResourceTable	ENDIF	IF OLDROUTINENAMES  THEN	ENDIF	ENDIF ; __SCRIPT__