;;	File:		Quickdraw.a;;	Copyright:	© 1984-1994 by Apple Computer, Inc.;				All rights reserved.;;	Version:	Universal Interfaces 2.0a3  ETO #16, MPW prerelease.  Friday, November 11, 1994. ;;	Bugs?:		If you find a problem with this file, send the file and version;				information (from above) and the problem description to:;;					Internet:	apple.bugs@applelink.apple.com;					AppleLink:	APPLE.BUGS;;	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN__QUICKDRAW__ SET 1	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN	include 'Types.a'	ENDIF;		include 'ConditionalMacros.a'								;	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN	include 'MixedMode.a'	ENDIF	IF &TYPE('__QUICKDRAWTEXT__') = 'UNDEFINED' THEN	include 'QuickdrawText.a'	ENDIFinvalColReq						EQU		-1					;invalid color table request; transfer modes srcCopy							EQU		0					;the 16 transfer modessrcOr							EQU		1srcXor							EQU		2srcBic							EQU		3notSrcCopy						EQU		4notSrcOr						EQU		5notSrcXor						EQU		6notSrcBic						EQU		7patCopy							EQU		8patOr							EQU		9patXor							EQU		10patBic							EQU		11notPatCopy						EQU		12notPatOr						EQU		13notPatXor						EQU		14notPatBic						EQU		15; Special Text Transfer Mode grayishTextOr					EQU		49; Arithmetic transfer modes blend							EQU		32addPin							EQU		33addOver							EQU		34subPin							EQU		35addMax							EQU		37adMax							EQU		37subOver							EQU		38adMin							EQU		39ditherCopy						EQU		64; Transparent mode constant transparent						EQU		36; QuickDraw color separation constants normalBit						EQU		0					;normal screen mappinginverseBit						EQU		1					;inverse screen mappingredBit							EQU		4					;RGB additive mappinggreenBit						EQU		3blueBit							EQU		2cyanBit							EQU		8					;CMYBk subtractive mappingmagentaBit						EQU		7yellowBit						EQU		6blackBit						EQU		5blackColor						EQU		33					;colors expressed in these mappingswhiteColor						EQU		30redColor						EQU		205greenColor						EQU		341blueColor						EQU		409cyanColor						EQU		273magentaColor					EQU		137yellowColor						EQU		69picLParen						EQU		0					;standard picture commentspicRParen						EQU		1clutType						EQU		0					;0 if lookup tablefixedType						EQU		1					;1 if fixed tabledirectType						EQU		2					;2 if direct valuesgdDevType						EQU		0					;0 = monochrome 1 = colorroundedDevice					EQU		5					; 1 if device has been “rounded” into the GrayRgn hasAuxMenuBar					EQU		6					; 1 if device has an aux menu bar on it burstDevice						EQU		7ext32Device						EQU		8ramInit							EQU		10					;1 if initialized from 'scrn' resourcemainScreen						EQU		11					; 1 if main screen allInit							EQU		12					; 1 if all devices initialized screenDevice					EQU		13					;1 if screen device [not used]noDriver						EQU		14					; 1 if no driver for this GDevice screenActive					EQU		15					;1 if in usehiliteBit						EQU		7					;flag bit in HiliteMode (lowMem flag)pHiliteBit						EQU		0					;flag bit in HiliteMode used with BitClr proceduredefQDColors						EQU		127					;resource ID of clut for default QDColors; pixel type RGBDirect						EQU		16					; 16 & 32 bits/pixel pixelType value ; pmVersion values baseAddr32						EQU		4					;pixmap base address is 32-bit addressframe							EQU		0paint							EQU		1erase							EQU		2invert							EQU		3fill							EQU		4chunky							EQU		0chunkyPlanar					EQU		1planar							EQU		2;**************   IMPORTANT NOTE REGARDING Pattern  **************************************;   Patterns were originally defined as:;   ;		C: 			typedef unsigned char Pattern[8];;		Pascal:		Pattern = PACKED ARRAY [0..7] OF 0..255;;		;   The old array defintion of Pattern would cause 68000 based CPU's to crash in certain circum-;   stances. The new struct definition is safe, but may require source code changes to compile.;   Read the details in TechNote "Platforms & Tools" #PT 38.;	;********************************************************************************************Pattern 				RECORD	0pat						 ds.b	8sizeof					 EQU	8						ENDRsingleDevicesBit				EQU		0dontMatchSeedsBit				EQU		1allDevicesBit					EQU		2singleDevices					EQU		1 << singleDevicesBitdontMatchSeeds					EQU		1 << dontMatchSeedsBitallDevices						EQU		1 << allDevicesBitBitMap 					RECORD	0baseAddr				 ds.l	1rowBytes				 ds.w	1bounds					 ds		Rectsizeof					 EQU	14						ENDRCursor 					RECORD	0data					 ds.l	8mask					 ds.l	8hotSpot					 ds		Pointsizeof					 EQU	68						ENDRPenState 				RECORD	0pnLoc					 ds		PointpnSize					 ds		PointpnMode					 ds.w	1pnPat					 ds		Patternsizeof					 EQU	18						ENDRRegion 					RECORD	0rgnSize					 ds.w	1									;size in bytesrgnBBox					 ds		Rect								;enclosing rectanglesizeof					 EQU	10						ENDRPicture 				RECORD	0picSize					 ds.w	1picFrame				 ds		Rectsizeof					 EQU	10						ENDRPolygon 				RECORD	0polySize				 ds.w	1polyBBox				 ds		RectpolyPoints				 ds		Pointsizeof					 EQU	14						ENDRQDProcs 				RECORD	0textProc				 ds.l	1lineProc				 ds.l	1rectProc				 ds.l	1rRectProc				 ds.l	1ovalProc				 ds.l	1arcProc					 ds.l	1polyProc				 ds.l	1rgnProc					 ds.l	1bitsProc				 ds.l	1commentProc				 ds.l	1txMeasProc				 ds.l	1getPicProc				 ds.l	1putPicProc				 ds.l	1sizeof					 EQU	52						ENDRGrafPort 				RECORD	0device					 ds.w	1portBits				 ds		BitMapportRect				 ds		RectvisRgn					 ds.l	1clipRgn					 ds.l	1bkPat					 ds		PatternfillPat					 ds		PatternpnLoc					 ds		PointpnSize					 ds		PointpnMode					 ds.w	1pnPat					 ds		PatternpnVis					 ds.w	1txFont					 ds.w	1txFace					 ds.b	1									;txFace is unpacked byte but push as shortfiller					 ds.b	1txMode					 ds.w	1txSize					 ds.w	1spExtra					 ds.l	1fgColor					 ds.l	1bkColor					 ds.l	1colrBit					 ds.w	1patStretch				 ds.w	1picSave					 ds.l	1rgnSave					 ds.l	1polySave				 ds.l	1grafProcs				 ds.l	1sizeof					 EQU	108						ENDR;; *	This set of definitions "belongs" in Windows.; *	But, there is a circularity in the headers where Windows includes Controls and; *	Controls includes Windows. To break the circle, the information; *	needed by Controls is moved from Windows to Quickdraw.; ;;	Set STRICT_WINDOWS to 1 to make sure your code ;	doesn't access the window record directly;	IF &TYPE('STRICT_WINDOWS') = 'UNDEFINED' THEN	STRICT_WINDOWS: SET 0	ENDIF	IF STRICT_WINDOWS  THEN	ELSE	ENDIFkNoConstraint					EQU		0kVerticalConstraint				EQU		1kHorizontalConstraint			EQU		2;; *	Here ends the list of things that "belong" in Windows.; RGBColor 				RECORD	0red						 ds.w	1									;magnitude of red componentgreen					 ds.w	1									;magnitude of green componentblue					 ds.w	1									;magnitude of blue componentsizeof					 EQU	6						ENDRColorSpec 				RECORD	0value					 ds.w	1									;index or other valuergb						 ds		RGBColor							;true colorsizeof					 EQU	8						ENDRColorTable 				RECORD	0ctSeed					 ds.l	1									;unique identifier for tablectFlags					 ds.w	1									;high bit: 0 = PixMap; 1 = devicectSize					 ds.w	1									;number of entries in CTTablectTable					 ds.l	2									;array [0..0] of ColorSpecsizeof					 EQU	16						ENDRMatchRec 				RECORD	0red						 ds.w	1green					 ds.w	1blue					 ds.w	1matchData				 ds.l	1sizeof					 EQU	10						ENDRPixMap 					RECORD	0baseAddr				 ds.l	1									;pointer to pixelsrowBytes				 ds.w	1									;offset to next linebounds					 ds		Rect								;encloses bitmappmVersion				 ds.w	1									;pixMap version numberpackType				 ds.w	1									;defines packing formatpackSize				 ds.l	1									;length of pixel datahRes					 ds.l	1									;horiz. resolution (ppi)vRes					 ds.l	1									;vert. resolution (ppi)pixelType				 ds.w	1									;defines pixel typepixelSize				 ds.w	1									;# bits in pixelcmpCount				 ds.w	1									;# components in pixelcmpSize					 ds.w	1									;# bits per componentplaneBytes				 ds.l	1									;offset to next planepmTable					 ds.l	1									;color map for this pixMappmReserved				 ds.l	1									;for future use. MUST BE 0sizeof					 EQU	50						ENDRPixPat 					RECORD	0patType					 ds.w	1									;type of patternpatMap					 ds.l	1									;the pattern's pixMappatData					 ds.l	1									;pixmap's datapatXData				 ds.l	1									;expanded Pattern datapatXValid				 ds.w	1									;flags whether expanded Pattern validpatXMap					 ds.l	1									;Handle to expanded Pattern datapat1Data				 ds		Pattern							;old-Style pattern/RGB colorsizeof					 EQU	28						ENDRCCrsr 					RECORD	0crsrType				 ds.w	1									;type of cursorcrsrMap					 ds.l	1									;the cursor's pixmapcrsrData				 ds.l	1									;cursor's datacrsrXData				 ds.l	1									;expanded cursor datacrsrXValid				 ds.w	1									;depth of expanded data (0 if none)crsrXHandle				 ds.l	1									;future usecrsr1Data				 ds.l	8									;one-bit cursorcrsrMask				 ds.l	8									;cursor's maskcrsrHotSpot				 ds		Point								;cursor's hotspotcrsrXTable				 ds.l	1									;privatecrsrID					 ds.l	1									;privatesizeof					 EQU	96						ENDR	IF OLDROUTINELOCATIONS  THENCIcon 					RECORD	0iconPMap				 ds		PixMap								;the icon's pixMapiconMask				 ds		BitMap								;the icon's maskiconBMap				 ds		BitMap								;the icon's bitMapiconData				 ds.l	1									;the icon's dataiconMaskData			 ds.w	1									;icon's mask and BitMap datasizeof					 EQU	84						ENDR	ENDIFGammaTbl 				RECORD	0gVersion				 ds.w	1									;gamma version numbergType					 ds.w	1									;gamma data typegFormulaSize			 ds.w	1									;Formula data sizegChanCnt				 ds.w	1									;number of channels of datagDataCnt				 ds.w	1									;number of values/channelgDataWidth				 ds.w	1									;bits/corrected value (data packed to next larger byte size)gFormulaData			 ds.w	1									;data for formulas followed by gamma valuessizeof					 EQU	14						ENDRITab 					RECORD	0iTabSeed				 ds.l	1									;copy of CTSeed from source CTableiTabRes					 ds.w	1									;bits/channel resolution of iTableiTTable					 ds.b	1									;byte colortable index valuessizeof					 EQU	8						ENDRSProcRec 				RECORD	0nxtSrch					 ds.l	1									;SProcHndl Handle to next SProcRecsrchProc				 ds.l	1									;search procedure proc ptrsizeof					 EQU	8						ENDRCProcRec 				RECORD	0nxtComp					 ds.l	1									;CProcHndl Handle to next CProcReccompProc				 ds.l	1									;complement procedure proc ptrsizeof					 EQU	8						ENDRGDevice 				RECORD	0gdRefNum				 ds.w	1									;driver's unit numbergdID					 ds.w	1									;client ID for search procsgdType					 ds.w	1									;fixed/CLUT/directgdITable				 ds.l	1									;Handle to inverse lookup tablegdResPref				 ds.w	1									;preferred resolution of GDITablegdSearchProc			 ds.l	1									;search proc list headgdCompProc				 ds.l	1									;complement proc listgdFlags					 ds.w	1									;grafDevice flags wordgdPMap					 ds.l	1									;describing pixMapgdRefCon				 ds.l	1									;reference valuegdNextGD				 ds.l	1									;GDHandle Handle of next gDevicegdRect					 ds		Rect								; device's bounds in global coordinatesgdMode					 ds.l	1									;device's current modegdCCBytes				 ds.w	1									;depth of expanded cursor datagdCCDepth				 ds.w	1									;depth of expanded cursor datagdCCXData				 ds.l	1									;Handle to cursor's expanded datagdCCXMask				 ds.l	1									;Handle to cursor's expanded maskgdReserved				 ds.l	1									;future use. MUST BE 0sizeof					 EQU	62						ENDRGrafVars 				RECORD	0rgbOpColor				 ds		RGBColor							;color for addPin  subPin and averagergbHiliteColor			 ds		RGBColor							;color for hilitingpmFgColor				 ds.l	1									;palette Handle for foreground colorpmFgIndex				 ds.w	1									;index value for foregroundpmBkColor				 ds.l	1									;palette Handle for background colorpmBkIndex				 ds.w	1									;index value for backgroundpmFlags					 ds.w	1									;flags for Palette Managersizeof					 EQU	26						ENDRCQDProcs 				RECORD	0textProc				 ds.l	1lineProc				 ds.l	1rectProc				 ds.l	1rRectProc				 ds.l	1ovalProc				 ds.l	1arcProc					 ds.l	1polyProc				 ds.l	1rgnProc					 ds.l	1bitsProc				 ds.l	1commentProc				 ds.l	1txMeasProc				 ds.l	1getPicProc				 ds.l	1putPicProc				 ds.l	1opcodeProc				 ds.l	1									;fields added to QDProcsnewProc1				 ds.l	1newProc2				 ds.l	1newProc3				 ds.l	1newProc4				 ds.l	1newProc5				 ds.l	1newProc6				 ds.l	1sizeof					 EQU	80						ENDRCGrafPort 				RECORD	0device					 ds.w	1portPixMap				 ds.l	1									;port's pixel mapportVersion				 ds.w	1									;high 2 bits always setgrafVars				 ds.l	1									;Handle to more fieldschExtra					 ds.w	1									;character extrapnLocHFrac				 ds.w	1									;pen fractionportRect				 ds		RectvisRgn					 ds.l	1clipRgn					 ds.l	1bkPixPat				 ds.l	1									;background patternrgbFgColor				 ds		RGBColor							;RGB components of fgrgbBkColor				 ds		RGBColor							;RGB components of bkpnLoc					 ds		PointpnSize					 ds		PointpnMode					 ds.w	1pnPixPat				 ds.l	1									;pen's patternfillPixPat				 ds.l	1									;fill patternpnVis					 ds.w	1txFont					 ds.w	1txFace					 ds.b	1									;txFace is unpacked byte  push as shortfiller					 ds.b	1txMode					 ds.w	1txSize					 ds.w	1spExtra					 ds.l	1fgColor					 ds.l	1bkColor					 ds.l	1colrBit					 ds.w	1patStretch				 ds.w	1picSave					 ds.l	1rgnSave					 ds.l	1polySave				 ds.l	1grafProcs				 ds.l	1sizeof					 EQU	108						ENDRReqListRec 				RECORD	0reqLSize				 ds.w	1									;request list sizereqLData				 ds.w	1									;request list datasizeof					 EQU	4						ENDROpenCPicParams 			RECORD	0srcRect					 ds		RecthRes					 ds.l	1vRes					 ds.l	1version					 ds.w	1reserved1				 ds.w	1reserved2				 ds.l	1sizeof					 EQU	24						ENDRQDGlobals 				RECORD	0privates				 ds.b	76randSeed				 ds.l	1screenBits				 ds		BitMaparrow					 ds		CursordkGray					 ds		PatternltGray					 ds		Patterngray					 ds		Patternblack					 ds		Patternwhite					 ds		PatternthePort					 ds.l	1sizeof					 EQU	206						ENDR	IF GENERATING68K THEN		_InitGraf:	OPWORD	$A86E	ELSE		IMPORT	InitGraf	ENDIF	IF GENERATING68K THEN		_OpenPort:	OPWORD	$A86F	ELSE		IMPORT	OpenPort	ENDIF	IF GENERATING68K THEN		_InitPort:	OPWORD	$A86D	ELSE		IMPORT	InitPort	ENDIF	IF GENERATING68K THEN		_ClosePort:	OPWORD	$A87D	ELSE		IMPORT	ClosePort	ENDIF	IF GENERATING68K THEN		_SetPort:	OPWORD	$A873	ELSE		IMPORT	SetPort	ENDIF	IF GENERATING68K THEN		_GetPort:	OPWORD	$A874	ELSE		IMPORT	GetPort	ENDIF	IF GENERATING68K THEN		_GrafDevice:	OPWORD	$A872	ELSE		IMPORT	GrafDevice	ENDIF	IF GENERATING68K THEN		_SetPortBits:	OPWORD	$A875	ELSE		IMPORT	SetPortBits	ENDIF	IF GENERATING68K THEN		_PortSize:	OPWORD	$A876	ELSE		IMPORT	PortSize	ENDIF	IF GENERATING68K THEN		_MovePortTo:	OPWORD	$A877	ELSE		IMPORT	MovePortTo	ENDIF	IF GENERATING68K THEN		_SetOrigin:	OPWORD	$A878	ELSE		IMPORT	SetOrigin	ENDIF	IF GENERATING68K THEN		_SetClip:	OPWORD	$A879	ELSE		IMPORT	SetClip	ENDIF	IF GENERATING68K THEN		_GetClip:	OPWORD	$A87A	ELSE		IMPORT	GetClip	ENDIF	IF GENERATING68K THEN		_ClipRect:	OPWORD	$A87B	ELSE		IMPORT	ClipRect	ENDIF	IF GENERATING68K THEN		_BackPat:	OPWORD	$A87C	ELSE		IMPORT	BackPat	ENDIF	IF GENERATING68K THEN		_InitCursor:	OPWORD	$A850	ELSE		IMPORT	InitCursor	ENDIF	IF GENERATING68K THEN		_SetCursor:	OPWORD	$A851	ELSE		IMPORT	SetCursor	ENDIF	IF GENERATING68K THEN		_HideCursor:	OPWORD	$A852	ELSE		IMPORT	HideCursor	ENDIF	IF GENERATING68K THEN		_ShowCursor:	OPWORD	$A853	ELSE		IMPORT	ShowCursor	ENDIF	IF GENERATING68K THEN		_ObscureCursor:	OPWORD	$A856	ELSE		IMPORT	ObscureCursor	ENDIF	IF GENERATING68K THEN		_HidePen:	OPWORD	$A896	ELSE		IMPORT	HidePen	ENDIF	IF GENERATING68K THEN		_ShowPen:	OPWORD	$A897	ELSE		IMPORT	ShowPen	ENDIF	IF GENERATING68K THEN		_GetPen:	OPWORD	$A89A	ELSE		IMPORT	GetPen	ENDIF	IF GENERATING68K THEN		_GetPenState:	OPWORD	$A898	ELSE		IMPORT	GetPenState	ENDIF	IF GENERATING68K THEN		_SetPenState:	OPWORD	$A899	ELSE		IMPORT	SetPenState	ENDIF	IF GENERATING68K THEN		_PenSize:	OPWORD	$A89B	ELSE		IMPORT	PenSize	ENDIF	IF GENERATING68K THEN		_PenMode:	OPWORD	$A89C	ELSE		IMPORT	PenMode	ENDIF	IF GENERATING68K THEN		_PenPat:	OPWORD	$A89D	ELSE		IMPORT	PenPat	ENDIF	IF GENERATING68K THEN		_PenNormal:	OPWORD	$A89E	ELSE		IMPORT	PenNormal	ENDIF	IF GENERATING68K THEN		_MoveTo:	OPWORD	$A893	ELSE		IMPORT	MoveTo	ENDIF	IF GENERATING68K THEN		_Move:	OPWORD	$A894	ELSE		IMPORT	Move	ENDIF	IF GENERATING68K THEN		_LineTo:	OPWORD	$A891	ELSE		IMPORT	LineTo	ENDIF	IF GENERATING68K THEN		_Line:	OPWORD	$A892	ELSE		IMPORT	Line	ENDIF	IF GENERATING68K THEN		_ForeColor:	OPWORD	$A862	ELSE		IMPORT	ForeColor	ENDIF	IF GENERATING68K THEN		_BackColor:	OPWORD	$A863	ELSE		IMPORT	BackColor	ENDIF	IF GENERATING68K THEN		_ColorBit:	OPWORD	$A864	ELSE		IMPORT	ColorBit	ENDIF	IF GENERATING68K THEN		_SetRect:	OPWORD	$A8A7	ELSE		IMPORT	SetRect	ENDIF	IF GENERATING68K THEN		_OffsetRect:	OPWORD	$A8A8	ELSE		IMPORT	OffsetRect	ENDIF	IF GENERATING68K THEN		_InsetRect:	OPWORD	$A8A9	ELSE		IMPORT	InsetRect	ENDIF	IF GENERATING68K THEN		_SectRect:	OPWORD	$A8AA	ELSE		IMPORT	SectRect	ENDIF	IF GENERATING68K THEN		_UnionRect:	OPWORD	$A8AB	ELSE		IMPORT	UnionRect	ENDIF	IF GENERATING68K THEN		_EqualRect:	OPWORD	$A8A6	ELSE		IMPORT	EqualRect	ENDIF	IF GENERATING68K THEN		_EmptyRect:	OPWORD	$A8AE	ELSE		IMPORT	EmptyRect	ENDIF	IF GENERATING68K THEN		_FrameRect:	OPWORD	$A8A1	ELSE		IMPORT	FrameRect	ENDIF	IF GENERATING68K THEN		_PaintRect:	OPWORD	$A8A2	ELSE		IMPORT	PaintRect	ENDIF	IF GENERATING68K THEN		_EraseRect:	OPWORD	$A8A3	ELSE		IMPORT	EraseRect	ENDIF	IF GENERATING68K THEN		_InvertRect:	OPWORD	$A8A4	ELSE		IMPORT	InvertRect	ENDIF	IF GENERATING68K THEN		_FillRect:	OPWORD	$A8A5	ELSE		IMPORT	FillRect	ENDIF	IF GENERATING68K THEN		_FrameOval:	OPWORD	$A8B7	ELSE		IMPORT	FrameOval	ENDIF	IF GENERATING68K THEN		_PaintOval:	OPWORD	$A8B8	ELSE		IMPORT	PaintOval	ENDIF	IF GENERATING68K THEN		_EraseOval:	OPWORD	$A8B9	ELSE		IMPORT	EraseOval	ENDIF	IF GENERATING68K THEN		_InvertOval:	OPWORD	$A8BA	ELSE		IMPORT	InvertOval	ENDIF	IF GENERATING68K THEN		_FillOval:	OPWORD	$A8BB	ELSE		IMPORT	FillOval	ENDIF	IF GENERATING68K THEN		_FrameRoundRect:	OPWORD	$A8B0	ELSE		IMPORT	FrameRoundRect	ENDIF	IF GENERATING68K THEN		_PaintRoundRect:	OPWORD	$A8B1	ELSE		IMPORT	PaintRoundRect	ENDIF	IF GENERATING68K THEN		_EraseRoundRect:	OPWORD	$A8B2	ELSE		IMPORT	EraseRoundRect	ENDIF	IF GENERATING68K THEN		_InvertRoundRect:	OPWORD	$A8B3	ELSE		IMPORT	InvertRoundRect	ENDIF	IF GENERATING68K THEN		_FillRoundRect:	OPWORD	$A8B4	ELSE		IMPORT	FillRoundRect	ENDIF	IF GENERATING68K THEN		_FrameArc:	OPWORD	$A8BE	ELSE		IMPORT	FrameArc	ENDIF	IF GENERATING68K THEN		_PaintArc:	OPWORD	$A8BF	ELSE		IMPORT	PaintArc	ENDIF	IF GENERATING68K THEN		_EraseArc:	OPWORD	$A8C0	ELSE		IMPORT	EraseArc	ENDIF	IF GENERATING68K THEN		_InvertArc:	OPWORD	$A8C1	ELSE		IMPORT	InvertArc	ENDIF	IF GENERATING68K THEN		_FillArc:	OPWORD	$A8C2	ELSE		IMPORT	FillArc	ENDIF	IF GENERATING68K THEN		_NewRgn:	OPWORD	$A8D8	ELSE		IMPORT	NewRgn	ENDIF	IF GENERATING68K THEN		_OpenRgn:	OPWORD	$A8DA	ELSE		IMPORT	OpenRgn	ENDIF	IF GENERATING68K THEN		_CloseRgn:	OPWORD	$A8DB	ELSE		IMPORT	CloseRgn	ENDIF	IF ¬ SystemSevenOrLater  THEN	ENDIF	IF GENERATING68K THEN		_BitMapToRegion:	OPWORD	$A8D7	ELSE		IMPORT	BitMapToRegion	ENDIF	IF GENERATING68K THEN		_DisposeRgn:	OPWORD	$A8D9	ELSE		IMPORT	DisposeRgn	ENDIF	IF GENERATING68K THEN		_CopyRgn:	OPWORD	$A8DC	ELSE		IMPORT	CopyRgn	ENDIF	IF GENERATING68K THEN		_SetEmptyRgn:	OPWORD	$A8DD	ELSE		IMPORT	SetEmptyRgn	ENDIF	IF GENERATING68K THEN		_SetRectRgn:	OPWORD	$A8DE	ELSE		IMPORT	SetRectRgn	ENDIF	IF GENERATING68K THEN		_RectRgn:	OPWORD	$A8DF	ELSE		IMPORT	RectRgn	ENDIF	IF GENERATING68K THEN		_OffsetRgn:	OPWORD	$A8E0	ELSE		IMPORT	OffsetRgn	ENDIF	IF GENERATING68K THEN		_InsetRgn:	OPWORD	$A8E1	ELSE		IMPORT	InsetRgn	ENDIF	IF GENERATING68K THEN		_SectRgn:	OPWORD	$A8E4	ELSE		IMPORT	SectRgn	ENDIF	IF GENERATING68K THEN		_UnionRgn:	OPWORD	$A8E5	ELSE		IMPORT	UnionRgn	ENDIF	IF GENERATING68K THEN		_DiffRgn:	OPWORD	$A8E6	ELSE		IMPORT	DiffRgn	ENDIF	IF GENERATING68K THEN		_XorRgn:	OPWORD	$A8E7	ELSE		IMPORT	XorRgn	ENDIF	IF GENERATING68K THEN		_RectInRgn:	OPWORD	$A8E9	ELSE		IMPORT	RectInRgn	ENDIF	IF GENERATING68K THEN		_EqualRgn:	OPWORD	$A8E3	ELSE		IMPORT	EqualRgn	ENDIF	IF GENERATING68K THEN		_EmptyRgn:	OPWORD	$A8E2	ELSE		IMPORT	EmptyRgn	ENDIF	IF GENERATING68K THEN		_FrameRgn:	OPWORD	$A8D2	ELSE		IMPORT	FrameRgn	ENDIF	IF GENERATING68K THEN		_PaintRgn:	OPWORD	$A8D3	ELSE		IMPORT	PaintRgn	ENDIF	IF GENERATING68K THEN		_EraseRgn:	OPWORD	$A8D4	ELSE		IMPORT	EraseRgn	ENDIF	IF GENERATING68K THEN		_InvertRgn:	OPWORD	$A8D5	ELSE		IMPORT	InvertRgn	ENDIF	IF GENERATING68K THEN		_FillRgn:	OPWORD	$A8D6	ELSE		IMPORT	FillRgn	ENDIF	IF GENERATING68K THEN		_ScrollRect:	OPWORD	$A8EF	ELSE		IMPORT	ScrollRect	ENDIF	IF GENERATING68K THEN		_CopyBits:	OPWORD	$A8EC	ELSE		IMPORT	CopyBits	ENDIF	IF GENERATING68K THEN		_SeedFill:	OPWORD	$A839	ELSE		IMPORT	SeedFill	ENDIF	IF GENERATING68K THEN		_CalcMask:	OPWORD	$A838	ELSE		IMPORT	CalcMask	ENDIF	IF GENERATING68K THEN		_CopyMask:	OPWORD	$A817	ELSE		IMPORT	CopyMask	ENDIF	IF GENERATING68K THEN		_OpenPicture:	OPWORD	$A8F3	ELSE		IMPORT	OpenPicture	ENDIF	IF GENERATING68K THEN		_PicComment:	OPWORD	$A8F2	ELSE		IMPORT	PicComment	ENDIF	IF GENERATING68K THEN		_ClosePicture:	OPWORD	$A8F4	ELSE		IMPORT	ClosePicture	ENDIF	IF GENERATING68K THEN		_DrawPicture:	OPWORD	$A8F6	ELSE		IMPORT	DrawPicture	ENDIF	IF GENERATING68K THEN		_KillPicture:	OPWORD	$A8F5	ELSE		IMPORT	KillPicture	ENDIF	IF GENERATING68K THEN		_OpenPoly:	OPWORD	$A8CB	ELSE		IMPORT	OpenPoly	ENDIF	IF GENERATING68K THEN		_ClosePoly:	OPWORD	$A8CC	ELSE		IMPORT	ClosePoly	ENDIF	IF GENERATING68K THEN		_KillPoly:	OPWORD	$A8CD	ELSE		IMPORT	KillPoly	ENDIF	IF GENERATING68K THEN		_OffsetPoly:	OPWORD	$A8CE	ELSE		IMPORT	OffsetPoly	ENDIF	IF GENERATING68K THEN		_FramePoly:	OPWORD	$A8C6	ELSE		IMPORT	FramePoly	ENDIF	IF GENERATING68K THEN		_PaintPoly:	OPWORD	$A8C7	ELSE		IMPORT	PaintPoly	ENDIF	IF GENERATING68K THEN		_ErasePoly:	OPWORD	$A8C8	ELSE		IMPORT	ErasePoly	ENDIF	IF GENERATING68K THEN		_InvertPoly:	OPWORD	$A8C9	ELSE		IMPORT	InvertPoly	ENDIF	IF GENERATING68K THEN		_FillPoly:	OPWORD	$A8CA	ELSE		IMPORT	FillPoly	ENDIF	IF GENERATING68K THEN		_SetPt:	OPWORD	$A880	ELSE		IMPORT	SetPt	ENDIF	IF GENERATING68K THEN		_LocalToGlobal:	OPWORD	$A870	ELSE		IMPORT	LocalToGlobal	ENDIF	IF GENERATING68K THEN		_GlobalToLocal:	OPWORD	$A871	ELSE		IMPORT	GlobalToLocal	ENDIF	IF GENERATING68K THEN		_Random:	OPWORD	$A861	ELSE		IMPORT	Random	ENDIF	IF GENERATING68K THEN		_StuffHex:	OPWORD	$A866	ELSE		IMPORT	StuffHex	ENDIF	IF GENERATING68K THEN		_GetPixel:	OPWORD	$A865	ELSE		IMPORT	GetPixel	ENDIF	IF GENERATING68K THEN		_ScalePt:	OPWORD	$A8F8	ELSE		IMPORT	ScalePt	ENDIF	IF GENERATING68K THEN		_MapPt:	OPWORD	$A8F9	ELSE		IMPORT	MapPt	ENDIF	IF GENERATING68K THEN		_MapRect:	OPWORD	$A8FA	ELSE		IMPORT	MapRect	ENDIF	IF GENERATING68K THEN		_MapRgn:	OPWORD	$A8FB	ELSE		IMPORT	MapRgn	ENDIF	IF GENERATING68K THEN		_MapPoly:	OPWORD	$A8FC	ELSE		IMPORT	MapPoly	ENDIF	IF GENERATING68K THEN		_SetStdProcs:	OPWORD	$A8EA	ELSE		IMPORT	SetStdProcs	ENDIF	IF GENERATING68K THEN		_StdRect:	OPWORD	$A8A0	ELSE		IMPORT	StdRect	ENDIF	IF GENERATING68K THEN		_StdRRect:	OPWORD	$A8AF	ELSE		IMPORT	StdRRect	ENDIF	IF GENERATING68K THEN		_StdOval:	OPWORD	$A8B6	ELSE		IMPORT	StdOval	ENDIF	IF GENERATING68K THEN		_StdArc:	OPWORD	$A8BD	ELSE		IMPORT	StdArc	ENDIF	IF GENERATING68K THEN		_StdPoly:	OPWORD	$A8C5	ELSE		IMPORT	StdPoly	ENDIF	IF GENERATING68K THEN		_StdRgn:	OPWORD	$A8D1	ELSE		IMPORT	StdRgn	ENDIF	IF GENERATING68K THEN		_StdBits:	OPWORD	$A8EB	ELSE		IMPORT	StdBits	ENDIF	IF GENERATING68K THEN		_StdComment:	OPWORD	$A8F1	ELSE		IMPORT	StdComment	ENDIF	IF GENERATING68K THEN		_StdGetPic:	OPWORD	$A8EE	ELSE		IMPORT	StdGetPic	ENDIF	IF GENERATING68K THEN		_StdPutPic:	OPWORD	$A8F0	ELSE		IMPORT	StdPutPic	ENDIF	IF GENERATING68K THEN		_AddPt:	OPWORD	$A87E	ELSE		IMPORT	AddPt	ENDIF	IF GENERATING68K THEN		_EqualPt:	OPWORD	$A881	ELSE		IMPORT	EqualPt	ENDIF	IF GENERATING68K THEN		_PtInRect:	OPWORD	$A8AD	ELSE		IMPORT	PtInRect	ENDIF	IF GENERATING68K THEN		_Pt2Rect:	OPWORD	$A8AC	ELSE		IMPORT	Pt2Rect	ENDIF	IF GENERATING68K THEN		_PtToAngle:	OPWORD	$A8C3	ELSE		IMPORT	PtToAngle	ENDIF	IF GENERATING68K THEN		_SubPt:	OPWORD	$A87F	ELSE		IMPORT	SubPt	ENDIF	IF GENERATING68K THEN		_PtInRgn:	OPWORD	$A8E8	ELSE		IMPORT	PtInRgn	ENDIF	IF GENERATING68K THEN		_StdLine:	OPWORD	$A890	ELSE		IMPORT	StdLine	ENDIF	IF GENERATING68K THEN		_OpenCPort:	OPWORD	$AA00	ELSE		IMPORT	OpenCPort	ENDIF	IF GENERATING68K THEN		_InitCPort:	OPWORD	$AA01	ELSE		IMPORT	InitCPort	ENDIF	IF GENERATING68K THEN		_CloseCPort:	OPWORD	$A87D	ELSE		IMPORT	CloseCPort	ENDIF	IF GENERATING68K THEN		_NewPixMap:	OPWORD	$AA03	ELSE		IMPORT	NewPixMap	ENDIF	IF GENERATING68K THEN		_DisposePixMap:	OPWORD	$AA04	ELSE		IMPORT	DisposePixMap	ENDIF	IF GENERATING68K THEN		_CopyPixMap:	OPWORD	$AA05	ELSE		IMPORT	CopyPixMap	ENDIF	IF GENERATING68K THEN		_NewPixPat:	OPWORD	$AA07	ELSE		IMPORT	NewPixPat	ENDIF	IF GENERATING68K THEN		_DisposePixPat:	OPWORD	$AA08	ELSE		IMPORT	DisposePixPat	ENDIF	IF GENERATING68K THEN		_CopyPixPat:	OPWORD	$AA09	ELSE		IMPORT	CopyPixPat	ENDIF	IF GENERATING68K THEN		_PenPixPat:	OPWORD	$AA0A	ELSE		IMPORT	PenPixPat	ENDIF	IF GENERATING68K THEN		_BackPixPat:	OPWORD	$AA0B	ELSE		IMPORT	BackPixPat	ENDIF	IF GENERATING68K THEN		_GetPixPat:	OPWORD	$AA0C	ELSE		IMPORT	GetPixPat	ENDIF	IF GENERATING68K THEN		_MakeRGBPat:	OPWORD	$AA0D	ELSE		IMPORT	MakeRGBPat	ENDIF	IF GENERATING68K THEN		_FillCRect:	OPWORD	$AA0E	ELSE		IMPORT	FillCRect	ENDIF	IF GENERATING68K THEN		_FillCOval:	OPWORD	$AA0F	ELSE		IMPORT	FillCOval	ENDIF	IF GENERATING68K THEN		_FillCRoundRect:	OPWORD	$AA10	ELSE		IMPORT	FillCRoundRect	ENDIF	IF GENERATING68K THEN		_FillCArc:	OPWORD	$AA11	ELSE		IMPORT	FillCArc	ENDIF	IF GENERATING68K THEN		_FillCRgn:	OPWORD	$AA12	ELSE		IMPORT	FillCRgn	ENDIF	IF GENERATING68K THEN		_FillCPoly:	OPWORD	$AA13	ELSE		IMPORT	FillCPoly	ENDIF	IF GENERATING68K THEN		_RGBForeColor:	OPWORD	$AA14	ELSE		IMPORT	RGBForeColor	ENDIF	IF GENERATING68K THEN		_RGBBackColor:	OPWORD	$AA15	ELSE		IMPORT	RGBBackColor	ENDIF	IF GENERATING68K THEN		_SetCPixel:	OPWORD	$AA16	ELSE		IMPORT	SetCPixel	ENDIF	IF GENERATING68K THEN		_SetPortPix:	OPWORD	$AA06	ELSE		IMPORT	SetPortPix	ENDIF	IF GENERATING68K THEN		_GetCPixel:	OPWORD	$AA17	ELSE		IMPORT	GetCPixel	ENDIF	IF GENERATING68K THEN		_GetForeColor:	OPWORD	$AA19	ELSE		IMPORT	GetForeColor	ENDIF	IF GENERATING68K THEN		_GetBackColor:	OPWORD	$AA1A	ELSE		IMPORT	GetBackColor	ENDIF	IF GENERATING68K THEN		_SeedCFill:	OPWORD	$AA50	ELSE		IMPORT	SeedCFill	ENDIF	IF GENERATING68K THEN		_CalcCMask:	OPWORD	$AA4F	ELSE		IMPORT	CalcCMask	ENDIF	IF GENERATING68K THEN		_OpenCPicture:	OPWORD	$AA20	ELSE		IMPORT	OpenCPicture	ENDIF	IF GENERATING68K THEN		_OpColor:	OPWORD	$AA21	ELSE		IMPORT	OpColor	ENDIF	IF GENERATING68K THEN		_HiliteColor:	OPWORD	$AA22	ELSE		IMPORT	HiliteColor	ENDIF	IF GENERATING68K THEN		_DisposeCTable:	OPWORD	$AA24	ELSE		IMPORT	DisposeCTable	ENDIF	IF GENERATING68K THEN		_GetCTable:	OPWORD	$AA18	ELSE		IMPORT	GetCTable	ENDIF	IF GENERATING68K THEN		_GetCCursor:	OPWORD	$AA1B	ELSE		IMPORT	GetCCursor	ENDIF	IF GENERATING68K THEN		_SetCCursor:	OPWORD	$AA1C	ELSE		IMPORT	SetCCursor	ENDIF	IF GENERATING68K THEN		_AllocCursor:	OPWORD	$AA1D	ELSE		IMPORT	AllocCursor	ENDIF	IF GENERATING68K THEN		_DisposeCCursor:	OPWORD	$AA26	ELSE		IMPORT	DisposeCCursor	ENDIF	IF OLDROUTINELOCATIONS  THEN	IF GENERATING68K THEN		_GetCIcon:	OPWORD	$AA1E	ELSE		IMPORT	GetCIcon	ENDIF	IF GENERATING68K THEN		_PlotCIcon:	OPWORD	$AA1F	ELSE		IMPORT	PlotCIcon	ENDIF	IF GENERATING68K THEN		_DisposeCIcon:	OPWORD	$AA25	ELSE		IMPORT	DisposeCIcon	ENDIF	ENDIF	IF GENERATING68K THEN		_SetStdCProcs:	OPWORD	$AA4E	ELSE		IMPORT	SetStdCProcs	ENDIF	IF GENERATING68K THEN		_GetMaxDevice:	OPWORD	$AA27	ELSE		IMPORT	GetMaxDevice	ENDIF	IF GENERATING68K THEN		_GetCTSeed:	OPWORD	$AA28	ELSE		IMPORT	GetCTSeed	ENDIF	IF GENERATING68K THEN		_GetDeviceList:	OPWORD	$AA29	ELSE		IMPORT	GetDeviceList	ENDIF	IF GENERATING68K THEN		_GetMainDevice:	OPWORD	$AA2A	ELSE		IMPORT	GetMainDevice	ENDIF	IF GENERATING68K THEN		_GetNextDevice:	OPWORD	$AA2B	ELSE		IMPORT	GetNextDevice	ENDIF	IF GENERATING68K THEN		_TestDeviceAttribute:	OPWORD	$AA2C	ELSE		IMPORT	TestDeviceAttribute	ENDIF	IF GENERATING68K THEN		_SetDeviceAttribute:	OPWORD	$AA2D	ELSE		IMPORT	SetDeviceAttribute	ENDIF	IF GENERATING68K THEN		_InitGDevice:	OPWORD	$AA2E	ELSE		IMPORT	InitGDevice	ENDIF	IF GENERATING68K THEN		_NewGDevice:	OPWORD	$AA2F	ELSE		IMPORT	NewGDevice	ENDIF	IF GENERATING68K THEN		_DisposeGDevice:	OPWORD	$AA30	ELSE		IMPORT	DisposeGDevice	ENDIF	IF GENERATING68K THEN		_SetGDevice:	OPWORD	$AA31	ELSE		IMPORT	SetGDevice	ENDIF	IF GENERATING68K THEN		_GetGDevice:	OPWORD	$AA32	ELSE		IMPORT	GetGDevice	ENDIF	IF GENERATING68K THEN		_Color2Index:	OPWORD	$AA33	ELSE		IMPORT	Color2Index	ENDIF	IF GENERATING68K THEN		_Index2Color:	OPWORD	$AA34	ELSE		IMPORT	Index2Color	ENDIF	IF GENERATING68K THEN		_InvertColor:	OPWORD	$AA35	ELSE		IMPORT	InvertColor	ENDIF	IF GENERATING68K THEN		_RealColor:	OPWORD	$AA36	ELSE		IMPORT	RealColor	ENDIF	IF GENERATING68K THEN		_GetSubTable:	OPWORD	$AA37	ELSE		IMPORT	GetSubTable	ENDIF	IF GENERATING68K THEN		_MakeITable:	OPWORD	$AA39	ELSE		IMPORT	MakeITable	ENDIF	IF GENERATING68K THEN		_AddSearch:	OPWORD	$AA3A	ELSE		IMPORT	AddSearch	ENDIF	IF GENERATING68K THEN		_AddComp:	OPWORD	$AA3B	ELSE		IMPORT	AddComp	ENDIF	IF GENERATING68K THEN		_DelSearch:	OPWORD	$AA4C	ELSE		IMPORT	DelSearch	ENDIF	IF GENERATING68K THEN		_DelComp:	OPWORD	$AA4D	ELSE		IMPORT	DelComp	ENDIF	IF GENERATING68K THEN		_SetClientID:	OPWORD	$AA3C	ELSE		IMPORT	SetClientID	ENDIF	IF GENERATING68K THEN		_ProtectEntry:	OPWORD	$AA3D	ELSE		IMPORT	ProtectEntry	ENDIF	IF GENERATING68K THEN		_ReserveEntry:	OPWORD	$AA3E	ELSE		IMPORT	ReserveEntry	ENDIF	IF GENERATING68K THEN		_SetEntries:	OPWORD	$AA3F	ELSE		IMPORT	SetEntries	ENDIF	IF GENERATING68K THEN		_SaveEntries:	OPWORD	$AA49	ELSE		IMPORT	SaveEntries	ENDIF	IF GENERATING68K THEN		_RestoreEntries:	OPWORD	$AA4A	ELSE		IMPORT	RestoreEntries	ENDIF	IF GENERATING68K THEN		_QDError:	OPWORD	$AA40	ELSE		IMPORT	QDError	ENDIF	IF GENERATING68K THEN		_CopyDeepMask:	OPWORD	$AA51	ELSE		IMPORT	CopyDeepMask	ENDIF	IF GENERATING68K THEN		_DeviceLoop:	OPWORD	$ABCA	ELSE		IMPORT	DeviceLoop	ENDIF	IF GENERATING68K THEN		_GetMaskTable:	OPWORD	$A836	ELSE		IMPORT	GetMaskTable	ENDIF	IF OLDROUTINENAMES  THEN	ENDIF	ENDIF ; __QUICKDRAW__