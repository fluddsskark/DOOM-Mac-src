;;	File:		Movies.a;;	Copyright:	© 1984-1994 by Apple Computer, Inc.;				All rights reserved.;;	Version:	Universal Interfaces 2.0a3  ETO #16, MPW prerelease.  Friday, November 11, 1994. ;;	Bugs?:		If you find a problem with this file, send the file and version;				information (from above) and the problem description to:;;					Internet:	apple.bugs@applelink.apple.com;					AppleLink:	APPLE.BUGS;;	IF &TYPE('__MOVIES__') = 'UNDEFINED' THEN__MOVIES__ SET 1	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN	include 'Quickdraw.a'	ENDIF;		include 'Types.a'											;;			include 'ConditionalMacros.a'							;;		include 'MixedMode.a'										;;		include 'QuickdrawText.a'									;	IF &TYPE('__ALIASES__') = 'UNDEFINED' THEN	include 'Aliases.a'	ENDIF;		include 'AppleTalk.a'										;;			include 'OSUtils.a'									;;				include 'Memory.a'									;;		include 'Files.a'											;	IF &TYPE('__EVENTS__') = 'UNDEFINED' THEN	include 'Events.a'	ENDIF	IF &TYPE('__MENUS__') = 'UNDEFINED' THEN	include 'Menus.a'	ENDIF	IF &TYPE('__COMPONENTS__') = 'UNDEFINED' THEN	include 'Components.a'	ENDIF	IF &TYPE('__IMAGECOMPRESSION__') = 'UNDEFINED' THEN	include 'ImageCompression.a'	ENDIF;		include 'QDOffscreen.a'									;;			include 'Errors.a'										;;		include 'Windows.a'										;;			include 'Controls.a'									;;		include 'StandardFile.a'									;;			include 'Dialogs.a'									;;				include 'TextEdit.a'								;MovieFileType					EQU		'MooV'MediaHandlerType				EQU		'mhlr'DataHandlerType					EQU		'dhlr'VideoMediaType					EQU		'vide'SoundMediaType					EQU		'soun'TextMediaType					EQU		'text'BaseMediaType					EQU		'gnrc'MPEGMediaType					EQU		'MPEG'MusicMediaType					EQU		'musi'TimeCodeMediaType				EQU		'tmcd'HandleDataHandlerSubType		EQU		'hndl'VisualMediaCharacteristic		EQU		'eyes'AudioMediaCharacteristic		EQU		'ears'DoTheRightThing					EQU		0MovieRecord 			RECORD	0data					 ds.l	1sizeof					 EQU	4						ENDRTrackRecord 			RECORD	0data					 ds.l	1sizeof					 EQU	4						ENDRMediaRecord 			RECORD	0data					 ds.l	1sizeof					 EQU	4						ENDRUserDataRecord 			RECORD	0data					 ds.l	1sizeof					 EQU	4						ENDRTrackEditStateRecord 	RECORD	0data					 ds.l	1sizeof					 EQU	4						ENDRMovieEditStateRecord 	RECORD	0data					 ds.l	1sizeof					 EQU	4						ENDRSampleDescription 		RECORD	0descSize				 ds.l	1dataFormat				 ds.l	1resvd1					 ds.l	1resvd2					 ds.w	1dataRefIndex			 ds.w	1sizeof					 EQU	16						ENDRSoundDescription 		RECORD	0descSize				 ds.l	1									; total size of SoundDescription including extra data dataFormat				 ds.l	1									;  resvd1					 ds.l	1									; reserved for apple use resvd2					 ds.w	1dataRefIndex			 ds.w	1version					 ds.w	1									; which version is this data revlevel				 ds.w	1									; what version of that codec did this vendor					 ds.l	1									; whose  codec compressed this data numChannels				 ds.w	1									; number of channels of sound sampleSize				 ds.w	1									; number of bits per sample compressionID			 ds.w	1									; sound compression used, 0 if none packetSize				 ds.w	1									; packet size for compression, 0 if no compression sampleRate				 ds.l	1									; sample rate sound is captured at sizeof					 EQU	36						ENDRTextDescription 		RECORD	0descSize				 ds.l	1									; Total size of TextDescriptiondataFormat				 ds.l	1									; 'text'resvd1					 ds.l	1resvd2					 ds.w	1dataRefIndex			 ds.w	1displayFlags			 ds.l	1									; see enum below for flag valuestextJustification		 ds.l	1									; Can be: teCenter,teFlush -Default,-Right,-LeftbgColor					 ds		RGBColor							; Background colordefaultTextBox			 ds		Rect								; Location to place the text within the track boundsdefaultStyle			 ds		ScrpSTElement						; Default style (struct defined in TextEdit.h)defaultFontName			 ds.b	1									; Font Name (pascal string - struct extended to fit) sizeof					 EQU	60						ENDR;--------------------------;  Music Sample Description;--------------------------MusicDescription 		RECORD	0descSize				 ds.l	1dataFormat				 ds.l	1									; 'musi' resvd1					 ds.l	1resvd2					 ds.w	1dataRefIndex			 ds.w	1musicFlags				 ds.l	1headerData				 ds.l	1									; variable size! sizeof					 EQU	24						ENDRdfDontDisplay					EQU		1 << 0				; Don't display the textdfDontAutoScale					EQU		1 << 1				; Don't scale text as track bounds grows or shrinksdfClipToTextBox					EQU		1 << 2				; Clip update to the textboxdfUseMovieBGColor				EQU		1 << 3				; Set text background to movie's background colordfShrinkTextBoxToFit			EQU		1 << 4				; Compute minimum box to fit the sampledfScrollIn						EQU		1 << 5				; Scroll text in until last of text is in view dfScrollOut						EQU		1 << 6				; Scroll text out until last of text is gone (if both set, scroll in then out)dfHorizScroll					EQU		1 << 7				; Scroll text horizontally (otherwise it's vertical)dfReverseScroll					EQU		1 << 8				; vert: scroll down rather than up; horiz: scroll backwards (justfication dependent)dfContinuousScroll				EQU		1 << 9				; new samples cause previous samples to scroll out dfFlowHoriz						EQU		1 << 10				; horiz scroll text flows in textbox rather than extend to right dfDropShadow					EQU		1 << 12				; display text with a drop shadow dfAntiAlias						EQU		1 << 13				; attempt to display text anti aliaseddfKeyedText						EQU		1 << 14				; key the text over backgrounddfInverseHilite					EQU		1 << 15				; Use inverse hiliting rather than using hilite colorsearchTextDontGoToFoundTime		EQU		1 << 16searchTextDontHiliteFoundText	EQU		1 << 17searchTextOneTrackOnly			EQU		1 << 18searchTextEnabledTracksOnly		EQU		1 << 19; progress messages movieProgressOpen				EQU		0movieProgressUpdatePercent		EQU		1movieProgressClose				EQU		2; progress operations progressOpFlatten				EQU		1progressOpInsertTrackSegment	EQU		2progressOpInsertMovieSegment	EQU		3progressOpPaste					EQU		4progressOpAddMovieSelection		EQU		5progressOpCopy					EQU		6progressOpCut					EQU		7progressOpLoadMovieIntoRam		EQU		8progressOpLoadTrackIntoRam		EQU		9progressOpLoadMediaIntoRam		EQU		10progressOpImportMovie			EQU		11progressOpExportMovie			EQU		12mediaQualityDraft				EQU		$0000mediaQualityNormal				EQU		$0040mediaQualityBetter				EQU		$0080mediaQualityBest				EQU		$00C0loopTimeBase					EQU		1palindromeLoopTimeBase			EQU		2maintainTimeBaseZero			EQU		4TimeBaseRecord 			RECORD	0data					 ds.l	1sizeof					 EQU	4						ENDRCallBackRecord 			RECORD	0data					 ds.l	1sizeof					 EQU	4						ENDRTimeRecord 				RECORD	0value					 ds.l	2									; units scale					 ds.l	1									; units per second base					 ds.l	1sizeof					 EQU	16						ENDR; CallBack equates triggerTimeFwd					EQU		$0001				; when curTime exceeds triggerTime going forward triggerTimeBwd					EQU		$0002				; when curTime exceeds triggerTime going backwards triggerTimeEither				EQU		$0003				; when curTime exceeds triggerTime going either direction triggerRateLT					EQU		$0004				; when rate changes to less than trigger value triggerRateGT					EQU		$0008				; when rate changes to greater than trigger value triggerRateEqual				EQU		$0010				; when rate changes to equal trigger value triggerRateLTE					EQU		triggerRateLT | triggerRateEqualtriggerRateGTE					EQU		triggerRateGT | triggerRateEqualtriggerRateNotEqual				EQU		triggerRateGT | triggerRateEqual | triggerRateLTtriggerRateChange				EQU		0triggerAtStart					EQU		$0001triggerAtStop					EQU		$0002timeBaseBeforeStartTime			EQU		1timeBaseAfterStopTime			EQU		2callBackAtTime					EQU		1callBackAtRate					EQU		2callBackAtTimeJump				EQU		3callBackAtExtremes				EQU		4callBackAtInterrupt				EQU		$8000callBackAtDeferredTask			EQU		$4000qtcbNeedsRateChanges			EQU		1					; wants to know about rate changes qtcbNeedsTimeChanges			EQU		2					; wants to know about time changes qtcbNeedsStartStopChanges		EQU		4					; wants to know when TimeBase start/stop is changedQTCallBackHeader 		RECORD	0callBackFlags			 ds.l	1reserved1				 ds.l	1qtPrivate				 ds.b	40sizeof					 EQU	48						ENDRQTSyncTaskRecord 		RECORD	0qLink					 ds.l	1proc					 ds.l	1sizeof					 EQU	8						ENDRkeepInRam						EQU		1 << 0				; load and make non-purgableunkeepInRam						EQU		1 << 1				; mark as purgableflushFromRam					EQU		1 << 2				; empty those handlesloadForwardTrackEdits			EQU		1 << 3				;	load track edits into ram for playing forwardloadBackwardTrackEdits			EQU		1 << 4				;	load track edits into ram for playing in reversenewMovieActive					EQU		1 << 0newMovieDontResolveDataRefs		EQU		1 << 1newMovieDontAskUnresolvedDataRefs EQU		1 << 2newMovieDontAutoAlternates		EQU		1 << 3; track usage bits trackUsageInMovie				EQU		1 << 1trackUsageInPreview				EQU		1 << 2trackUsageInPoster				EQU		1 << 3; Add/GetMediaSample flags mediaSampleNotSync				EQU		1 << 0				; sample is not a sync sample (eg. is frame differenced mediaSampleShadowSync			EQU		1 << 1				; sample is a shadow sync pasteInParallel					EQU		1showUserSettingsDialog			EQU		2movieToFileOnlyExport			EQU		4nextTimeMediaSample				EQU		1 << 0nextTimeMediaEdit				EQU		1 << 1nextTimeTrackEdit				EQU		1 << 2nextTimeSyncSample				EQU		1 << 3nextTimeEdgeOK					EQU		1 << 14nextTimeIgnoreActiveSegment		EQU		1 << 15createMovieFileDeleteCurFile	EQU		1 << 31createMovieFileDontCreateMovie	EQU		1 << 30createMovieFileDontOpenFile		EQU		1 << 29flattenAddMovieToDataFork		EQU		1 << 0flattenActiveTracksOnly			EQU		1 << 2flattenDontInterleaveFlatten	EQU		1 << 3movieInDataForkResID			EQU		-1					; magic res ID mcTopLeftMovie					EQU		1 << 0				; usually centered mcScaleMovieToFit				EQU		1 << 1				; usually only scales down mcWithBadge						EQU		1 << 2				; give me a badge mcNotVisible					EQU		1 << 3				; don't show controller mcWithFrame						EQU		1 << 4				; gimme a frame movieScrapDontZeroScrap			EQU		1 << 0movieScrapOnlyPutMovie			EQU		1 << 1dataRefSelfReference			EQU		1 << 0dataRefWasNotResolved			EQU		1 << 1hintsScrubMode					EQU		1 << 0				; mask == && (if flags == scrub on, flags != scrub off) hintsLoop						EQU		1 << 1hintsDontPurge					EQU		1 << 2hintsUseScreenBuffer			EQU		1 << 5hintsAllowInterlace				EQU		1 << 6hintsUseSoundInterp				EQU		1 << 7hintsHighQuality				EQU		1 << 8				; slooooow hintsPalindrome					EQU		1 << 9hintsInactive					EQU		1 << 11mediaHandlerFlagBaseClient		EQU		1movieTrackMediaType				EQU		1 << 0movieTrackCharacteristic		EQU		1 << 1movieTrackEnabledOnly			EQU		1 << 2SampleReferenceRecord 	RECORD	0dataOffset				 ds.l	1dataSize				 ds.l	1durationPerSample		 ds.l	1numberOfSamples			 ds.l	1sampleFlags				 ds.w	1sizeof					 EQU	18						ENDR;************************;* Initialization Routines ;*************************	IF GENERATING68K THEN		Macro		_EnterMovies			moveq	#1,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	EnterMovies	ENDIF	IF GENERATING68K THEN		Macro		_ExitMovies			moveq	#2,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ExitMovies	ENDIF;************************;* Error Routines ;*************************	IF GENERATING68K THEN		Macro		_GetMoviesError			moveq	#3,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMoviesError	ENDIF	IF GENERATING68K THEN		Macro		_ClearMoviesStickyError			move.w	#$DE,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ClearMoviesStickyError	ENDIF	IF GENERATING68K THEN		Macro		_GetMoviesStickyError			moveq	#4,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMoviesStickyError	ENDIF	IF GENERATING68K THEN		Macro		_SetMoviesErrorProc			move.w	#$EF,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMoviesErrorProc	ENDIF;************************;* Idle Routines ;*************************	IF GENERATING68K THEN		Macro		_MoviesTask			moveq	#5,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	MoviesTask	ENDIF	IF GENERATING68K THEN		Macro		_PrerollMovie			moveq	#6,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PrerollMovie	ENDIF	IF GENERATING68K THEN		Macro		_LoadMovieIntoRam			moveq	#7,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	LoadMovieIntoRam	ENDIF	IF GENERATING68K THEN		Macro		_LoadTrackIntoRam			move.w	#$16E,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	LoadTrackIntoRam	ENDIF	IF GENERATING68K THEN		Macro		_LoadMediaIntoRam			moveq	#8,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	LoadMediaIntoRam	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieActive			moveq	#9,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieActive	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieActive			moveq	#10,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieActive	ENDIF;************************;* calls for playing movies, previews, posters;*************************	IF GENERATING68K THEN		Macro		_StartMovie			moveq	#11,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	StartMovie	ENDIF	IF GENERATING68K THEN		Macro		_StopMovie			moveq	#12,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	StopMovie	ENDIF	IF GENERATING68K THEN		Macro		_GoToBeginningOfMovie			moveq	#13,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GoToBeginningOfMovie	ENDIF	IF GENERATING68K THEN		Macro		_GoToEndOfMovie			moveq	#14,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GoToEndOfMovie	ENDIF	IF GENERATING68K THEN		Macro		_IsMovieDone			move.w	#$DD,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	IsMovieDone	ENDIF	IF GENERATING68K THEN		Macro		_GetMoviePreviewMode			moveq	#15,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMoviePreviewMode	ENDIF	IF GENERATING68K THEN		Macro		_SetMoviePreviewMode			moveq	#16,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMoviePreviewMode	ENDIF	IF GENERATING68K THEN		Macro		_ShowMoviePoster			moveq	#17,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ShowMoviePoster	ENDIF	IF GENERATING68K THEN		Macro		_PlayMoviePreview			move.w	#$F2,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PlayMoviePreview	ENDIF;************************;* calls for controlling movies & tracks which are playing;*************************	IF GENERATING68K THEN		Macro		_GetMovieTimeBase			moveq	#18,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieTimeBase	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieMasterTimeBase			move.w	#$167,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieMasterTimeBase	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieMasterClock			move.w	#$168,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieMasterClock	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieGWorld			moveq	#21,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieGWorld	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieGWorld			moveq	#22,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieGWorld	ENDIFmovieDrawingCallWhenChanged		EQU		0movieDrawingCallAlways			EQU		1	IF GENERATING68K THEN		Macro		_SetMovieDrawingCompleteProc			move.w	#$1DE,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieDrawingCompleteProc	ENDIF	IF GENERATING68K THEN		Macro		_GetNextTrackForCompositing			move.w	#$1FA,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetNextTrackForCompositing	ENDIF	IF GENERATING68K THEN		Macro		_GetPrevTrackForCompositing			move.w	#$1FB,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetPrevTrackForCompositing	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackGWorld			move.w	#$9D,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackGWorld	ENDIF	IF GENERATING68K THEN		Macro		_GetMoviePict			moveq	#29,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMoviePict	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackPict			moveq	#30,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackPict	ENDIF	IF GENERATING68K THEN		Macro		_GetMoviePosterPict			move.w	#$F7,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMoviePosterPict	ENDIF; called between Begin & EndUpdate 	IF GENERATING68K THEN		Macro		_UpdateMovie			moveq	#31,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	UpdateMovie	ENDIF;*** spatial movie routines ***	IF GENERATING68K THEN		Macro		_GetMovieBox			move.w	#$F9,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieBox	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieBox			move.w	#$FA,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieBox	ENDIF;* movie display clip 	IF GENERATING68K THEN		Macro		_GetMovieDisplayClipRgn			move.w	#$FC,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieDisplayClipRgn	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieDisplayClipRgn			move.w	#$FD,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieDisplayClipRgn	ENDIF;* movie src clip 	IF GENERATING68K THEN		Macro		_GetMovieClipRgn			move.w	#$100,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieClipRgn	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieClipRgn			move.w	#$101,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieClipRgn	ENDIF;* track src clip 	IF GENERATING68K THEN		Macro		_GetTrackClipRgn			move.w	#$102,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackClipRgn	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackClipRgn			move.w	#$103,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackClipRgn	ENDIF;* bounds in display space (not clipped by display clip) 	IF GENERATING68K THEN		Macro		_GetMovieDisplayBoundsRgn			move.w	#$FB,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieDisplayBoundsRgn	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackDisplayBoundsRgn			move.w	#$112,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackDisplayBoundsRgn	ENDIF;* bounds in movie space 	IF GENERATING68K THEN		Macro		_GetMovieBoundsRgn			move.w	#$FE,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieBoundsRgn	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackMovieBoundsRgn			move.w	#$FF,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackMovieBoundsRgn	ENDIF;* bounds in track space 	IF GENERATING68K THEN		Macro		_GetTrackBoundsRgn			move.w	#$111,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackBoundsRgn	ENDIF;* mattes - always in track space 	IF GENERATING68K THEN		Macro		_GetTrackMatte			move.w	#$115,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackMatte	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackMatte			move.w	#$116,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackMatte	ENDIF	IF GENERATING68K THEN		Macro		_DisposeMatte			move.w	#$14A,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeMatte	ENDIF;************************;* calls for getting/saving movies;*************************	IF GENERATING68K THEN		Macro		_NewMovie			move.w	#$187,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewMovie	ENDIF	IF GENERATING68K THEN		Macro		_PutMovieIntoHandle			moveq	#34,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PutMovieIntoHandle	ENDIF	IF GENERATING68K THEN		Macro		_PutMovieIntoDataFork			move.w	#$1B4,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PutMovieIntoDataFork	ENDIF	IF GENERATING68K THEN		Macro		_DisposeMovie			moveq	#35,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeMovie	ENDIF;************************;* Movie State Routines;*************************	IF GENERATING68K THEN		Macro		_GetMovieCreationTime			moveq	#38,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieCreationTime	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieModificationTime			moveq	#39,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieModificationTime	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieTimeScale			moveq	#41,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieTimeScale	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieTimeScale			moveq	#42,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieTimeScale	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieDuration			moveq	#43,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieDuration	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieRate			moveq	#44,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieRate	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieRate			moveq	#45,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieRate	ENDIF	IF GENERATING68K THEN		Macro		_GetMoviePreferredRate			move.w	#$F3,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMoviePreferredRate	ENDIF	IF GENERATING68K THEN		Macro		_SetMoviePreferredRate			move.w	#$F4,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMoviePreferredRate	ENDIF	IF GENERATING68K THEN		Macro		_GetMoviePreferredVolume			move.w	#$F5,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMoviePreferredVolume	ENDIF	IF GENERATING68K THEN		Macro		_SetMoviePreferredVolume			move.w	#$F6,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMoviePreferredVolume	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieVolume			moveq	#46,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieVolume	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieVolume			moveq	#47,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieVolume	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieMatrix			moveq	#49,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieMatrix	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieMatrix			moveq	#50,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieMatrix	ENDIF	IF GENERATING68K THEN		Macro		_GetMoviePreviewTime			moveq	#51,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMoviePreviewTime	ENDIF	IF GENERATING68K THEN		Macro		_SetMoviePreviewTime			moveq	#52,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMoviePreviewTime	ENDIF	IF GENERATING68K THEN		Macro		_GetMoviePosterTime			moveq	#53,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMoviePosterTime	ENDIF	IF GENERATING68K THEN		Macro		_SetMoviePosterTime			moveq	#54,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMoviePosterTime	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieSelection			moveq	#55,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieSelection	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieSelection			moveq	#56,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieSelection	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieActiveSegment			move.w	#$15C,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieActiveSegment	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieActiveSegment			move.w	#$15D,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieActiveSegment	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieTime			moveq	#57,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieTime	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieTime			moveq	#60,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieTime	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieTimeValue			moveq	#61,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieTimeValue	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieUserData			moveq	#62,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieUserData	ENDIF;************************;* Track/Media finding routines;*************************	IF GENERATING68K THEN		Macro		_GetMovieTrackCount			moveq	#63,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieTrackCount	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieTrack			moveq	#64,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieTrack	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieIndTrack			move.w	#$117,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieIndTrack	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieIndTrackType			move.w	#$208,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieIndTrackType	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackID			move.w	#$127,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackID	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackMovie			move.w	#$D0,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackMovie	ENDIF;************************;* Track creation routines;*************************	IF GENERATING68K THEN		Macro		_NewMovieTrack			move.w	#$188,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewMovieTrack	ENDIF	IF GENERATING68K THEN		Macro		_DisposeMovieTrack			moveq	#66,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeMovieTrack	ENDIF;************************;* Track State routines;*************************	IF GENERATING68K THEN		Macro		_GetTrackCreationTime			moveq	#67,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackCreationTime	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackModificationTime			moveq	#68,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackModificationTime	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackEnabled			moveq	#69,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackEnabled	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackEnabled			moveq	#70,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackEnabled	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackUsage			moveq	#71,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackUsage	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackUsage			moveq	#72,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackUsage	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackDuration			moveq	#75,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackDuration	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackOffset			moveq	#76,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackOffset	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackOffset			moveq	#77,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackOffset	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackLayer			moveq	#80,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackLayer	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackLayer			moveq	#81,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackLayer	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackAlternate			moveq	#82,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackAlternate	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackAlternate			moveq	#83,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackAlternate	ENDIF	IF GENERATING68K THEN		Macro		_SetAutoTrackAlternatesEnabled			move.w	#$15E,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetAutoTrackAlternatesEnabled	ENDIF	IF GENERATING68K THEN		Macro		_SelectMovieAlternates			move.w	#$15F,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SelectMovieAlternates	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackVolume			moveq	#84,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackVolume	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackVolume			moveq	#85,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackVolume	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackMatrix			moveq	#86,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackMatrix	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackMatrix			moveq	#87,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackMatrix	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackDimensions			moveq	#93,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackDimensions	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackDimensions			moveq	#94,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackDimensions	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackUserData			moveq	#95,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackUserData	ENDIF;************************;* get Media routines;*************************	IF GENERATING68K THEN		Macro		_NewTrackMedia			move.w	#$18E,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewTrackMedia	ENDIF	IF GENERATING68K THEN		Macro		_DisposeTrackMedia			moveq	#97,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeTrackMedia	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackMedia			moveq	#98,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackMedia	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaTrack			move.w	#$C5,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaTrack	ENDIF;************************;* Media State routines;*************************	IF GENERATING68K THEN		Macro		_GetMediaCreationTime			moveq	#102,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaCreationTime	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaModificationTime			moveq	#103,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaModificationTime	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaTimeScale			moveq	#104,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaTimeScale	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaTimeScale			moveq	#105,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaTimeScale	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaDuration			moveq	#106,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaDuration	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaLanguage			moveq	#107,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaLanguage	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaLanguage			moveq	#108,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaLanguage	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaQuality			moveq	#109,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaQuality	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaQuality			moveq	#110,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaQuality	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaHandlerDescription			moveq	#111,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaHandlerDescription	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaUserData			moveq	#112,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaUserData	ENDIF;************************;* Media Handler routines;*************************	IF GENERATING68K THEN		Macro		_GetMediaHandler			moveq	#113,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaHandler	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaHandler			move.w	#$190,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaHandler	ENDIF;************************;* Media's Data routines;*************************	IF GENERATING68K THEN		Macro		_BeginMediaEdits			moveq	#114,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	BeginMediaEdits	ENDIF	IF GENERATING68K THEN		Macro		_EndMediaEdits			moveq	#115,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	EndMediaEdits	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaDefaultDataRefIndex			move.w	#$1E0,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaDefaultDataRefIndex	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaDataHandlerDescription			move.w	#$19E,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaDataHandlerDescription	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaDataHandler			move.w	#$19F,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaDataHandler	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaDataHandler			move.w	#$1A0,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaDataHandler	ENDIF	IF GENERATING68K THEN		Macro		_GetDataHandler			move.w	#$1ED,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetDataHandler	ENDIF;************************;* Media Sample Table Routines;*************************	IF GENERATING68K THEN		Macro		_GetMediaSampleDescriptionCount			moveq	#119,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaSampleDescriptionCount	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaSampleDescription			moveq	#120,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaSampleDescription	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaSampleDescription			move.w	#$1D0,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaSampleDescription	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaSampleCount			moveq	#121,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaSampleCount	ENDIF	IF GENERATING68K THEN		Macro		_SampleNumToMediaTime			moveq	#122,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SampleNumToMediaTime	ENDIF	IF GENERATING68K THEN		Macro		_MediaTimeToSampleNum			moveq	#123,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	MediaTimeToSampleNum	ENDIF	IF GENERATING68K THEN		Macro		_AddMediaSample			moveq	#124,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddMediaSample	ENDIF	IF GENERATING68K THEN		Macro		_AddMediaSampleReference			moveq	#125,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddMediaSampleReference	ENDIF	IF GENERATING68K THEN		Macro		_AddMediaSampleReferences			move.w	#$1F7,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddMediaSampleReferences	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaSample			moveq	#126,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaSample	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaSampleReference			moveq	#127,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaSampleReference	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaPreferredChunkSize			move.w	#$1F8,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaPreferredChunkSize	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaPreferredChunkSize			move.w	#$1F9,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaPreferredChunkSize	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaShadowSync			move.w	#$121,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaShadowSync	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaShadowSync			move.w	#$122,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaShadowSync	ENDIF;************************;* Editing Routines;*************************	IF GENERATING68K THEN		Macro		_InsertMediaIntoTrack			move.w	#$183,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	InsertMediaIntoTrack	ENDIF	IF GENERATING68K THEN		Macro		_InsertTrackSegment			move.w	#$85,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	InsertTrackSegment	ENDIF	IF GENERATING68K THEN		Macro		_InsertMovieSegment			move.w	#$86,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	InsertMovieSegment	ENDIF	IF GENERATING68K THEN		Macro		_InsertEmptyTrackSegment			move.w	#$87,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	InsertEmptyTrackSegment	ENDIF	IF GENERATING68K THEN		Macro		_InsertEmptyMovieSegment			move.w	#$88,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	InsertEmptyMovieSegment	ENDIF	IF GENERATING68K THEN		Macro		_DeleteTrackSegment			move.w	#$89,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DeleteTrackSegment	ENDIF	IF GENERATING68K THEN		Macro		_DeleteMovieSegment			move.w	#$8A,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DeleteMovieSegment	ENDIF	IF GENERATING68K THEN		Macro		_ScaleTrackSegment			move.w	#$8B,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ScaleTrackSegment	ENDIF	IF GENERATING68K THEN		Macro		_ScaleMovieSegment			move.w	#$8C,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ScaleMovieSegment	ENDIF;************************;* Hi-level Editing Routines;*************************	IF GENERATING68K THEN		Macro		_CutMovieSelection			move.w	#$8D,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	CutMovieSelection	ENDIF	IF GENERATING68K THEN		Macro		_CopyMovieSelection			move.w	#$8E,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	CopyMovieSelection	ENDIF	IF GENERATING68K THEN		Macro		_PasteMovieSelection			move.w	#$8F,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PasteMovieSelection	ENDIF	IF GENERATING68K THEN		Macro		_AddMovieSelection			move.w	#$152,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddMovieSelection	ENDIF	IF GENERATING68K THEN		Macro		_ClearMovieSelection			move.w	#$E1,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ClearMovieSelection	ENDIF	IF GENERATING68K THEN		Macro		_PasteHandleIntoMovie			move.w	#$CB,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PasteHandleIntoMovie	ENDIF	IF GENERATING68K THEN		Macro		_PutMovieIntoTypedHandle			move.w	#$1CD,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PutMovieIntoTypedHandle	ENDIF	IF GENERATING68K THEN		Macro		_IsScrapMovie			move.w	#$CC,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	IsScrapMovie	ENDIF;************************;* Middle-level Editing Routines;*************************	IF GENERATING68K THEN		Macro		_CopyTrackSettings			move.w	#$153,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	CopyTrackSettings	ENDIF	IF GENERATING68K THEN		Macro		_CopyMovieSettings			move.w	#$154,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	CopyMovieSettings	ENDIF	IF GENERATING68K THEN		Macro		_AddEmptyTrackToMovie			moveq	#116,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddEmptyTrackToMovie	ENDIF;************************;* movie & track edit state routines;*************************	IF GENERATING68K THEN		Macro		_NewMovieEditState			move.w	#$104,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewMovieEditState	ENDIF	IF GENERATING68K THEN		Macro		_UseMovieEditState			move.w	#$105,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	UseMovieEditState	ENDIF	IF GENERATING68K THEN		Macro		_DisposeMovieEditState			move.w	#$106,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeMovieEditState	ENDIF	IF GENERATING68K THEN		Macro		_NewTrackEditState			move.w	#$107,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewTrackEditState	ENDIF	IF GENERATING68K THEN		Macro		_UseTrackEditState			move.w	#$108,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	UseTrackEditState	ENDIF	IF GENERATING68K THEN		Macro		_DisposeTrackEditState			move.w	#$109,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeTrackEditState	ENDIF;************************;* track reference routines;*************************	IF GENERATING68K THEN		Macro		_AddTrackReference			move.w	#$1F0,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddTrackReference	ENDIF	IF GENERATING68K THEN		Macro		_DeleteTrackReference			move.w	#$1F1,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DeleteTrackReference	ENDIF	IF GENERATING68K THEN		Macro		_SetTrackReference			move.w	#$1F2,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackReference	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackReference			move.w	#$1F3,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackReference	ENDIF	IF GENERATING68K THEN		Macro		_GetNextTrackReferenceType			move.w	#$1F4,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetNextTrackReferenceType	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackReferenceCount			move.w	#$1F5,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackReferenceCount	ENDIF;************************;* high level file conversion routines;*************************	IF GENERATING68K THEN		Macro		_ConvertFileToMovieFile			move.w	#$1CB,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ConvertFileToMovieFile	ENDIF	IF GENERATING68K THEN		Macro		_ConvertMovieToFile			move.w	#$1CC,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ConvertMovieToFile	ENDIF;************************;* Movie Timebase Conversion Routines;*************************	IF GENERATING68K THEN		Macro		_TrackTimeToMediaTime			move.w	#$96,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	TrackTimeToMediaTime	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackEditRate			move.w	#$123,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackEditRate	ENDIF;************************;* Miscellaneous Routines;*************************	IF GENERATING68K THEN		Macro		_GetMovieDataSize			move.w	#$98,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieDataSize	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackDataSize			move.w	#$149,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackDataSize	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaDataSize			move.w	#$99,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaDataSize	ENDIF	IF GENERATING68K THEN		Macro		_PtInMovie			move.w	#$9A,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PtInMovie	ENDIF	IF GENERATING68K THEN		Macro		_PtInTrack			move.w	#$9B,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PtInTrack	ENDIF;************************;* Group Selection Routines;*************************	IF GENERATING68K THEN		Macro		_SetMovieLanguage			move.w	#$9C,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieLanguage	ENDIF;************************;* User Data;*************************	IF GENERATING68K THEN		Macro		_GetUserData			move.w	#$9E,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetUserData	ENDIF	IF GENERATING68K THEN		Macro		_AddUserData			move.w	#$9F,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddUserData	ENDIF	IF GENERATING68K THEN		Macro		_RemoveUserData			move.w	#$A0,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	RemoveUserData	ENDIF	IF GENERATING68K THEN		Macro		_CountUserDataType			move.w	#$14B,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	CountUserDataType	ENDIF	IF GENERATING68K THEN		Macro		_GetNextUserDataType			move.w	#$1A5,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetNextUserDataType	ENDIF	IF GENERATING68K THEN		Macro		_GetUserDataItem			move.w	#$126,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetUserDataItem	ENDIF	IF GENERATING68K THEN		Macro		_SetUserDataItem			move.w	#$12E,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetUserDataItem	ENDIF	IF GENERATING68K THEN		Macro		_AddUserDataText			move.w	#$14C,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddUserDataText	ENDIF	IF GENERATING68K THEN		Macro		_GetUserDataText			move.w	#$14D,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetUserDataText	ENDIF	IF GENERATING68K THEN		Macro		_RemoveUserDataText			move.w	#$14E,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	RemoveUserDataText	ENDIF	IF GENERATING68K THEN		Macro		_NewUserData			move.w	#$12F,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewUserData	ENDIF	IF GENERATING68K THEN		Macro		_DisposeUserData			move.w	#$130,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeUserData	ENDIF	IF GENERATING68K THEN		Macro		_NewUserDataFromHandle			move.w	#$131,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewUserDataFromHandle	ENDIF	IF GENERATING68K THEN		Macro		_PutUserDataIntoHandle			move.w	#$132,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PutUserDataIntoHandle	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaNextInterestingTime			move.w	#$16D,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaNextInterestingTime	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackNextInterestingTime			move.w	#$E2,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackNextInterestingTime	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieNextInterestingTime			move.w	#$10E,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieNextInterestingTime	ENDIF	IF GENERATING68K THEN		Macro		_CreateMovieFile			move.w	#$191,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	CreateMovieFile	ENDIF	IF GENERATING68K THEN		Macro		_OpenMovieFile			move.w	#$192,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	OpenMovieFile	ENDIF	IF GENERATING68K THEN		Macro		_CloseMovieFile			move.w	#$D5,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	CloseMovieFile	ENDIF	IF GENERATING68K THEN		Macro		_DeleteMovieFile			move.w	#$175,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DeleteMovieFile	ENDIF	IF GENERATING68K THEN		Macro		_NewMovieFromFile			move.w	#$F0,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewMovieFromFile	ENDIF	IF GENERATING68K THEN		Macro		_NewMovieFromHandle			move.w	#$F1,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewMovieFromHandle	ENDIF	IF GENERATING68K THEN		Macro		_NewMovieFromDataFork			move.w	#$1B3,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewMovieFromDataFork	ENDIF	IF GENERATING68K THEN		Macro		_NewMovieFromUserProc			move.w	#$1EC,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewMovieFromUserProc	ENDIF	IF GENERATING68K THEN		Macro		_AddMovieResource			move.w	#$D7,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddMovieResource	ENDIF	IF GENERATING68K THEN		Macro		_UpdateMovieResource			move.w	#$D8,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	UpdateMovieResource	ENDIF	IF GENERATING68K THEN		Macro		_RemoveMovieResource			move.w	#$176,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	RemoveMovieResource	ENDIF	IF GENERATING68K THEN		Macro		_HasMovieChanged			move.w	#$D9,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	HasMovieChanged	ENDIF	IF GENERATING68K THEN		Macro		_ClearMovieChanged			move.w	#$113,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ClearMovieChanged	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieDefaultDataRef			move.w	#$1C1,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieDefaultDataRef	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieDefaultDataRef			move.w	#$1D2,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieDefaultDataRef	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieColorTable			move.w	#$205,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieColorTable	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieColorTable			move.w	#$206,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieColorTable	ENDIF	IF GENERATING68K THEN		Macro		_FlattenMovie			move.w	#$19B,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	FlattenMovie	ENDIF	IF GENERATING68K THEN		Macro		_FlattenMovieData			move.w	#$19C,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	FlattenMovieData	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieProgressProc			move.w	#$19A,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieProgressProc	ENDIF;************************;* Video Media routines;*************************	IF GENERATING68K THEN		Macro		_GetVideoMediaGraphicsMode			dc.w 	$2F3C			dc.w 	$0008			dc.w 	$0101			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	GetVideoMediaGraphicsMode	ENDIF	IF GENERATING68K THEN		Macro		_SetVideoMediaGraphicsMode			dc.w 	$2F3C			dc.w 	$0008			dc.w 	$0102			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	SetVideoMediaGraphicsMode	ENDIF;************************;* Sound Media routines;*************************	IF GENERATING68K THEN		Macro		_GetSoundMediaBalance			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0101			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	GetSoundMediaBalance	ENDIF	IF GENERATING68K THEN		Macro		_SetSoundMediaBalance			dc.w 	$2F3C			dc.w 	$0002			dc.w 	$0102			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	SetSoundMediaBalance	ENDIF;************************;* Text Media routines;*************************; Return displayFlags for TextProc txtProcDefaultDisplay			EQU		0					;	Use the media's defaulttxtProcDontDisplay				EQU		1					;	Don't display the texttxtProcDoDisplay				EQU		2					;	Do display the text	IF GENERATING68K THEN		Macro		_SetTextProc			dc.w 	$2F3C			dc.w 	$0008			dc.w 	$0101			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	SetTextProc	ENDIF	IF GENERATING68K THEN		Macro		_AddTextSample			dc.w 	$2F3C			dc.w 	$0034			dc.w 	$0102			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	AddTextSample	ENDIF	IF GENERATING68K THEN		Macro		_AddTESample			dc.w 	$2F3C			dc.w 	$0026			dc.w 	$0103			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	AddTESample	ENDIF	IF GENERATING68K THEN		Macro		_AddHiliteSample			dc.w 	$2F3C			dc.w 	$0010			dc.w 	$0104			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	AddHiliteSample	ENDIFfindTextEdgeOK					EQU		1 << 0				; Okay to find text at specified sample timefindTextCaseSensitive			EQU		1 << 1				; Case sensitive searchfindTextReverseSearch			EQU		1 << 2				; Search from sampleTime backwardsfindTextWrapAround				EQU		1 << 3				; Wrap search when beginning or end of movie is hitfindTextUseOffset				EQU		1 << 4				; Begin search at the given character offset into sample rather than edge	IF GENERATING68K THEN		Macro		_FindNextText			dc.w 	$2F3C			dc.w 	$001A			dc.w 	$0105			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	FindNextText	ENDIF	IF GENERATING68K THEN		Macro		_HiliteTextSample			dc.w 	$2F3C			dc.w 	$000C			dc.w 	$0106			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	HiliteTextSample	ENDIFdropShadowOffsetType			EQU		'drpo'dropShadowTranslucencyType		EQU		'drpt'	IF GENERATING68K THEN		Macro		_SetTextSampleData			dc.w 	$2F3C			dc.w 	$0008			dc.w 	$0107			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	SetTextSampleData	ENDIF	IF GENERATING68K THEN		Macro		_MovieSearchText			move.w	#$207,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	MovieSearchText	ENDIF	IF GENERATING68K THEN		Macro		_GetPosterBox			move.w	#$16F,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetPosterBox	ENDIF	IF GENERATING68K THEN		Macro		_SetPosterBox			move.w	#$170,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetPosterBox	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieSegmentDisplayBoundsRgn			move.w	#$16C,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieSegmentDisplayBoundsRgn	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackSegmentDisplayBoundsRgn			move.w	#$16B,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackSegmentDisplayBoundsRgn	ENDIF	IF GENERATING68K THEN		Macro		_SetMovieCoverProcs			move.w	#$179,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMovieCoverProcs	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieCoverProcs			move.w	#$1DD,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieCoverProcs	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackStatus			move.w	#$172,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackStatus	ENDIF	IF GENERATING68K THEN		Macro		_GetMovieStatus			move.w	#$173,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMovieStatus	ENDIF;***;	Movie Controller support routines;***	IF GENERATING68K THEN		Macro		_NewMovieController			move.w	#$18A,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewMovieController	ENDIF	IF GENERATING68K THEN		Macro		_DisposeMovieController			move.w	#$18B,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeMovieController	ENDIF	IF GENERATING68K THEN		Macro		_ShowMovieInformation			move.w	#$209,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ShowMovieInformation	ENDIF;****;	Scrap routines;****	IF GENERATING68K THEN		Macro		_PutMovieOnScrap			move.w	#$18C,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	PutMovieOnScrap	ENDIF	IF GENERATING68K THEN		Macro		_NewMovieFromScrap			move.w	#$18D,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewMovieFromScrap	ENDIF;****;	DataRef routines;****	IF GENERATING68K THEN		Macro		_GetMediaDataRef			move.w	#$197,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaDataRef	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaDataRef			move.w	#$1C9,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaDataRef	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaDataRefAttributes			move.w	#$1CA,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaDataRefAttributes	ENDIF	IF GENERATING68K THEN		Macro		_AddMediaDataRef			move.w	#$198,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddMediaDataRef	ENDIF	IF GENERATING68K THEN		Macro		_GetMediaDataRefCount			move.w	#$199,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetMediaDataRefCount	ENDIF;****;	Playback hint routines;****	IF GENERATING68K THEN		Macro		_SetMoviePlayHints			move.w	#$1A1,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMoviePlayHints	ENDIF	IF GENERATING68K THEN		Macro		_SetMediaPlayHints			move.w	#$1A2,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetMediaPlayHints	ENDIF;****;	Load time track hints;****preloadAlways					EQU		1 << 0preloadOnlyIfEnabled			EQU		1 << 1	IF GENERATING68K THEN		Macro		_SetTrackLoadSettings			move.w	#$1E3,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTrackLoadSettings	ENDIF	IF GENERATING68K THEN		Macro		_GetTrackLoadSettings			move.w	#$1E4,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTrackLoadSettings	ENDIFMovieControllerComponentType	EQU		'play'mcActionIdle					EQU		1					; no parammcActionDraw					EQU		2					; param is WindowPtrmcActionActivate				EQU		3					; no parammcActionDeactivate				EQU		4					; no parammcActionMouseDown				EQU		5					; param is pointer to EventRecordmcActionKey						EQU		6					; param is pointer to EventRecordmcActionPlay					EQU		8					; param is Fixed, play ratemcActionGoToTime				EQU		12					; param is TimeRecordmcActionSetVolume				EQU		14					; param is a shortmcActionGetVolume				EQU		15					; param is pointer to a shortmcActionStep					EQU		18					; param is number of steps (short)mcActionSetLooping				EQU		21					; param is BooleanmcActionGetLooping				EQU		22					; param is pointer to a BooleanmcActionSetLoopIsPalindrome		EQU		23					; param is BooleanmcActionGetLoopIsPalindrome		EQU		24					; param is pointer to a BooleanmcActionSetGrowBoxBounds		EQU		25					; param is a RectmcActionControllerSizeChanged	EQU		26					; no parammcActionSetSelectionBegin		EQU		29					; param is TimeRecordmcActionSetSelectionDuration	EQU		30					; param is TimeRecord, action only taken on set-durationmcActionSetKeysEnabled			EQU		32					; param is BooleanmcActionGetKeysEnabled			EQU		33					; param is pointer to BooleanmcActionSetPlaySelection		EQU		34					; param is BooleanmcActionGetPlaySelection		EQU		35					; param is pointer to BooleanmcActionSetUseBadge				EQU		36					; param is BooleanmcActionGetUseBadge				EQU		37					; param is pointer to BooleanmcActionSetFlags				EQU		38					; param is long of flagsmcActionGetFlags				EQU		39					; param is pointer to a long of flagsmcActionSetPlayEveryFrame		EQU		40					; param is BooleanmcActionGetPlayEveryFrame		EQU		41					; param is pointer to BooleanmcActionGetPlayRate				EQU		42					; param is pointer to FixedmcActionShowBalloon				EQU		43					; param is a pointer to a boolean. set to false to stop balloonmcActionBadgeClick				EQU		44					; param is pointer to Boolean. set to false to ignore clickmcActionMovieClick				EQU		45					; param is pointer to event record. change ÒwhatÓ to nullEvt to kill clickmcActionSuspend					EQU		46					; no parammcActionResume					EQU		47					; no parammcActionSetControllerKeysEnabled EQU		48					; param is BooleanmcActionGetTimeSliderRect		EQU		49					; param is pointer to rectmcActionMovieEdited				EQU		50					; no parammcActionGetDragEnabled			EQU		51					; param is pointer to BooleanmcActionSetDragEnabled			EQU		52					; param is BooleanmcFlagSuppressMovieFrame		EQU		1 << 0mcFlagSuppressStepButtons		EQU		1 << 1mcFlagSuppressSpeakerButton		EQU		1 << 2mcFlagsUseWindowPalette			EQU		1 << 3mcFlagsDontInvalidate			EQU		1 << 4mcPositionDontInvalidate		EQU		1 << 5mcInfoUndoAvailable				EQU		1 << 0mcInfoCutAvailable				EQU		1 << 1mcInfoCopyAvailable				EQU		1 << 2mcInfoPasteAvailable			EQU		1 << 3mcInfoClearAvailable			EQU		1 << 4mcInfoHasSound					EQU		1 << 5mcInfoIsPlaying					EQU		1 << 6mcInfoIsLooping					EQU		1 << 7mcInfoIsInPalindrome			EQU		1 << 8mcInfoEditingEnabled			EQU		1 << 9; menu item codesmcMenuUndo						EQU		1mcMenuCut						EQU		3mcMenuCopy						EQU		4mcMenuPaste						EQU		5mcMenuClear						EQU		6; target management 	IF GENERATING68K THEN		Macro		_MCSetMovie			dc.w 	$2F3C			dc.w 	$000C			dc.w 	$0002			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetMovie	ENDIF	IF GENERATING68K THEN		Macro		_MCGetIndMovie			dc.w 	$2F3C			dc.w 	$0002			dc.w 	$0005			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetIndMovie	ENDIF	IF GENERATING68K THEN		Macro		_MCRemoveMovie			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$0006			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCRemoveMovie	ENDIF; event handling etc. 	IF GENERATING68K THEN		Macro		_MCIsPlayerEvent			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0007			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCIsPlayerEvent	ENDIF; obsolete. use MCSetActionFilterWithRefCon instead. 	IF GENERATING68K THEN		Macro		_MCSetActionFilter			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0008			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetActionFilter	ENDIF;;	proc is of the form:;		Boolean userPlayerFilter(MovieController mc, short *action, void *params) =;	proc returns TRUE if it handles the action, FALSE if not;	action is passed as a VAR so that it could be changed by filter (ick);	this is consistent with the current dialog manager stuff;	params is any potential parameters that go with the action <triple ick> ;		such as set playback rate to xxx.;	IF GENERATING68K THEN		Macro		_MCDoAction			dc.w 	$2F3C			dc.w 	$0006			dc.w 	$0009			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCDoAction	ENDIF; state type things 	IF GENERATING68K THEN		Macro		_MCSetControllerAttached			dc.w 	$2F3C			dc.w 	$0002			dc.w 	$000A			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetControllerAttached	ENDIF	IF GENERATING68K THEN		Macro		_MCIsControllerAttached			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$000B			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCIsControllerAttached	ENDIF	IF GENERATING68K THEN		Macro		_MCSetControllerPort			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$000C			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetControllerPort	ENDIF	IF GENERATING68K THEN		Macro		_MCGetControllerPort			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$000D			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetControllerPort	ENDIF	IF GENERATING68K THEN		Macro		_MCSetVisible			dc.w 	$2F3C			dc.w 	$0002			dc.w 	$000E			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetVisible	ENDIF	IF GENERATING68K THEN		Macro		_MCGetVisible			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$000F			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetVisible	ENDIF	IF GENERATING68K THEN		Macro		_MCGetControllerBoundsRect			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0010			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetControllerBoundsRect	ENDIF	IF GENERATING68K THEN		Macro		_MCSetControllerBoundsRect			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0011			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetControllerBoundsRect	ENDIF	IF GENERATING68K THEN		Macro		_MCGetControllerBoundsRgn			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$0012			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetControllerBoundsRgn	ENDIF	IF GENERATING68K THEN		Macro		_MCGetWindowRgn			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0013			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetWindowRgn	ENDIF; other stuff 	IF GENERATING68K THEN		Macro		_MCMovieChanged			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0014			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCMovieChanged	ENDIF;;	called when the app has changed thing about the movie (like bounding rect) or rate. So that we;		can update our graphical (and internal) state accordingly.;	IF GENERATING68K THEN		Macro		_MCSetDuration			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0015			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetDuration	ENDIF;;	duration to use for time slider -- will be reset next time MCMovieChanged is called;		or MCSetMovie is called;	IF GENERATING68K THEN		Macro		_MCGetCurrentTime			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0016			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetCurrentTime	ENDIF;;	returns the time value and the time scale it is on. if there are no movies, the;		time scale is passed back as 0. scale is an optional parameter;;	IF GENERATING68K THEN		Macro		_MCNewAttachedController			dc.w 	$2F3C			dc.w 	$000C			dc.w 	$0017			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCNewAttachedController	ENDIF;;	makes m the only movie attached to the controller. makes the controller visible.;	the window and where parameters are passed a long to MCSetMovie and behave as;	described there;	IF GENERATING68K THEN		Macro		_MCDraw			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0018			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCDraw	ENDIF	IF GENERATING68K THEN		Macro		_MCActivate			dc.w 	$2F3C			dc.w 	$0006			dc.w 	$0019			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCActivate	ENDIF	IF GENERATING68K THEN		Macro		_MCIdle			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$001A			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCIdle	ENDIF	IF GENERATING68K THEN		Macro		_MCKey			dc.w 	$2F3C			dc.w 	$0006			dc.w 	$001B			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCKey	ENDIF	IF GENERATING68K THEN		Macro		_MCClick			dc.w 	$2F3C			dc.w 	$0010			dc.w 	$001C			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCClick	ENDIF;;	calls for editing;	IF GENERATING68K THEN		Macro		_MCEnableEditing			dc.w 	$2F3C			dc.w 	$0002			dc.w 	$001D			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCEnableEditing	ENDIF	IF GENERATING68K THEN		Macro		_MCIsEditingEnabled			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$001E			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCIsEditingEnabled	ENDIF	IF GENERATING68K THEN		Macro		_MCCopy			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$001F			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCCopy	ENDIF	IF GENERATING68K THEN		Macro		_MCCut			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$0020			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCCut	ENDIF	IF GENERATING68K THEN		Macro		_MCPaste			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0021			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCPaste	ENDIF	IF GENERATING68K THEN		Macro		_MCClear			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$0022			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCClear	ENDIF	IF GENERATING68K THEN		Macro		_MCUndo			dc.w 	$2F3C			dc.w 	$0000			dc.w 	$0023			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCUndo	ENDIF;; *	somewhat special stuff; 	IF GENERATING68K THEN		Macro		_MCPositionController			dc.w 	$2F3C			dc.w 	$000C			dc.w 	$0024			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCPositionController	ENDIF	IF GENERATING68K THEN		Macro		_MCGetControllerInfo			dc.w 	$2F3C			dc.w 	$0004			dc.w 	$0025			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetControllerInfo	ENDIF	IF GENERATING68K THEN		Macro		_MCSetClip			dc.w 	$2F3C			dc.w 	$0008			dc.w 	$0028			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetClip	ENDIF	IF GENERATING68K THEN		Macro		_MCGetClip			dc.w 	$2F3C			dc.w 	$0008			dc.w 	$0029			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetClip	ENDIF	IF GENERATING68K THEN		Macro		_MCDrawBadge			dc.w 	$2F3C			dc.w 	$0008			dc.w 	$002A			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCDrawBadge	ENDIF	IF GENERATING68K THEN		Macro		_MCSetUpEditMenu			dc.w 	$2F3C			dc.w 	$0008			dc.w 	$002B			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetUpEditMenu	ENDIF	IF GENERATING68K THEN		Macro		_MCGetMenuString			dc.w 	$2F3C			dc.w 	$000A			dc.w 	$002C			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCGetMenuString	ENDIF	IF GENERATING68K THEN		Macro		_MCSetActionFilterWithRefCon			dc.w 	$2F3C			dc.w 	$0008			dc.w 	$002D			moveq	#0,d0			dc.w 	$A82A		EndM	ELSE		IMPORT	MCSetActionFilterWithRefCon	ENDIFkMCSetMovieSelect				EQU		$2kMCGetIndMovieSelect			EQU		$5kMCRemoveMovieSelect			EQU		$6kMCIsPlayerEventSelect			EQU		$7kMCSetActionFilterSelect		EQU		$8kMCDoActionSelect				EQU		$9kMCSetControllerAttachedSelect	EQU		$AkMCIsControllerAttachedSelect	EQU		$BkMCSetControllerPortSelect		EQU		$CkMCGetControllerPortSelect		EQU		$DkMCSetVisibleSelect				EQU		$EkMCGetVisibleSelect				EQU		$FkMCGetControllerBoundsRectSelect EQU		$10kMCSetControllerBoundsRectSelect EQU		$11kMCGetControllerBoundsRgnSelect	EQU		$12kMCGetWindowRgnSelect			EQU		$13kMCMovieChangedSelect			EQU		$14kMCSetDurationSelect			EQU		$15kMCGetCurrentTimeSelect			EQU		$16kMCNewAttachedControllerSelect	EQU		$17kMCDrawSelect					EQU		$18kMCActivateSelect				EQU		$19kMCIdleSelect					EQU		$1AkMCKeySelect					EQU		$1BkMCClickSelect					EQU		$1CkMCEnableEditingSelect			EQU		$1DkMCIsEditingEnabledSelect		EQU		$1EkMCCopySelect					EQU		$1FkMCCutSelect					EQU		$20kMCPasteSelect					EQU		$21kMCClearSelect					EQU		$22kMCUndoSelect					EQU		$23kMCPositionControllerSelect		EQU		$24kMCGetControllerInfoSelect		EQU		$25kMCSetClipSelect				EQU		$28kMCGetClipSelect				EQU		$29kMCDrawBadgeSelect				EQU		$2AkMCSetUpEditMenuSelect			EQU		$2BkMCGetMenuStringSelect			EQU		$2CkMCSetActionFilterWithRefConSelect EQU		$2D;***************************************;*										*;*  		T  I  M  E  B  A  S  E			*;*										*;***************************************	IF GENERATING68K THEN		Macro		_NewTimeBase			move.w	#$A5,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewTimeBase	ENDIF	IF GENERATING68K THEN		Macro		_DisposeTimeBase			move.w	#$B6,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeTimeBase	ENDIF	IF GENERATING68K THEN		Macro		_GetTimeBaseTime			move.w	#$A6,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTimeBaseTime	ENDIF	IF GENERATING68K THEN		Macro		_SetTimeBaseTime			move.w	#$A7,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTimeBaseTime	ENDIF	IF GENERATING68K THEN		Macro		_SetTimeBaseValue			move.w	#$A8,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTimeBaseValue	ENDIF	IF GENERATING68K THEN		Macro		_GetTimeBaseRate			move.w	#$A9,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTimeBaseRate	ENDIF	IF GENERATING68K THEN		Macro		_SetTimeBaseRate			move.w	#$AA,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTimeBaseRate	ENDIF	IF GENERATING68K THEN		Macro		_GetTimeBaseStartTime			move.w	#$AB,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTimeBaseStartTime	ENDIF	IF GENERATING68K THEN		Macro		_SetTimeBaseStartTime			move.w	#$AC,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTimeBaseStartTime	ENDIF	IF GENERATING68K THEN		Macro		_GetTimeBaseStopTime			move.w	#$AD,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTimeBaseStopTime	ENDIF	IF GENERATING68K THEN		Macro		_SetTimeBaseStopTime			move.w	#$AE,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTimeBaseStopTime	ENDIF	IF GENERATING68K THEN		Macro		_GetTimeBaseFlags			move.w	#$B1,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTimeBaseFlags	ENDIF	IF GENERATING68K THEN		Macro		_SetTimeBaseFlags			move.w	#$B2,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTimeBaseFlags	ENDIF	IF GENERATING68K THEN		Macro		_SetTimeBaseMasterTimeBase			move.w	#$B4,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTimeBaseMasterTimeBase	ENDIF	IF GENERATING68K THEN		Macro		_GetTimeBaseMasterTimeBase			move.w	#$AF,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTimeBaseMasterTimeBase	ENDIF	IF GENERATING68K THEN		Macro		_SetTimeBaseMasterClock			move.w	#$B3,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTimeBaseMasterClock	ENDIF	IF GENERATING68K THEN		Macro		_GetTimeBaseMasterClock			move.w	#$B0,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTimeBaseMasterClock	ENDIF	IF GENERATING68K THEN		Macro		_ConvertTime			move.w	#$B5,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ConvertTime	ENDIF	IF GENERATING68K THEN		Macro		_ConvertTimeScale			move.w	#$B7,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ConvertTimeScale	ENDIF	IF GENERATING68K THEN		Macro		_AddTime			move.w	#$10C,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddTime	ENDIF	IF GENERATING68K THEN		Macro		_SubtractTime			move.w	#$10D,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SubtractTime	ENDIF	IF GENERATING68K THEN		Macro		_GetTimeBaseStatus			move.w	#$10B,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTimeBaseStatus	ENDIF	IF GENERATING68K THEN		Macro		_SetTimeBaseZero			move.w	#$128,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	SetTimeBaseZero	ENDIF	IF GENERATING68K THEN		Macro		_GetTimeBaseEffectiveRate			move.w	#$124,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetTimeBaseEffectiveRate	ENDIF;***************************************;*										*;*  		C  A  L  L  B  A  C  K 			*;*										*;***************************************	IF GENERATING68K THEN		Macro		_NewCallBack			move.w	#$EB,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	NewCallBack	ENDIF	IF GENERATING68K THEN		Macro		_DisposeCallBack			move.w	#$EC,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DisposeCallBack	ENDIF	IF GENERATING68K THEN		Macro		_GetCallBackType			move.w	#$ED,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetCallBackType	ENDIF	IF GENERATING68K THEN		Macro		_GetCallBackTimeBase			move.w	#$EE,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetCallBackTimeBase	ENDIF	IF GENERATING68K THEN		Macro		_CallMeWhen			move.w	#$B8,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	CallMeWhen	ENDIF	IF GENERATING68K THEN		Macro		_CancelCallBack			move.w	#$B9,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	CancelCallBack	ENDIF;***************************************;*										*;*  		C L O C K   C A L L B A C K  	*;*  		      S U P P O R T  			*;*										*;***************************************	IF GENERATING68K THEN		Macro		_AddCallBackToTimeBase			move.w	#$129,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	AddCallBackToTimeBase	ENDIF	IF GENERATING68K THEN		Macro		_RemoveCallBackFromTimeBase			move.w	#$12A,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	RemoveCallBackFromTimeBase	ENDIF	IF GENERATING68K THEN		Macro		_GetFirstCallBack			move.w	#$12B,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetFirstCallBack	ENDIF	IF GENERATING68K THEN		Macro		_GetNextCallBack			move.w	#$12C,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	GetNextCallBack	ENDIF	IF GENERATING68K THEN		Macro		_ExecuteCallBack			move.w	#$12D,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	ExecuteCallBack	ENDIF;***************************************;*										*;*  		S Y N C    T A S K S		  	*;*  		      S U P P O R T  			*;*										*;***************************************	IF GENERATING68K THEN		Macro		_QueueSyncTask			move.w	#$203,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	QueueSyncTask	ENDIF	IF GENERATING68K THEN		Macro		_DequeueSyncTask			move.w	#$204,d0			dc.w 	$AAAA		EndM	ELSE		IMPORT	DequeueSyncTask	ENDIF; UPP call backs 	ENDIF ; __MOVIES__