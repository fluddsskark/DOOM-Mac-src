;;	File:		Files.a;;	Copyright:	© 1984-1994 by Apple Computer, Inc.;				All rights reserved.;;	Version:	Universal Interfaces 2.0a3  ETO #16, MPW prerelease.  Friday, November 11, 1994. ;;	Bugs?:		If you find a problem with this file, send the file and version;				information (from above) and the problem description to:;;					Internet:	apple.bugs@applelink.apple.com;					AppleLink:	APPLE.BUGS;;	IF &TYPE('__FILES__') = 'UNDEFINED' THEN__FILES__ SET 1	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN	include 'Types.a'	ENDIF;		include 'ConditionalMacros.a'								;	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN	include 'MixedMode.a'	ENDIF	IF &TYPE('__OSUTILS__') = 'UNDEFINED' THEN	include 'OSUtils.a'	ENDIF;		include 'Memory.a'											;; Finder Constants fsAtMark						EQU		0fOnDesk							EQU		1fsCurPerm						EQU		0fHasBundle						EQU		8192fsRdPerm						EQU		1fInvisible						EQU		16384fTrash							EQU		-3fsWrPerm						EQU		2fDesktop						EQU		-2fsRdWrPerm						EQU		3fDisk							EQU		0fsRdWrShPerm					EQU		4fsFromStart						EQU		1fsFromLEOF						EQU		2fsFromMark						EQU		3rdVerify						EQU		64ioDirFlg						EQU		3					; see IM IV-125 ioDirMask						EQU		$10fsRtParID						EQU		1fsRtDirID						EQU		2; CatSearch SearchBits Constants fsSBPartialName					EQU		1fsSBFullName					EQU		2fsSBFlAttrib					EQU		4fsSBFlFndrInfo					EQU		8fsSBFlLgLen						EQU		32fsSBFlPyLen						EQU		64fsSBFlRLgLen					EQU		128fsSBFlRPyLen					EQU		256fsSBFlCrDat						EQU		512fsSBFlMdDat						EQU		1024fsSBFlBkDat						EQU		2048fsSBFlXFndrInfo					EQU		4096fsSBFlParID						EQU		8192fsSBNegate						EQU		16384fsSBDrUsrWds					EQU		8fsSBDrNmFls						EQU		16fsSBDrCrDat						EQU		512fsSBDrMdDat						EQU		1024fsSBDrBkDat						EQU		2048fsSBDrFndrInfo					EQU		4096fsSBDrParID						EQU		8192; vMAttrib (GetVolParms) bit position constants bLimitFCBs						EQU		31bLocalWList						EQU		30bNoMiniFndr						EQU		29bNoVNEdit						EQU		28bNoLclSync						EQU		27bTrshOffLine					EQU		26bNoSwitchTo						EQU		25bNoDeskItems					EQU		20bNoBootBlks						EQU		19bAccessCntl						EQU		18bNoSysDir						EQU		17bHasExtFSVol					EQU		16bHasOpenDeny					EQU		15bHasCopyFile					EQU		14bHasMoveRename					EQU		13bHasDesktopMgr					EQU		12bHasShortName					EQU		11bHasFolderLock					EQU		10bHasPersonalAccessPrivileges	EQU		9bHasUserGroupList				EQU		8bHasCatSearch					EQU		7bHasFileIDs						EQU		6bHasBTreeMgr					EQU		5bHasBlankAccessPrivileges		EQU		4; Desktop Database icon Constants kLargeIcon						EQU		1kLarge4BitIcon					EQU		2kLarge8BitIcon					EQU		3kSmallIcon						EQU		4kSmall4BitIcon					EQU		5kSmall8BitIcon					EQU		6kLargeIconSize					EQU		256kLarge4BitIconSize				EQU		512kLarge8BitIconSize				EQU		1024kSmallIconSize					EQU		64kSmall4BitIconSize				EQU		128kSmall8BitIconSize				EQU		256; Foreign Privilege Model Identifiers fsUnixPriv						EQU		1; Version Release Stage Codes developStage					EQU		$20alphaStage						EQU		$40betaStage						EQU		$60finalStage						EQU		$80; Authentication Constants kNoUserAuthentication			EQU		1kPassword						EQU		2kEncryptPassword				EQU		3kTwoWayEncryptPassword			EQU		6hFileInfo						EQU		0dirInfo							EQU		1; mapping codes (ioObjType) for MapName & MapID kOwnerID2Name					EQU		1kGroupID2Name					EQU		2kOwnerName2ID					EQU		3kGroupName2ID					EQU		4; types of oj object to be returned (ioObjType) for _GetUGEntry kReturnNextUser					EQU		1kReturnNextGroup				EQU		2kReturnNextUG					EQU		3FInfo 					RECORD	0fdType					 ds.l	1									;the type of the filefdCreator				 ds.l	1									;file's creatorfdFlags					 ds.w	1									;flags ex. hasbundle,invisible,locked, etc.fdLocation				 ds		Point								;file's location in folderfdFldr					 ds.w	1									;folder containing filesizeof					 EQU	16						ENDRFXInfo 					RECORD	0fdIconID				 ds.w	1									;Icon IDfdUnused				 ds.w	3									;unused but reserved 6 bytesfdScript				 ds.b	1									;Script flag and numberfdXFlags				 ds.b	1									;More flag bitsfdComment				 ds.w	1									;Comment IDfdPutAway				 ds.l	1									;Home Dir IDsizeof					 EQU	16						ENDRDInfo 					RECORD	0frRect					 ds		Rect								;folder rectfrFlags					 ds.w	1									;FlagsfrLocation				 ds		Point								;folder locationfrView					 ds.w	1									;folder viewsizeof					 EQU	16						ENDRDXInfo 					RECORD	0frScroll				 ds		Point								;scroll positionfrOpenChain				 ds.l	1									;DirID chain of open foldersfrScript				 ds.b	1									;Script flag and numberfrXFlags				 ds.b	1									;More flag bitsfrComment				 ds.w	1									;commentfrPutAway				 ds.l	1									;DirIDsizeof					 EQU	16						ENDRGetVolParmsInfoBuffer 	RECORD	0vMVersion				 ds.w	1									;version numbervMAttrib				 ds.l	1									;bit vector of attributes (see vMAttrib constants)vMLocalHand				 ds.l	1									;handle to private datavMServerAdr				 ds.l	1									;AppleTalk server address or zerovMVolumeGrade			 ds.l	1									;approx. speed rating or zero if unratedvMForeignPrivID			 ds.w	1									;foreign privilege model supported or zero if nonesizeof					 EQU	20						ENDRIOParam 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioRefNum				 ds.w	1ioVersNum				 ds.b	1ioPermssn				 ds.b	1ioMisc					 ds.l	1ioBuffer				 ds.l	1ioReqCount				 ds.l	1ioActCount				 ds.l	1ioPosMode				 ds.w	1ioPosOffset				 ds.l	1sizeof					 EQU	50						ENDRFileParam 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioFRefNum				 ds.w	1ioFVersNum				 ds.b	1filler1					 ds.b	1ioFDirIndex				 ds.w	1ioFlAttrib				 ds.b	1ioFlVersNum				 ds.b	1ioFlFndrInfo			 ds		FInfoioFlNum					 ds.l	1ioFlStBlk				 ds.w	1ioFlLgLen				 ds.l	1ioFlPyLen				 ds.l	1ioFlRStBlk				 ds.w	1ioFlRLgLen				 ds.l	1ioFlRPyLen				 ds.l	1ioFlCrDat				 ds.l	1ioFlMdDat				 ds.l	1sizeof					 EQU	80						ENDRVolumeParam 			RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1filler2					 ds.l	1ioVolIndex				 ds.w	1ioVCrDate				 ds.l	1ioVLsBkUp				 ds.l	1ioVAtrb					 ds.w	1ioVNmFls				 ds.w	1ioVDirSt				 ds.w	1ioVBlLn					 ds.w	1ioVNmAlBlks				 ds.w	1ioVAlBlkSiz				 ds.l	1ioVClpSiz				 ds.l	1ioAlBlSt				 ds.w	1ioVNxtFNum				 ds.l	1ioVFrBlk				 ds.w	1sizeof					 EQU	64						ENDRCntrlParam 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioCRefNum				 ds.w	1csCode					 ds.w	1csParam					 ds.w	11sizeof					 EQU	50						ENDRSlotDevParam 			RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioSRefNum				 ds.w	1ioSVersNum				 ds.b	1ioSPermssn				 ds.b	1ioSMix					 ds.l	1ioSFlags				 ds.w	1ioSlot					 ds.b	1ioID					 ds.b	1sizeof					 EQU	36						ENDRMultiDevParam 			RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioMRefNum				 ds.w	1ioMVersNum				 ds.b	1ioMPermssn				 ds.b	1ioMMix					 ds.l	1ioMFlags				 ds.w	1ioSEBlkPtr				 ds.l	1sizeof					 EQU	38						ENDRParamBlockRec 			RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1VariantLevel0Begin		EQU	*ioRefNum				 ds.w	1ioVersNum				 ds.b	1ioPermssn				 ds.b	1ioMisc					 ds.l	1ioBuffer				 ds.l	1ioReqCount				 ds.l	1ioActCount				 ds.l	1ioPosMode				 ds.w	1ioPosOffset				 ds.l	1						ORG		VariantLevel0BeginioFRefNum				 ds.w	1ioFVersNum				 ds.b	1filler1					 ds.b	1ioFDirIndex				 ds.w	1ioFlAttrib				 ds.b	1ioFlVersNum				 ds.b	1ioFlFndrInfo			 ds		FInfoioFlNum					 ds.l	1ioFlStBlk				 ds.w	1ioFlLgLen				 ds.l	1ioFlPyLen				 ds.l	1ioFlRStBlk				 ds.w	1ioFlRLgLen				 ds.l	1ioFlRPyLen				 ds.l	1ioFlCrDat				 ds.l	1ioFlMdDat				 ds.l	1						ORG		VariantLevel0Beginfiller2					 ds.l	1ioVolIndex				 ds.w	1ioVCrDate				 ds.l	1ioVLsBkUp				 ds.l	1ioVAtrb					 ds.w	1ioVNmFls				 ds.w	1ioVDirSt				 ds.w	1ioVBlLn					 ds.w	1ioVNmAlBlks				 ds.w	1ioVAlBlkSiz				 ds.l	1ioVClpSiz				 ds.l	1ioAlBlSt				 ds.w	1ioVNxtFNum				 ds.l	1ioVFrBlk				 ds.w	1						ORG		VariantLevel0BeginioCRefNum				 ds.w	1csCode					 ds.w	1csParam					 ds.w	11						ORG		VariantLevel0BeginioSRefNum				 ds.w	1ioSVersNum				 ds.b	1ioSPermssn				 ds.b	1ioSMix					 ds.l	1ioSFlags				 ds.w	1ioSlot					 ds.b	1ioID					 ds.b	1						ORG		VariantLevel0BeginioMRefNum				 ds.w	1ioMVersNum				 ds.b	1ioMPermssn				 ds.b	1ioMMix					 ds.l	1ioMFlags				 ds.w	1ioSEBlkPtr				 ds.l	1sizeof					 EQU	80						ENDRCInfoPBRec 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioFRefNum				 ds.w	1ioFVersNum				 ds.b	1filler1					 ds.b	1ioFDirIndex				 ds.w	1ioFlAttrib				 ds.b	1filler2					 ds.b	1VariantLevel0Begin		EQU	*ioFlFndrInfo			 ds		FInfoioDirID					 ds.l	1ioFlStBlk				 ds.w	1ioFlLgLen				 ds.l	1ioFlPyLen				 ds.l	1ioFlRStBlk				 ds.w	1ioFlRLgLen				 ds.l	1ioFlRPyLen				 ds.l	1ioFlCrDat				 ds.l	1ioFlMdDat				 ds.l	1ioFlBkDat				 ds.l	1ioFlXFndrInfo			 ds		FXInfoioFlParID				 ds.l	1ioFlClpSiz				 ds.l	1						ORG		VariantLevel0BeginioDrUsrWds				 ds		DInfoioDrDirID				 ds.l	1ioDrNmFls				 ds.w	1filler3					 ds.w	9ioDrCrDat				 ds.l	1ioDrMdDat				 ds.l	1ioDrBkDat				 ds.l	1ioDrFndrInfo			 ds		DXInfoioDrParID				 ds.l	1sizeof					 EQU	108						ENDRCatPositionRec 			RECORD	0initialize				 ds.l	1priv					 ds.w	6sizeof					 EQU	16						ENDRFSSpec 					RECORD	0vRefNum					 ds.w	1parID					 ds.l	1name					 ds.l	16sizeof					 EQU	70						ENDR; pointer to array of FSSpecs ; The only difference between "const FSSpec*" and "ConstFSSpecPtr" is ;   that as a parameter, ConstFSSpecPtr is allowed to be NULL ; The following are structures to be filled out with the _GetVolMountInfo call; and passed back into the _VolumeMount call for external file system mounts. ; the "signature" of the file system ; the signature for AppleShare AppleShareMediaType				EQU		'afpm'VolMountInfoHeader 		RECORD	0length					 ds.w	1									; length of location data (including self) media					 ds.l	1									; type of media.  Variable length data follows sizeof					 EQU	6						ENDRAFPVolMountInfo 		RECORD	0length					 ds.w	1									; length of location data (including self) media					 ds.l	1									; type of media flags					 ds.w	1									; bits for no messages, no reconnect nbpInterval				 ds.b	1									; NBP Interval parameter (IM2, p.322) nbpCount				 ds.b	1									; NBP Interval parameter (IM2, p.322) uamType					 ds.w	1									; User Authentication Method zoneNameOffset			 ds.w	1									; short positive offset from start of struct to Zone Name serverNameOffset		 ds.w	1									; offset to pascal Server Name string volNameOffset			 ds.w	1									; offset to pascal Volume Name string userNameOffset			 ds.w	1									; offset to pascal User Name string userPasswordOffset		 ds.w	1									; offset to pascal User Password string volPasswordOffset		 ds.w	1									; offset to pascal Volume Password string AFPData					 ds.b	144								; variable length data may follow sizeof					 EQU	168						ENDRDTPBRec 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioDTRefNum				 ds.w	1									; desktop refnum ioIndex					 ds.w	1ioTagInfo				 ds.l	1ioDTBuffer				 ds.l	1ioDTReqCount			 ds.l	1ioDTActCount			 ds.l	1ioFiller1				 ds.b	1ioIconType				 ds.b	1ioFiller2				 ds.w	1ioDirID					 ds.l	1ioFileCreator			 ds.l	1ioFileType				 ds.l	1ioFiller3				 ds.l	1ioDTLgLen				 ds.l	1ioDTPyLen				 ds.l	1ioFiller4				 ds.w	14ioAPPLParID				 ds.l	1sizeof					 EQU	104						ENDRHIOParam 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioRefNum				 ds.w	1ioVersNum				 ds.b	1ioPermssn				 ds.b	1ioMisc					 ds.l	1ioBuffer				 ds.l	1ioReqCount				 ds.l	1ioActCount				 ds.l	1ioPosMode				 ds.w	1ioPosOffset				 ds.l	1sizeof					 EQU	50						ENDRHFileParam 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioFRefNum				 ds.w	1ioFVersNum				 ds.b	1filler1					 ds.b	1ioFDirIndex				 ds.w	1ioFlAttrib				 ds.b	1ioFlVersNum				 ds.b	1ioFlFndrInfo			 ds		FInfoioDirID					 ds.l	1ioFlStBlk				 ds.w	1ioFlLgLen				 ds.l	1ioFlPyLen				 ds.l	1ioFlRStBlk				 ds.w	1ioFlRLgLen				 ds.l	1ioFlRPyLen				 ds.l	1ioFlCrDat				 ds.l	1ioFlMdDat				 ds.l	1sizeof					 EQU	80						ENDRHVolumeParam 			RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1filler2					 ds.l	1ioVolIndex				 ds.w	1ioVCrDate				 ds.l	1ioVLsMod				 ds.l	1ioVAtrb					 ds.w	1ioVNmFls				 ds.w	1ioVBitMap				 ds.w	1ioAllocPtr				 ds.w	1ioVNmAlBlks				 ds.w	1ioVAlBlkSiz				 ds.l	1ioVClpSiz				 ds.l	1ioAlBlSt				 ds.w	1ioVNxtCNID				 ds.l	1ioVFrBlk				 ds.w	1ioVSigWord				 ds.w	1ioVDrvInfo				 ds.w	1ioVDRefNum				 ds.w	1ioVFSID					 ds.w	1ioVBkUp					 ds.l	1ioVSeqNum				 ds.w	1ioVWrCnt				 ds.l	1ioVFilCnt				 ds.l	1ioVDirCnt				 ds.l	1ioVFndrInfo				 ds.l	8sizeof					 EQU	122						ENDRAccessParam 			RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1filler3					 ds.w	1ioDenyModes				 ds.w	1filler4					 ds.w	1filler5					 ds.b	1ioACUser				 ds.b	1filler6					 ds.l	1ioACOwnerID				 ds.l	1ioACGroupID				 ds.l	1ioACAccess				 ds.l	1ioDirID					 ds.l	1sizeof					 EQU	52						ENDRObjParam 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1filler7					 ds.w	1ioObjType				 ds.w	1ioObjNamePtr			 ds.l	1ioObjID					 ds.l	1sizeof					 EQU	36						ENDRCopyParam 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioDstVRefNum			 ds.w	1filler8					 ds.w	1ioNewName				 ds.l	1ioCopyName				 ds.l	1ioNewDirID				 ds.l	1filler14				 ds.l	1filler15				 ds.l	1ioDirID					 ds.l	1sizeof					 EQU	52						ENDRWDParam 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1filler9					 ds.w	1ioWDIndex				 ds.w	1ioWDProcID				 ds.l	1ioWDVRefNum				 ds.w	1filler10				 ds.w	1filler11				 ds.l	1filler12				 ds.l	1filler13				 ds.l	1ioWDDirID				 ds.l	1sizeof					 EQU	52						ENDRFIDParam 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1filler14				 ds.l	1ioDestNamePtr			 ds.l	1filler15				 ds.l	1ioDestDirID				 ds.l	1filler16				 ds.l	1filler17				 ds.l	1ioSrcDirID				 ds.l	1filler18				 ds.w	1ioFileID				 ds.l	1sizeof					 EQU	58						ENDRForeignPrivParam 		RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioFiller21				 ds.l	1ioFiller22				 ds.l	1ioForeignPrivBuffer		 ds.l	1ioForeignPrivActCount	 ds.l	1ioForeignPrivReqCount	 ds.l	1ioFiller23				 ds.l	1ioForeignPrivDirID		 ds.l	1ioForeignPrivInfo1		 ds.l	1ioForeignPrivInfo2		 ds.l	1ioForeignPrivInfo3		 ds.l	1ioForeignPrivInfo4		 ds.l	1sizeof					 EQU	68						ENDRHParamBlockRec 			RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1VariantLevel0Begin		EQU	*ioRefNum				 ds.w	1ioVersNum				 ds.b	1ioPermssn				 ds.b	1ioMisc					 ds.l	1ioBuffer				 ds.l	1ioReqCount				 ds.l	1ioActCount				 ds.l	1ioPosMode				 ds.w	1ioPosOffset				 ds.l	1						ORG		VariantLevel0BeginioFRefNum				 ds.w	1ioFVersNum				 ds.b	1filler1					 ds.b	1ioFDirIndex				 ds.w	1ioFlAttrib				 ds.b	1ioFlVersNum				 ds.b	1ioFlFndrInfo			 ds		FInfoioDirID					 ds.l	1ioFlStBlk				 ds.w	1ioFlLgLen				 ds.l	1ioFlPyLen				 ds.l	1ioFlRStBlk				 ds.w	1ioFlRLgLen				 ds.l	1ioFlRPyLen				 ds.l	1ioFlCrDat				 ds.l	1ioFlMdDat				 ds.l	1						ORG		VariantLevel0Beginfiller2					 ds.l	1ioVolIndex				 ds.w	1ioVCrDate				 ds.l	1ioVLsMod				 ds.l	1ioVAtrb					 ds.w	1ioVNmFls				 ds.w	1ioVBitMap				 ds.w	1ioAllocPtr				 ds.w	1ioVNmAlBlks				 ds.w	1ioVAlBlkSiz				 ds.l	1ioVClpSiz				 ds.l	1ioAlBlSt				 ds.w	1ioVNxtCNID				 ds.l	1ioVFrBlk				 ds.w	1ioVSigWord				 ds.w	1ioVDrvInfo				 ds.w	1ioVDRefNum				 ds.w	1ioVFSID					 ds.w	1ioVBkUp					 ds.l	1ioVSeqNum				 ds.w	1ioVWrCnt				 ds.l	1ioVFilCnt				 ds.l	1ioVDirCnt				 ds.l	1ioVFndrInfo				 ds.l	8						ORG		VariantLevel0Beginfiller3					 ds.w	1ioDenyModes				 ds.w	1filler4					 ds.w	1filler5					 ds.b	1ioACUser				 ds.b	1filler6					 ds.l	1ioACOwnerID				 ds.l	1ioACGroupID				 ds.l	1ioACAccess				 ds.l	1						ORG		VariantLevel0Beginfiller7					 ds.w	1ioObjType				 ds.w	1ioObjNamePtr			 ds.l	1ioObjID					 ds.l	1						ORG		VariantLevel0BeginioDstVRefNum			 ds.w	1filler8					 ds.w	1ioNewName				 ds.l	1ioCopyName				 ds.l	1ioNewDirID				 ds.l	1						ORG		VariantLevel0Beginfiller9					 ds.w	1ioWDIndex				 ds.w	1ioWDProcID				 ds.l	1ioWDVRefNum				 ds.w	1filler10				 ds.w	1filler11				 ds.l	1filler12				 ds.l	1filler13				 ds.l	1ioWDDirID				 ds.l	1						ORG		VariantLevel0Beginfiller14				 ds.l	1ioDestNamePtr			 ds.l	1filler15				 ds.l	1ioDestDirID				 ds.l	1filler16				 ds.l	1filler17				 ds.l	1ioSrcDirID				 ds.l	1filler18				 ds.w	1ioFileID				 ds.l	1						ORG		VariantLevel0BeginioMatchPtr				 ds.l	1ioReqMatchCount			 ds.l	1ioActMatchCount			 ds.l	1ioSearchBits			 ds.l	1ioSearchInfo1			 ds.l	1ioSearchInfo2			 ds.l	1ioSearchTime			 ds.l	1ioCatPosition			 ds		CatPositionRecioOptBuffer				 ds.l	1ioOptBufSize			 ds.l	1						ORG		VariantLevel0BeginioFiller21				 ds.l	1ioFiller22				 ds.l	1ioForeignPrivBuffer		 ds.l	1ioForeignPrivActCount	 ds.l	1ioForeignPrivReqCount	 ds.l	1ioFiller23				 ds.l	1ioForeignPrivDirID		 ds.l	1ioForeignPrivInfo1		 ds.l	1ioForeignPrivInfo2		 ds.l	1ioForeignPrivInfo3		 ds.l	1ioForeignPrivInfo4		 ds.l	1sizeof					 EQU	122						ENDRCMovePBRec 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1filler1					 ds.l	1ioNewName				 ds.l	1filler2					 ds.l	1ioNewDirID				 ds.l	1filler3					 ds.l	2ioDirID					 ds.l	1sizeof					 EQU	52						ENDRWDPBRec 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1filler1					 ds.w	1ioWDIndex				 ds.w	1ioWDProcID				 ds.l	1ioWDVRefNum				 ds.w	1filler2					 ds.w	7ioWDDirID				 ds.l	1sizeof					 EQU	52						ENDRFCBPBRec 				RECORD	0qLink					 ds.l	1qType					 ds.w	1ioTrap					 ds.w	1ioCmdAddr				 ds.l	1ioCompletion			 ds.l	1ioResult				 ds.w	1ioNamePtr				 ds.l	1ioVRefNum				 ds.w	1ioRefNum				 ds.w	1filler					 ds.w	1ioFCBIndx				 ds.w	1filler1					 ds.w	1ioFCBFlNm				 ds.l	1ioFCBFlags				 ds.w	1ioFCBStBlk				 ds.w	1ioFCBEOF				 ds.l	1ioFCBPLen				 ds.l	1ioFCBCrPs				 ds.l	1ioFCBVRefNum			 ds.w	1ioFCBClpSiz				 ds.l	1ioFCBParID				 ds.l	1sizeof					 EQU	62						ENDRVCB 					RECORD	0qLink					 ds.l	1qType					 ds.w	1vcbFlags				 ds.w	1vcbSigWord				 ds.w	1vcbCrDate				 ds.l	1vcbLsMod				 ds.l	1vcbAtrb					 ds.w	1vcbNmFls				 ds.w	1vcbVBMSt				 ds.w	1vcbAllocPtr				 ds.w	1vcbNmAlBlks				 ds.w	1vcbAlBlkSiz				 ds.l	1vcbClpSiz				 ds.l	1vcbAlBlSt				 ds.w	1vcbNxtCNID				 ds.l	1vcbFreeBks				 ds.w	1vcbVN					 ds.l	7vcbDrvNum				 ds.w	1vcbDRefNum				 ds.w	1vcbFSID					 ds.w	1vcbVRefNum				 ds.w	1vcbMAdr					 ds.l	1vcbBufAdr				 ds.l	1vcbMLen					 ds.w	1vcbDirIndex				 ds.w	1vcbDirBlk				 ds.w	1vcbVolBkUp				 ds.l	1vcbVSeqNum				 ds.w	1vcbWrCnt				 ds.l	1vcbXTClpSiz				 ds.l	1vcbCTClpSiz				 ds.l	1vcbNmRtDirs				 ds.w	1vcbFilCnt				 ds.l	1vcbDirCnt				 ds.l	1vcbFndrInfo				 ds.l	8vcbVCSize				 ds.w	1vcbVBMCSiz				 ds.w	1vcbCtlCSiz				 ds.w	1vcbXTAlBlks				 ds.w	1vcbCTAlBlks				 ds.w	1vcbXTRef				 ds.w	1vcbCTRef				 ds.w	1vcbCtlBuf				 ds.l	1vcbDirIDM				 ds.l	1vcbOffsM				 ds.w	1sizeof					 EQU	178						ENDRDrvQEl 					RECORD	0qLink					 ds.l	1qType					 ds.w	1dQDrive					 ds.w	1dQRefNum				 ds.w	1dQFSID					 ds.w	1dQDrvSz					 ds.w	1dQDrvSz2				 ds.w	1sizeof					 EQU	16						ENDR	IF GENERATING68K THEN		_PBOpenSync:	OPWORD	$A000	ELSE		IMPORT	PBOpenSync	ENDIF	IF GENERATING68K THEN		_PBOpenAsync:	OPWORD	$A400	ELSE		IMPORT	PBOpenAsync	ENDIF	IF GENERATING68K THEN		_PBOpenImmed:	OPWORD	$A200	ELSE		IMPORT	PBOpenImmed	ENDIF	IF GENERATING68K THEN		_PBCloseSync:	OPWORD	$A001	ELSE		IMPORT	PBCloseSync	ENDIF	IF GENERATING68K THEN		_PBCloseAsync:	OPWORD	$A401	ELSE		IMPORT	PBCloseAsync	ENDIF	IF GENERATING68K THEN		_PBCloseImmed:	OPWORD	$A201	ELSE		IMPORT	PBCloseImmed	ENDIF	IF GENERATING68K THEN		_PBReadSync:	OPWORD	$A002	ELSE		IMPORT	PBReadSync	ENDIF	IF GENERATING68K THEN		_PBReadAsync:	OPWORD	$A402	ELSE		IMPORT	PBReadAsync	ENDIF	IF GENERATING68K THEN		_PBReadImmed:	OPWORD	$A202	ELSE		IMPORT	PBReadImmed	ENDIF	IF GENERATING68K THEN		_PBWriteSync:	OPWORD	$A003	ELSE		IMPORT	PBWriteSync	ENDIF	IF GENERATING68K THEN		_PBWriteAsync:	OPWORD	$A403	ELSE		IMPORT	PBWriteAsync	ENDIF	IF GENERATING68K THEN		_PBWriteImmed:	OPWORD	$A203	ELSE		IMPORT	PBWriteImmed	ENDIF	IF GENERATING68K THEN		_PBGetVInfoSync:	OPWORD	$A007	ELSE		IMPORT	PBGetVInfoSync	ENDIF	IF GENERATING68K THEN		_PBGetVInfoAsync:	OPWORD	$A407	ELSE		IMPORT	PBGetVInfoAsync	ENDIF	IF GENERATING68K THEN		_PBGetVolSync:	OPWORD	$A014	ELSE		IMPORT	PBGetVolSync	ENDIF	IF GENERATING68K THEN		_PBGetVolAsync:	OPWORD	$A414	ELSE		IMPORT	PBGetVolAsync	ENDIF	IF GENERATING68K THEN		_PBSetVolSync:	OPWORD	$A015	ELSE		IMPORT	PBSetVolSync	ENDIF	IF GENERATING68K THEN		_PBSetVolAsync:	OPWORD	$A415	ELSE		IMPORT	PBSetVolAsync	ENDIF	IF GENERATING68K THEN		_PBFlushVolSync:	OPWORD	$A013	ELSE		IMPORT	PBFlushVolSync	ENDIF	IF GENERATING68K THEN		_PBFlushVolAsync:	OPWORD	$A413	ELSE		IMPORT	PBFlushVolAsync	ENDIF	IF GENERATING68K THEN		_PBCreateSync:	OPWORD	$A008	ELSE		IMPORT	PBCreateSync	ENDIF	IF GENERATING68K THEN		_PBCreateAsync:	OPWORD	$A408	ELSE		IMPORT	PBCreateAsync	ENDIF	IF GENERATING68K THEN		_PBDeleteSync:	OPWORD	$A009	ELSE		IMPORT	PBDeleteSync	ENDIF	IF GENERATING68K THEN		_PBDeleteAsync:	OPWORD	$A409	ELSE		IMPORT	PBDeleteAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBOpenDFSync			moveq	#26,d0			dc.w 	$A060		EndM	ELSE		IMPORT	PBOpenDFSync	ENDIF	IF GENERATING68K THEN		Macro		_PBOpenDFAsync			moveq	#26,d0			dc.w 	$A460		EndM	ELSE		IMPORT	PBOpenDFAsync	ENDIF	IF GENERATING68K THEN		_PBOpenRFSync:	OPWORD	$A00A	ELSE		IMPORT	PBOpenRFSync	ENDIF	IF GENERATING68K THEN		_PBOpenRFAsync:	OPWORD	$A40A	ELSE		IMPORT	PBOpenRFAsync	ENDIF	IF GENERATING68K THEN		_PBRenameSync:	OPWORD	$A00B	ELSE		IMPORT	PBRenameSync	ENDIF	IF GENERATING68K THEN		_PBRenameAsync:	OPWORD	$A40B	ELSE		IMPORT	PBRenameAsync	ENDIF	IF GENERATING68K THEN		_PBGetFInfoSync:	OPWORD	$A00C	ELSE		IMPORT	PBGetFInfoSync	ENDIF	IF GENERATING68K THEN		_PBGetFInfoAsync:	OPWORD	$A40C	ELSE		IMPORT	PBGetFInfoAsync	ENDIF	IF GENERATING68K THEN		_PBSetFInfoSync:	OPWORD	$A00D	ELSE		IMPORT	PBSetFInfoSync	ENDIF	IF GENERATING68K THEN		_PBSetFInfoAsync:	OPWORD	$A40D	ELSE		IMPORT	PBSetFInfoAsync	ENDIF	IF GENERATING68K THEN		_PBSetFLockSync:	OPWORD	$A041	ELSE		IMPORT	PBSetFLockSync	ENDIF	IF GENERATING68K THEN		_PBSetFLockAsync:	OPWORD	$A441	ELSE		IMPORT	PBSetFLockAsync	ENDIF	IF GENERATING68K THEN		_PBRstFLockSync:	OPWORD	$A042	ELSE		IMPORT	PBRstFLockSync	ENDIF	IF GENERATING68K THEN		_PBRstFLockAsync:	OPWORD	$A442	ELSE		IMPORT	PBRstFLockAsync	ENDIF	IF GENERATING68K THEN		_PBSetFVersSync:	OPWORD	$A043	ELSE		IMPORT	PBSetFVersSync	ENDIF	IF GENERATING68K THEN		_PBSetFVersAsync:	OPWORD	$A443	ELSE		IMPORT	PBSetFVersAsync	ENDIF	IF GENERATING68K THEN		_PBAllocateSync:	OPWORD	$A010	ELSE		IMPORT	PBAllocateSync	ENDIF	IF GENERATING68K THEN		_PBAllocateAsync:	OPWORD	$A410	ELSE		IMPORT	PBAllocateAsync	ENDIF	IF GENERATING68K THEN		_PBGetEOFSync:	OPWORD	$A011	ELSE		IMPORT	PBGetEOFSync	ENDIF	IF GENERATING68K THEN		_PBGetEOFAsync:	OPWORD	$A411	ELSE		IMPORT	PBGetEOFAsync	ENDIF	IF GENERATING68K THEN		_PBSetEOFSync:	OPWORD	$A012	ELSE		IMPORT	PBSetEOFSync	ENDIF	IF GENERATING68K THEN		_PBSetEOFAsync:	OPWORD	$A412	ELSE		IMPORT	PBSetEOFAsync	ENDIF	IF GENERATING68K THEN		_PBGetFPosSync:	OPWORD	$A018	ELSE		IMPORT	PBGetFPosSync	ENDIF	IF GENERATING68K THEN		_PBGetFPosAsync:	OPWORD	$A418	ELSE		IMPORT	PBGetFPosAsync	ENDIF	IF GENERATING68K THEN		_PBSetFPosSync:	OPWORD	$A044	ELSE		IMPORT	PBSetFPosSync	ENDIF	IF GENERATING68K THEN		_PBSetFPosAsync:	OPWORD	$A444	ELSE		IMPORT	PBSetFPosAsync	ENDIF	IF GENERATING68K THEN		_PBFlushFileSync:	OPWORD	$A045	ELSE		IMPORT	PBFlushFileSync	ENDIF	IF GENERATING68K THEN		_PBFlushFileAsync:	OPWORD	$A445	ELSE		IMPORT	PBFlushFileAsync	ENDIF	IF GENERATING68K THEN		_PBMountVol:	OPWORD	$A00F	ELSE		IMPORT	PBMountVol	ENDIF	IF GENERATING68K THEN		_PBUnmountVol:	OPWORD	$A00E	ELSE		IMPORT	PBUnmountVol	ENDIF	IF GENERATING68K THEN		_PBEject:	OPWORD	$A017	ELSE		IMPORT	PBEject	ENDIF	IF GENERATING68K THEN		_PBOffLine:	OPWORD	$A035	ELSE		IMPORT	PBOffLine	ENDIF	IF GENERATING68K THEN		Macro		_PBOpenWDSync			moveq	#1,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBOpenWDSync	ENDIF	IF GENERATING68K THEN		Macro		_PBOpenWDAsync			moveq	#1,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBOpenWDAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBCloseWDSync			moveq	#2,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBCloseWDSync	ENDIF	IF GENERATING68K THEN		Macro		_PBCloseWDAsync			moveq	#2,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBCloseWDAsync	ENDIF	IF GENERATING68K THEN		_PBHSetVolSync:	OPWORD	$A215	ELSE		IMPORT	PBHSetVolSync	ENDIF	IF GENERATING68K THEN		_PBHSetVolAsync:	OPWORD	$A615	ELSE		IMPORT	PBHSetVolAsync	ENDIF	IF GENERATING68K THEN		_PBHGetVolSync:	OPWORD	$A214	ELSE		IMPORT	PBHGetVolSync	ENDIF	IF GENERATING68K THEN		_PBHGetVolAsync:	OPWORD	$A614	ELSE		IMPORT	PBHGetVolAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBCatMoveSync			moveq	#5,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBCatMoveSync	ENDIF	IF GENERATING68K THEN		Macro		_PBCatMoveAsync			moveq	#5,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBCatMoveAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDirCreateSync			moveq	#6,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDirCreateSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDirCreateAsync			moveq	#6,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDirCreateAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetWDInfoSync			moveq	#7,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBGetWDInfoSync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetWDInfoAsync			moveq	#7,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBGetWDInfoAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetFCBInfoSync			moveq	#8,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBGetFCBInfoSync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetFCBInfoAsync			moveq	#8,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBGetFCBInfoAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetCatInfoSync			moveq	#9,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBGetCatInfoSync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetCatInfoAsync			moveq	#9,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBGetCatInfoAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBSetCatInfoSync			moveq	#10,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBSetCatInfoSync	ENDIF	IF GENERATING68K THEN		Macro		_PBSetCatInfoAsync			moveq	#10,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBSetCatInfoAsync	ENDIF	IF GENERATING68K THEN		_PBAllocContigSync:	OPWORD	$A210	ELSE		IMPORT	PBAllocContigSync	ENDIF	IF GENERATING68K THEN		_PBAllocContigAsync:	OPWORD	$A610	ELSE		IMPORT	PBAllocContigAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBLockRangeSync			moveq	#16,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBLockRangeSync	ENDIF	IF GENERATING68K THEN		Macro		_PBLockRangeAsync			moveq	#16,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBLockRangeAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBUnlockRangeSync			moveq	#17,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBUnlockRangeSync	ENDIF	IF GENERATING68K THEN		Macro		_PBUnlockRangeAsync			moveq	#17,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBUnlockRangeAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBSetVInfoSync			moveq	#11,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBSetVInfoSync	ENDIF	IF GENERATING68K THEN		Macro		_PBSetVInfoAsync			moveq	#11,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBSetVInfoAsync	ENDIF	IF GENERATING68K THEN		_PBHGetVInfoSync:	OPWORD	$A207	ELSE		IMPORT	PBHGetVInfoSync	ENDIF	IF GENERATING68K THEN		_PBHGetVInfoAsync:	OPWORD	$A607	ELSE		IMPORT	PBHGetVInfoAsync	ENDIF	IF GENERATING68K THEN		_PBHOpenSync:	OPWORD	$A200	ELSE		IMPORT	PBHOpenSync	ENDIF	IF GENERATING68K THEN		_PBHOpenAsync:	OPWORD	$A600	ELSE		IMPORT	PBHOpenAsync	ENDIF	IF GENERATING68K THEN		_PBHOpenRFSync:	OPWORD	$A20A	ELSE		IMPORT	PBHOpenRFSync	ENDIF	IF GENERATING68K THEN		_PBHOpenRFAsync:	OPWORD	$A60A	ELSE		IMPORT	PBHOpenRFAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHOpenDFSync			moveq	#26,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHOpenDFSync	ENDIF	IF GENERATING68K THEN		Macro		_PBHOpenDFAsync			moveq	#26,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHOpenDFAsync	ENDIF	IF GENERATING68K THEN		_PBHCreateSync:	OPWORD	$A208	ELSE		IMPORT	PBHCreateSync	ENDIF	IF GENERATING68K THEN		_PBHCreateAsync:	OPWORD	$A608	ELSE		IMPORT	PBHCreateAsync	ENDIF	IF GENERATING68K THEN		_PBHDeleteSync:	OPWORD	$A209	ELSE		IMPORT	PBHDeleteSync	ENDIF	IF GENERATING68K THEN		_PBHDeleteAsync:	OPWORD	$A609	ELSE		IMPORT	PBHDeleteAsync	ENDIF	IF GENERATING68K THEN		_PBHRenameSync:	OPWORD	$A20B	ELSE		IMPORT	PBHRenameSync	ENDIF	IF GENERATING68K THEN		_PBHRenameAsync:	OPWORD	$A60B	ELSE		IMPORT	PBHRenameAsync	ENDIF	IF GENERATING68K THEN		_PBHRstFLockSync:	OPWORD	$A242	ELSE		IMPORT	PBHRstFLockSync	ENDIF	IF GENERATING68K THEN		_PBHRstFLockAsync:	OPWORD	$A642	ELSE		IMPORT	PBHRstFLockAsync	ENDIF	IF GENERATING68K THEN		_PBHSetFLockSync:	OPWORD	$A241	ELSE		IMPORT	PBHSetFLockSync	ENDIF	IF GENERATING68K THEN		_PBHSetFLockAsync:	OPWORD	$A641	ELSE		IMPORT	PBHSetFLockAsync	ENDIF	IF GENERATING68K THEN		_PBHGetFInfoSync:	OPWORD	$A20C	ELSE		IMPORT	PBHGetFInfoSync	ENDIF	IF GENERATING68K THEN		_PBHGetFInfoAsync:	OPWORD	$A60C	ELSE		IMPORT	PBHGetFInfoAsync	ENDIF	IF GENERATING68K THEN		_PBHSetFInfoSync:	OPWORD	$A20D	ELSE		IMPORT	PBHSetFInfoSync	ENDIF	IF GENERATING68K THEN		_PBHSetFInfoAsync:	OPWORD	$A60D	ELSE		IMPORT	PBHSetFInfoAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBMakeFSSpecSync			moveq	#27,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBMakeFSSpecSync	ENDIF	IF GENERATING68K THEN		Macro		_PBMakeFSSpecAsync			moveq	#27,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBMakeFSSpecAsync	ENDIF	IF GENERATING68K THEN		_FInitQueue:	OPWORD	$A016	ELSE		IMPORT	FInitQueue	ENDIF	IF GENERATING68K THEN		Macro		_GetFSQHdr			dc.w 	$2EBC			dc.w 	$0000			dc.w 	$0360		EndM	ELSE		IMPORT	GetFSQHdr	ENDIF	IF GENERATING68K THEN		Macro		_GetDrvQHdr			dc.w 	$2EBC			dc.w 	$0000			dc.w 	$0308		EndM	ELSE		IMPORT	GetDrvQHdr	ENDIF	IF GENERATING68K THEN		Macro		_GetVCBQHdr			dc.w 	$2EBC			dc.w 	$0000			dc.w 	$0356		EndM	ELSE		IMPORT	GetVCBQHdr	ENDIF;  shared environment  	IF GENERATING68K THEN		Macro		_PBHGetVolParmsSync			moveq	#48,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHGetVolParmsSync	ENDIF	IF GENERATING68K THEN		Macro		_PBHGetVolParmsAsync			moveq	#48,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHGetVolParmsAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHGetLogInInfoSync			moveq	#49,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHGetLogInInfoSync	ENDIF	IF GENERATING68K THEN		Macro		_PBHGetLogInInfoAsync			moveq	#49,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHGetLogInInfoAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHGetDirAccessSync			moveq	#50,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHGetDirAccessSync	ENDIF	IF GENERATING68K THEN		Macro		_PBHGetDirAccessAsync			moveq	#50,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHGetDirAccessAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHSetDirAccessSync			moveq	#51,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHSetDirAccessSync	ENDIF	IF GENERATING68K THEN		Macro		_PBHSetDirAccessAsync			moveq	#51,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHSetDirAccessAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHMapIDSync			moveq	#52,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHMapIDSync	ENDIF	IF GENERATING68K THEN		Macro		_PBHMapIDAsync			moveq	#52,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHMapIDAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHMapNameSync			moveq	#53,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHMapNameSync	ENDIF	IF GENERATING68K THEN		Macro		_PBHMapNameAsync			moveq	#53,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHMapNameAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHCopyFileSync			moveq	#54,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHCopyFileSync	ENDIF	IF GENERATING68K THEN		Macro		_PBHCopyFileAsync			moveq	#54,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHCopyFileAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHMoveRenameSync			moveq	#55,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHMoveRenameSync	ENDIF	IF GENERATING68K THEN		Macro		_PBHMoveRenameAsync			moveq	#55,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHMoveRenameAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHOpenDenySync			moveq	#56,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHOpenDenySync	ENDIF	IF GENERATING68K THEN		Macro		_PBHOpenDenyAsync			moveq	#56,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHOpenDenyAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBHOpenRFDenySync			moveq	#57,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBHOpenRFDenySync	ENDIF	IF GENERATING68K THEN		Macro		_PBHOpenRFDenyAsync			moveq	#57,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBHOpenRFDenyAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBExchangeFilesSync			moveq	#23,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBExchangeFilesSync	ENDIF	IF GENERATING68K THEN		Macro		_PBExchangeFilesAsync			moveq	#23,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBExchangeFilesAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBCreateFileIDRefSync			moveq	#20,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBCreateFileIDRefSync	ENDIF	IF GENERATING68K THEN		Macro		_PBCreateFileIDRefAsync			moveq	#20,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBCreateFileIDRefAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBResolveFileIDRefSync			moveq	#22,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBResolveFileIDRefSync	ENDIF	IF GENERATING68K THEN		Macro		_PBResolveFileIDRefAsync			moveq	#22,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBResolveFileIDRefAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDeleteFileIDRefSync			moveq	#21,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDeleteFileIDRefSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDeleteFileIDRefAsync			moveq	#21,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDeleteFileIDRefAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetForeignPrivsSync			moveq	#96,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBGetForeignPrivsSync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetForeignPrivsAsync			moveq	#96,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBGetForeignPrivsAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBSetForeignPrivsSync			moveq	#97,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBSetForeignPrivsSync	ENDIF	IF GENERATING68K THEN		Macro		_PBSetForeignPrivsAsync			moveq	#97,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBSetForeignPrivsAsync	ENDIF;  Desktop Manager  	IF GENERATING68K THEN		Macro		_PBDTGetPath			moveq	#32,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTGetPath	ENDIF	IF GENERATING68K THEN		Macro		_PBDTCloseDown			moveq	#33,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTCloseDown	ENDIF	IF GENERATING68K THEN		Macro		_PBDTAddIconSync			moveq	#34,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTAddIconSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTAddIconAsync			moveq	#34,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTAddIconAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetIconSync			moveq	#35,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTGetIconSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetIconAsync			moveq	#35,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTGetIconAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetIconInfoSync			moveq	#36,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTGetIconInfoSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetIconInfoAsync			moveq	#36,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTGetIconInfoAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTAddAPPLSync			moveq	#37,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTAddAPPLSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTAddAPPLAsync			moveq	#37,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTAddAPPLAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTRemoveAPPLSync			moveq	#38,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTRemoveAPPLSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTRemoveAPPLAsync			moveq	#38,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTRemoveAPPLAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetAPPLSync			moveq	#39,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTGetAPPLSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetAPPLAsync			moveq	#39,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTGetAPPLAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTSetCommentSync			moveq	#40,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTSetCommentSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTSetCommentAsync			moveq	#40,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTSetCommentAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTRemoveCommentSync			moveq	#41,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTRemoveCommentSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTRemoveCommentAsync			moveq	#41,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTRemoveCommentAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetCommentSync			moveq	#42,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTGetCommentSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetCommentAsync			moveq	#42,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTGetCommentAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTFlushSync			moveq	#43,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTFlushSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTFlushAsync			moveq	#43,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTFlushAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTResetSync			moveq	#44,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTResetSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTResetAsync			moveq	#44,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTResetAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetInfoSync			moveq	#45,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBDTGetInfoSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTGetInfoAsync			moveq	#45,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBDTGetInfoAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTOpenInform			moveq	#46,d0			dc.w 	$A060		EndM	ELSE		IMPORT	PBDTOpenInform	ENDIF	IF GENERATING68K THEN		Macro		_PBDTDeleteSync			moveq	#47,d0			dc.w 	$A060		EndM	ELSE		IMPORT	PBDTDeleteSync	ENDIF	IF GENERATING68K THEN		Macro		_PBDTDeleteAsync			moveq	#47,d0			dc.w 	$A460		EndM	ELSE		IMPORT	PBDTDeleteAsync	ENDIF;  VolumeMount traps  	IF GENERATING68K THEN		Macro		_PBGetVolMountInfoSize			moveq	#63,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBGetVolMountInfoSize	ENDIF	IF GENERATING68K THEN		Macro		_PBGetVolMountInfo			moveq	#64,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBGetVolMountInfo	ENDIF	IF GENERATING68K THEN		Macro		_PBVolumeMount			moveq	#65,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBVolumeMount	ENDIF;  FSp traps  	IF GENERATING68K THEN		Macro		_FSMakeFSSpec			moveq	#1,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSMakeFSSpec	ENDIF	IF GENERATING68K THEN		Macro		_FSpOpenDF			moveq	#2,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpOpenDF	ENDIF	IF GENERATING68K THEN		Macro		_FSpOpenRF			moveq	#3,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpOpenRF	ENDIF	IF GENERATING68K THEN		Macro		_FSpCreate			moveq	#4,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpCreate	ENDIF	IF GENERATING68K THEN		Macro		_FSpDirCreate			moveq	#5,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpDirCreate	ENDIF	IF GENERATING68K THEN		Macro		_FSpDelete			moveq	#6,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpDelete	ENDIF	IF GENERATING68K THEN		Macro		_FSpGetFInfo			moveq	#7,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpGetFInfo	ENDIF	IF GENERATING68K THEN		Macro		_FSpSetFInfo			moveq	#8,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpSetFInfo	ENDIF	IF GENERATING68K THEN		Macro		_FSpSetFLock			moveq	#9,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpSetFLock	ENDIF	IF GENERATING68K THEN		Macro		_FSpRstFLock			moveq	#10,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpRstFLock	ENDIF	IF GENERATING68K THEN		Macro		_FSpRename			moveq	#11,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpRename	ENDIF	IF GENERATING68K THEN		Macro		_FSpCatMove			moveq	#12,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpCatMove	ENDIF	IF GENERATING68K THEN		Macro		_FSpExchangeFiles			moveq	#15,d0			dc.w 	$AA52		EndM	ELSE		IMPORT	FSpExchangeFiles	ENDIF;;	PBGetAltAccess and PBSetAltAccess are obsolete and will not be supported ;	on PowerPC. Equivalent functionality is provided by the routines ;	PBGetForeignPrivs and PBSetForeignPrivs.;	IF OLDROUTINENAMES  ** Â GENERATINGCFM  THEN	IF GENERATING68K THEN		Macro		_PBGetAltAccessSync			moveq	#96,d0			dc.w 	$A060		EndM	ELSE		IMPORT	PBGetAltAccessSync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetAltAccessAsync			moveq	#96,d0			dc.w 	$A460		EndM	ELSE		IMPORT	PBGetAltAccessAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBSetAltAccessSync			moveq	#97,d0			dc.w 	$A060		EndM	ELSE		IMPORT	PBSetAltAccessSync	ENDIF	IF GENERATING68K THEN		Macro		_PBSetAltAccessAsync			moveq	#97,d0			dc.w 	$A460		EndM	ELSE		IMPORT	PBSetAltAccessAsync	ENDIF	ENDIF	IF GENERATING68K THEN		Macro		_PBShareSync			moveq	#66,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBShareSync	ENDIF	IF GENERATING68K THEN		Macro		_PBShareAsync			moveq	#66,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBShareAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBUnshareSync			moveq	#67,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBUnshareSync	ENDIF	IF GENERATING68K THEN		Macro		_PBUnshareAsync			moveq	#67,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBUnshareAsync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetUGEntrySync			moveq	#68,d0			dc.w 	$A260		EndM	ELSE		IMPORT	PBGetUGEntrySync	ENDIF	IF GENERATING68K THEN		Macro		_PBGetUGEntryAsync			moveq	#68,d0			dc.w 	$A660		EndM	ELSE		IMPORT	PBGetUGEntryAsync	ENDIF	ENDIF ; __FILES__