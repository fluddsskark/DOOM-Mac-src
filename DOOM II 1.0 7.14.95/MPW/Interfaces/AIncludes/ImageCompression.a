;;	File:		ImageCompression.a;;	Copyright:	© 1984-1994 by Apple Computer, Inc.;				All rights reserved.;;	Version:	Universal Interfaces 2.0a3  ETO #16, MPW prerelease.  Friday, November 11, 1994. ;;	Bugs?:		If you find a problem with this file, send the file and version;				information (from above) and the problem description to:;;					Internet:	apple.bugs@applelink.apple.com;					AppleLink:	APPLE.BUGS;;	IF &TYPE('__IMAGECOMPRESSION__') = 'UNDEFINED' THEN__IMAGECOMPRESSION__ SET 1	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN	include 'Types.a'	ENDIF;		include 'ConditionalMacros.a'								;	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN	include 'Quickdraw.a'	ENDIF;		include 'MixedMode.a'										;;		include 'QuickdrawText.a'									;	IF &TYPE('__QDOFFSCREEN__') = 'UNDEFINED' THEN	include 'QDOffscreen.a'	ENDIF;		include 'Errors.a'											;	IF &TYPE('__COMPONENTS__') = 'UNDEFINED' THEN	include 'Components.a'	ENDIF	IF &TYPE('__WINDOWS__') = 'UNDEFINED' THEN	include 'Windows.a'	ENDIF;		include 'Memory.a'											;;		include 'Events.a'											;;			include 'OSUtils.a'									;;		include 'Controls.a'										;;			include 'Menus.a'										;	IF &TYPE('__STANDARDFILE__') = 'UNDEFINED' THEN	include 'StandardFile.a'	ENDIF;		include 'Dialogs.a'										;;			include 'TextEdit.a'									;;		include 'Files.a'											;MatrixRecord 			RECORD	0matrix					 ds.l	9sizeof					 EQU	36						ENDRFixedPoint 				RECORD	0x						 ds.l	1y						 ds.l	1sizeof					 EQU	8						ENDRFixedRect 				RECORD	0left					 ds.l	1top						 ds.l	1right					 ds.l	1bottom					 ds.l	1sizeof					 EQU	16						ENDR; These are the bits that are set in the Component flags, and also in the codecInfo struct. codecInfoDoes1					EQU		(1 << 0)codecInfoDoes2					EQU		(1 << 1)codecInfoDoes4					EQU		(1 << 2)codecInfoDoes8					EQU		(1 << 3)codecInfoDoes16					EQU		(1 << 4)codecInfoDoes32					EQU		(1 << 5)codecInfoDoesDither				EQU		(1 << 6)codecInfoDoesStretch			EQU		(1 << 7)codecInfoDoesShrink				EQU		(1 << 8)codecInfoDoesMask				EQU		(1 << 9)codecInfoDoesTemporal			EQU		(1 << 10)codecInfoDoesDouble				EQU		(1 << 11)codecInfoDoesQuad				EQU		(1 << 12)codecInfoDoesHalf				EQU		(1 << 13)codecInfoDoesQuarter			EQU		(1 << 14)codecInfoDoesRotate				EQU		(1 << 15)codecInfoDoesHorizFlip			EQU		(1 << 16)codecInfoDoesVertFlip			EQU		(1 << 17)codecInfoDoesSkew				EQU		(1 << 18)codecInfoDoesBlend				EQU		(1 << 19)codecInfoDoesWarp				EQU		(1 << 20)codecInfoDoesRecompress			EQU		(1 << 21)codecInfoDoesSpool				EQU		(1 << 22)codecInfoDoesRateConstrain		EQU		(1 << 23)codecInfoDepth1					EQU		(1 << 0)codecInfoDepth2					EQU		(1 << 1)codecInfoDepth4					EQU		(1 << 2)codecInfoDepth8					EQU		(1 << 3)codecInfoDepth16				EQU		(1 << 4)codecInfoDepth32				EQU		(1 << 5)codecInfoDepth24				EQU		(1 << 6)codecInfoDepth33				EQU		(1 << 7)codecInfoDepth34				EQU		(1 << 8)codecInfoDepth36				EQU		(1 << 9)codecInfoDepth40				EQU		(1 << 10)codecInfoStoresClut				EQU		(1 << 11)codecInfoDoesLossless			EQU		(1 << 12)codecInfoSequenceSensitive		EQU		(1 << 13)codecFlagUseImageBuffer			EQU		(1 << 0)codecFlagUseScreenBuffer		EQU		(1 << 1)codecFlagUpdatePrevious			EQU		(1 << 2)codecFlagNoScreenUpdate			EQU		(1 << 3)codecFlagWasCompressed			EQU		(1 << 4)codecFlagDontOffscreen			EQU		(1 << 5)codecFlagUpdatePreviousComp		EQU		(1 << 6)codecFlagForceKeyFrame			EQU		(1 << 7)codecFlagOnlyScreenUpdate		EQU		(1 << 8)codecFlagLiveGrab				EQU		(1 << 9)codecFlagDontUseNewImageBuffer	EQU		(1 << 10)codecFlagInterlaceUpdate		EQU		(1 << 11)codecFlagCatchUpDiff			EQU		(1 << 12)codecFlagUsedNewImageBuffer		EQU		(1 << 14)codecFlagUsedImageBuffer		EQU		(1 << 15); The minimum data size for spooling in or out data codecMinimumDataSize			EQU		32768compressorComponentType			EQU		'imco'				; the type for "Components" which compress images decompressorComponentType		EQU		'imdc'anyCodec						EQU		0					; take first working codec of given type bestSpeedCodec					EQU		-1					; take fastest codec of given type bestFidelityCodec				EQU		-2					; take codec which is most accurate bestCompressionCodec			EQU		-3					; take codec of given type that is most accurate codecLosslessQuality			EQU		$400codecMaxQuality					EQU		$3ffcodecMinQuality					EQU		$000codecLowQuality					EQU		$100codecNormalQuality				EQU		$200codecHighQuality				EQU		$300codecCompletionSource			EQU		(1 << 0)			; asynchronous codec is done with source data codecCompletionDest				EQU		(1 << 1)			; asynchronous codec is done with destination data codecProgressOpen				EQU		0codecProgressUpdatePercent		EQU		1codecProgressClose				EQU		2ICMProgressProcRecord 	RECORD	0progressProc			 ds.l	1progressRefCon			 ds.l	1sizeof					 EQU	8						ENDRICMCompletionProcRecord RECORD	0completionProc			 ds.l	1completionRefCon		 ds.l	1sizeof					 EQU	8						ENDRICMDataProcRecord 		RECORD	0dataProc				 ds.l	1dataRefCon				 ds.l	1sizeof					 EQU	8						ENDRICMFlushProcRecord 		RECORD	0flushProc				 ds.l	1flushRefCon				 ds.l	1sizeof					 EQU	8						ENDRICMAlignmentProcRecord 	RECORD	0alignmentProc			 ds.l	1alignmentRefCon			 ds.l	1sizeof					 EQU	8						ENDRDataRateParams 			RECORD	0dataRate				 ds.l	1dataOverrun				 ds.l	1frameDuration			 ds.l	1keyFrameRate			 ds.l	1minSpatialQuality		 ds.l	1minTemporalQuality		 ds.l	1sizeof					 EQU	24						ENDRImageDescription 		RECORD	0idSize					 ds.l	1									; total size of ImageDescription including extra data ( CLUTs and other per sequence data cType					 ds.l	1									; what kind of codec compressed this data resvd1					 ds.l	1									; reserved for Apple use resvd2					 ds.w	1									; reserved for Apple use dataRefIndex			 ds.w	1									; set to zero  version					 ds.w	1									; which version is this data revisionLevel			 ds.w	1									; what version of that codec did this vendor					 ds.l	1									; whose  codec compressed this data temporalQuality			 ds.l	1									; what was the temporal quality factor  spatialQuality			 ds.l	1									; what was the spatial quality factor width					 ds.w	1									; how many pixels wide is this data height					 ds.w	1									; how many pixels high is this data hRes					 ds.l	1									; horizontal resolution vRes					 ds.l	1									; vertical resolution dataSize				 ds.l	1									; if known, the size of data for this image descriptor frameCount				 ds.w	1									; number of frames this description applies to name					 ds.l	8									; name of codec ( in case not installed )  depth					 ds.w	1									; what depth is this data (1-32) or ( 33-40 grayscale ) clutID					 ds.w	1									; clut id or if 0 clut follows  or -1 if no clut sizeof					 EQU	86						ENDRCodecInfo 				RECORD	0typeName				 ds.l	8									; name of the codec type i.e.: 'Apple Image Compression' version					 ds.w	1									; version of the codec data that this codec knows about revisionLevel			 ds.w	1									; revision level of this codec i.e: 0x00010001 (1.0.1) vendor					 ds.l	1									; Maker of this codec i.e: 'appl' decompressFlags			 ds.l	1									; codecInfo flags for decompression capabilities compressFlags			 ds.l	1									; codecInfo flags for compression capabilities formatFlags				 ds.l	1									; codecInfo flags for compression format details compressionAccuracy		 ds.b	1									; measure (1-255) of accuracy of this codec for compress (0 if unknown) decompressionAccuracy	 ds.b	1									; measure (1-255) of accuracy of this codec for decompress (0 if unknown) compressionSpeed		 ds.w	1									; ( millisecs for compressing 320x240 on base mac II) (0 if unknown)  decompressionSpeed		 ds.w	1									; ( millisecs for decompressing 320x240 on mac II)(0 if unknown)  compressionLevel		 ds.b	1									; measure (1-255) of compression level of this codec (0 if unknown)  resvd					 ds.b	1									; pad minimumHeight			 ds.w	1									; minimum height of image (block size) minimumWidth			 ds.w	1									; minimum width of image (block size) decompressPipelineLatency ds.w	1									; in milliseconds ( for asynchronous codecs ) compressPipelineLatency	 ds.w	1									; in milliseconds ( for asynchronous codecs ) privateData				 ds.l	1sizeof					 EQU	72						ENDRCodecNameSpec 			RECORD	0codec					 ds.l	1cType					 ds.l	1typeName				 ds.l	8name					 ds.l	1sizeof					 EQU	44						ENDRCodecNameSpecList 		RECORD	0count					 ds.w	1list					 ds		CodecNameSpecsizeof					 EQU	46						ENDRdefaultDither					EQU		0forceDither						EQU		1suppressDither					EQU		2useColorMatching				EQU		4ICMFrameTimeRecord 		RECORD	0value					 ds		wide								; frame timescale					 ds.l	1									; timescale of value/duration fieldsbase					 ds.l	1									; timebaseduration				 ds.l	1									; duration frame is to be displayed (0 if unknown)rate					 ds.l	1									; rate of timebase relative to wall-timesizeof					 EQU	24						ENDR	IF GENERATING68K THEN		Macro		_CodecManagerVersion			moveq	#0,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	CodecManagerVersion	ENDIF	IF GENERATING68K THEN		Macro		_GetCodecNameList			moveq	#1,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetCodecNameList	ENDIF	IF GENERATING68K THEN		Macro		_DisposeCodecNameList			moveq	#15,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	DisposeCodecNameList	ENDIF	IF GENERATING68K THEN		Macro		_GetCodecInfo			moveq	#3,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetCodecInfo	ENDIF	IF GENERATING68K THEN		Macro		_GetMaxCompressionSize			moveq	#4,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetMaxCompressionSize	ENDIF	IF GENERATING68K THEN		Macro		_GetCompressionTime			moveq	#5,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetCompressionTime	ENDIF	IF GENERATING68K THEN		Macro		_CompressImage			moveq	#6,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	CompressImage	ENDIF	IF GENERATING68K THEN		Macro		_FCompressImage			moveq	#7,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	FCompressImage	ENDIF	IF GENERATING68K THEN		Macro		_DecompressImage			moveq	#8,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	DecompressImage	ENDIF	IF GENERATING68K THEN		Macro		_FDecompressImage			moveq	#9,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	FDecompressImage	ENDIF	IF GENERATING68K THEN		Macro		_CompressSequenceBegin			moveq	#10,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	CompressSequenceBegin	ENDIF	IF GENERATING68K THEN		Macro		_CompressSequenceFrame			moveq	#11,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	CompressSequenceFrame	ENDIF	IF GENERATING68K THEN		Macro		_DecompressSequenceBegin			moveq	#13,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	DecompressSequenceBegin	ENDIF	IF GENERATING68K THEN		Macro		_DecompressSequenceBeginS			dc.w 	$203C			dc.w 	$0030			dc.w 	$005D			dc.w 	$AAA3		EndM	ELSE		IMPORT	DecompressSequenceBeginS	ENDIF	IF GENERATING68K THEN		Macro		_DecompressSequenceFrame			moveq	#14,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	DecompressSequenceFrame	ENDIF	IF GENERATING68K THEN		Macro		_DecompressSequenceFrameS			dc.w 	$203C			dc.w 	$0016			dc.w 	$0047			dc.w 	$AAA3		EndM	ELSE		IMPORT	DecompressSequenceFrameS	ENDIF	IF GENERATING68K THEN		Macro		_DecompressSequenceFrameWhen			dc.w 	$203C			dc.w 	$001A			dc.w 	$005E			dc.w 	$AAA3		EndM	ELSE		IMPORT	DecompressSequenceFrameWhen	ENDIF	IF GENERATING68K THEN		Macro		_CDSequenceFlush			dc.w 	$203C			dc.w 	$0004			dc.w 	$005F			dc.w 	$AAA3		EndM	ELSE		IMPORT	CDSequenceFlush	ENDIF	IF GENERATING68K THEN		Macro		_SetDSequenceMatrix			moveq	#16,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetDSequenceMatrix	ENDIF	IF GENERATING68K THEN		Macro		_SetDSequenceMatte			moveq	#17,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetDSequenceMatte	ENDIF	IF GENERATING68K THEN		Macro		_SetDSequenceMask			moveq	#18,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetDSequenceMask	ENDIF	IF GENERATING68K THEN		Macro		_SetDSequenceTransferMode			moveq	#19,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetDSequenceTransferMode	ENDIF	IF GENERATING68K THEN		Macro		_SetDSequenceDataProc			moveq	#20,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetDSequenceDataProc	ENDIF	IF GENERATING68K THEN		Macro		_SetDSequenceAccuracy			moveq	#52,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetDSequenceAccuracy	ENDIF	IF GENERATING68K THEN		Macro		_SetDSequenceSrcRect			moveq	#53,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetDSequenceSrcRect	ENDIF	IF GENERATING68K THEN		Macro		_GetDSequenceImageBuffer			moveq	#21,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetDSequenceImageBuffer	ENDIF	IF GENERATING68K THEN		Macro		_GetDSequenceScreenBuffer			moveq	#22,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetDSequenceScreenBuffer	ENDIF	IF GENERATING68K THEN		Macro		_SetCSequenceQuality			moveq	#23,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetCSequenceQuality	ENDIF	IF GENERATING68K THEN		Macro		_SetCSequencePrev			moveq	#24,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetCSequencePrev	ENDIF	IF GENERATING68K THEN		Macro		_SetCSequenceFlushProc			moveq	#51,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetCSequenceFlushProc	ENDIF	IF GENERATING68K THEN		Macro		_SetCSequenceKeyFrameRate			moveq	#54,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetCSequenceKeyFrameRate	ENDIF	IF GENERATING68K THEN		Macro		_GetCSequenceKeyFrameRate			dc.w 	$203C			dc.w 	$0008			dc.w 	$004B			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetCSequenceKeyFrameRate	ENDIF	IF GENERATING68K THEN		Macro		_GetCSequencePrevBuffer			moveq	#25,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetCSequencePrevBuffer	ENDIF	IF GENERATING68K THEN		Macro		_CDSequenceBusy			moveq	#26,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	CDSequenceBusy	ENDIF	IF GENERATING68K THEN		Macro		_CDSequenceEnd			moveq	#27,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	CDSequenceEnd	ENDIF	IF GENERATING68K THEN		Macro		_GetCompressedImageSize			moveq	#28,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetCompressedImageSize	ENDIF	IF GENERATING68K THEN		Macro		_GetSimilarity			moveq	#29,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetSimilarity	ENDIF	IF GENERATING68K THEN		Macro		_GetImageDescriptionCTable			moveq	#30,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetImageDescriptionCTable	ENDIF	IF GENERATING68K THEN		Macro		_SetImageDescriptionCTable			moveq	#31,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetImageDescriptionCTable	ENDIF	IF GENERATING68K THEN		Macro		_GetImageDescriptionExtension			moveq	#32,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetImageDescriptionExtension	ENDIF	IF GENERATING68K THEN		Macro		_SetImageDescriptionExtension			moveq	#33,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetImageDescriptionExtension	ENDIF	IF GENERATING68K THEN		Macro		_RemoveImageDescriptionExtension			dc.w 	$203C			dc.w 	$000C			dc.w 	$003A			dc.w 	$AAA3		EndM	ELSE		IMPORT	RemoveImageDescriptionExtension	ENDIF	IF GENERATING68K THEN		Macro		_CountImageDescriptionExtensionType			dc.w 	$203C			dc.w 	$000C			dc.w 	$003B			dc.w 	$AAA3		EndM	ELSE		IMPORT	CountImageDescriptionExtensionType	ENDIF	IF GENERATING68K THEN		Macro		_GetNextImageDescriptionExtensionType			dc.w 	$203C			dc.w 	$0008			dc.w 	$003C			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetNextImageDescriptionExtensionType	ENDIF	IF GENERATING68K THEN		Macro		_FindCodec			moveq	#35,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	FindCodec	ENDIF	IF GENERATING68K THEN		Macro		_CompressPicture			moveq	#36,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	CompressPicture	ENDIF	IF GENERATING68K THEN		Macro		_FCompressPicture			moveq	#37,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	FCompressPicture	ENDIF	IF GENERATING68K THEN		Macro		_CompressPictureFile			moveq	#38,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	CompressPictureFile	ENDIF	IF GENERATING68K THEN		Macro		_FCompressPictureFile			moveq	#39,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	FCompressPictureFile	ENDIF	IF GENERATING68K THEN		Macro		_GetPictureFileHeader			moveq	#40,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetPictureFileHeader	ENDIF	IF GENERATING68K THEN		Macro		_DrawPictureFile			moveq	#41,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	DrawPictureFile	ENDIF	IF GENERATING68K THEN		Macro		_DrawTrimmedPicture			moveq	#46,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	DrawTrimmedPicture	ENDIF	IF GENERATING68K THEN		Macro		_DrawTrimmedPictureFile			moveq	#47,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	DrawTrimmedPictureFile	ENDIF	IF GENERATING68K THEN		Macro		_MakeThumbnailFromPicture			moveq	#42,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	MakeThumbnailFromPicture	ENDIF	IF GENERATING68K THEN		Macro		_MakeThumbnailFromPictureFile			moveq	#43,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	MakeThumbnailFromPictureFile	ENDIF	IF GENERATING68K THEN		Macro		_MakeThumbnailFromPixMap			moveq	#44,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	MakeThumbnailFromPixMap	ENDIF	IF GENERATING68K THEN		Macro		_TrimImage			moveq	#45,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	TrimImage	ENDIF	IF GENERATING68K THEN		Macro		_ConvertImage			moveq	#48,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	ConvertImage	ENDIF	IF GENERATING68K THEN		Macro		_GetCompressedPixMapInfo			moveq	#55,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetCompressedPixMapInfo	ENDIF	IF GENERATING68K THEN		Macro		_SetCompressedPixMapInfo			moveq	#56,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetCompressedPixMapInfo	ENDIF	IF GENERATING68K THEN		Macro		_StdPix			moveq	#12,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	StdPix	ENDIF	IF GENERATING68K THEN		Macro		_TransformRgn			moveq	#57,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	TransformRgn	ENDIF;**********;	preview stuff;**********	IF GENERATING68K THEN		Macro		_SFGetFilePreview			moveq	#65,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SFGetFilePreview	ENDIF	IF GENERATING68K THEN		Macro		_SFPGetFilePreview			moveq	#66,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	SFPGetFilePreview	ENDIF	IF GENERATING68K THEN		Macro		_StandardGetFilePreview			moveq	#67,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	StandardGetFilePreview	ENDIF	IF GENERATING68K THEN		Macro		_CustomGetFilePreview			moveq	#68,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	CustomGetFilePreview	ENDIF	IF GENERATING68K THEN		Macro		_MakeFilePreview			moveq	#69,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	MakeFilePreview	ENDIF	IF GENERATING68K THEN		Macro		_AddFilePreview			moveq	#70,d0			dc.w 	$AAA3		EndM	ELSE		IMPORT	AddFilePreview	ENDIFsfpItemPreviewAreaUser			EQU		11sfpItemPreviewStaticText		EQU		12sfpItemPreviewDividerUser		EQU		13sfpItemCreatePreviewButton		EQU		14sfpItemShowPreviewButton		EQU		15PreviewResourceRecord 	RECORD	0modDate					 ds.l	1version					 ds.w	1resType					 ds.l	1resID					 ds.w	1sizeof					 EQU	12						ENDR	IF GENERATING68K THEN		Macro		_AlignScreenRect			dc.w 	$203C			dc.w 	$0008			dc.w 	$004C			dc.w 	$AAA3		EndM	ELSE		IMPORT	AlignScreenRect	ENDIF	IF GENERATING68K THEN		Macro		_AlignWindow			dc.w 	$203C			dc.w 	$000E			dc.w 	$004D			dc.w 	$AAA3		EndM	ELSE		IMPORT	AlignWindow	ENDIF	IF GENERATING68K THEN		Macro		_DragAlignedWindow			dc.w 	$203C			dc.w 	$0014			dc.w 	$004E			dc.w 	$AAA3		EndM	ELSE		IMPORT	DragAlignedWindow	ENDIF	IF GENERATING68K THEN		Macro		_DragAlignedGrayRgn			dc.w 	$203C			dc.w 	$001E			dc.w 	$004F			dc.w 	$AAA3		EndM	ELSE		IMPORT	DragAlignedGrayRgn	ENDIF	IF GENERATING68K THEN		Macro		_SetCSequenceDataRateParams			dc.w 	$203C			dc.w 	$0008			dc.w 	$0050			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetCSequenceDataRateParams	ENDIF	IF GENERATING68K THEN		Macro		_SetCSequenceFrameNumber			dc.w 	$203C			dc.w 	$0008			dc.w 	$0051			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetCSequenceFrameNumber	ENDIF	IF GENERATING68K THEN		Macro		_NewImageGWorld			dc.w 	$203C			dc.w 	$000C			dc.w 	$0052			dc.w 	$AAA3		EndM	ELSE		IMPORT	NewImageGWorld	ENDIF	IF GENERATING68K THEN		Macro		_GetCSequenceDataRateParams			dc.w 	$203C			dc.w 	$0008			dc.w 	$0053			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetCSequenceDataRateParams	ENDIF	IF GENERATING68K THEN		Macro		_GetCSequenceFrameNumber			dc.w 	$203C			dc.w 	$0008			dc.w 	$0054			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetCSequenceFrameNumber	ENDIF	IF GENERATING68K THEN		Macro		_GetBestDeviceRect			dc.w 	$203C			dc.w 	$0008			dc.w 	$0055			dc.w 	$AAA3		EndM	ELSE		IMPORT	GetBestDeviceRect	ENDIF	IF GENERATING68K THEN		Macro		_SetSequenceProgressProc			dc.w 	$203C			dc.w 	$0008			dc.w 	$0056			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetSequenceProgressProc	ENDIF	IF GENERATING68K THEN		Macro		_GDHasScale			dc.w 	$203C			dc.w 	$000A			dc.w 	$005A			dc.w 	$AAA3		EndM	ELSE		IMPORT	GDHasScale	ENDIF	IF GENERATING68K THEN		Macro		_GDGetScale			dc.w 	$203C			dc.w 	$000C			dc.w 	$005B			dc.w 	$AAA3		EndM	ELSE		IMPORT	GDGetScale	ENDIF	IF GENERATING68K THEN		Macro		_GDSetScale			dc.w 	$203C			dc.w 	$000A			dc.w 	$005C			dc.w 	$AAA3		EndM	ELSE		IMPORT	GDSetScale	ENDIF	IF GENERATING68K THEN		Macro		_ICMShieldSequenceCursor			dc.w 	$203C			dc.w 	$0004			dc.w 	$0062			dc.w 	$AAA3		EndM	ELSE		IMPORT	ICMShieldSequenceCursor	ENDIF	IF GENERATING68K THEN		Macro		_ICMDecompressComplete			dc.w 	$203C			dc.w 	$000C			dc.w 	$0063			dc.w 	$AAA3		EndM	ELSE		IMPORT	ICMDecompressComplete	ENDIF	IF GENERATING68K THEN		Macro		_SetDSequenceTimeCode			dc.w 	$203C			dc.w 	$000C			dc.w 	$0064			dc.w 	$AAA3		EndM	ELSE		IMPORT	SetDSequenceTimeCode	ENDIFidentityMatrixType				EQU		$00					; result if matrix is identity translateMatrixType				EQU		$01					; result if matrix translates scaleMatrixType					EQU		$02					; result if matrix scales scaleTranslateMatrixType		EQU		$03					; result if matrix scales and translates linearMatrixType				EQU		$04					; result if matrix is general 2 x 2 linearTranslateMatrixType		EQU		$05					; result if matrix is general 2 x 2 and translates perspectiveMatrixType			EQU		$06					; result if matrix is general 3 x 3 	IF GENERATING68K THEN		Macro		_GetMatrixType			moveq	#20,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	GetMatrixType	ENDIF	IF GENERATING68K THEN		Macro		_CopyMatrix			moveq	#32,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	CopyMatrix	ENDIF	IF GENERATING68K THEN		Macro		_EqualMatrix			moveq	#33,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	EqualMatrix	ENDIF	IF GENERATING68K THEN		Macro		_SetIdentityMatrix			moveq	#21,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	SetIdentityMatrix	ENDIF	IF GENERATING68K THEN		Macro		_TranslateMatrix			moveq	#25,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	TranslateMatrix	ENDIF	IF GENERATING68K THEN		Macro		_RotateMatrix			moveq	#22,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	RotateMatrix	ENDIF	IF GENERATING68K THEN		Macro		_ScaleMatrix			moveq	#23,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	ScaleMatrix	ENDIF	IF GENERATING68K THEN		Macro		_SkewMatrix			moveq	#24,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	SkewMatrix	ENDIF	IF GENERATING68K THEN		Macro		_TransformFixedPoints			moveq	#34,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	TransformFixedPoints	ENDIF	IF GENERATING68K THEN		Macro		_TransformPoints			moveq	#35,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	TransformPoints	ENDIF	IF GENERATING68K THEN		Macro		_TransformFixedRect			moveq	#36,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	TransformFixedRect	ENDIF	IF GENERATING68K THEN		Macro		_TransformRect			moveq	#37,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	TransformRect	ENDIF	IF GENERATING68K THEN		Macro		_InverseMatrix			moveq	#28,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	InverseMatrix	ENDIF	IF GENERATING68K THEN		Macro		_ConcatMatrix			moveq	#27,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	ConcatMatrix	ENDIF	IF GENERATING68K THEN		Macro		_RectMatrix			moveq	#30,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	RectMatrix	ENDIF	IF GENERATING68K THEN		Macro		_MapMatrix			moveq	#29,d0			dc.w 	$ABC2		EndM	ELSE		IMPORT	MapMatrix	ENDIF	ENDIF ; __IMAGECOMPRESSION__