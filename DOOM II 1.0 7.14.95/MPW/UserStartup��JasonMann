	Set 	User 		"Jason D. Mann"	#	{SearchWrap} - If non-zero, search will wrap.	Set 	SearchWrap 1	Export 	SearchWrap	Set 	MPWScripts "{MPW}"UserScripts:		Set 	DefaultDir "{jmCurrentProjectDisk}"	#	Mount Current Project	If {ProjectorUsed}		MountProject {jmCurrentProjectorDisk}		CheckOutDir	-project {jmDoomProject} -r "{jmCurrentProjectDisk}"	End	#	Directory "{DefaultDir}"		DirectoryMenu `(Files -d -i     "{DefaultDir}" ∂									"{jmAltDir1}" "{jmAltDir2}" ∂									""{MPW}"Interfaces:CIncludes:" "{MPW}"   ∂									|| Set Status 0) ≥ Dev:Null` `Directory`### Add some useful text-editing commands to the Edit menuAddMenu File '(-' ''# Bring the worksheet window to the frontAddMenu File 'Open Worksheet/*' ∂'	Begin; ∂		Open "{Worksheet}"; ∂	End ∑∑ "{Worksheet}" ∂'# Bring the target window to the frontAddMenu File "Open Target/∂/" ∂'	Begin; ∂		Open "{Target}"; ∂	End ∑∑ "{Worksheet}" ∂'# Send frontmost window to the backAddMenu File 'Rotate Windows/+' ∂'	Begin; ∂		RotateWindows; ∂	End ∑∑ "{Worksheet}" ∂'# Bring the backmost window to the frontAddMenu File 'Open Back Window/-' ∂'	Begin; ∂		For Window In `Windows`; ∂			Open "{Window}"; ∂			Break; ∂		End; ∂	End ∑∑ "{Worksheet}" ∂'#echo "Adding Edit menu options"AddMenu Edit '(-' ''# Translate the current text selection to all uppercase lettersAddMenu Edit 'UpperCase Selection/U' ∂'	Begin; ∂		Set Selection "{Active}.§"; ∂		Translate a-zA-Z A-ZA-Z < "{Selection}" | Catenate > "{Selection}"; ∂		Unset Selection; ∂	End ≥≥ "Dev:Null" ∂'# Translate the current text selection to all lowercase letters# (Doesn't work on worksheet in its current form)AddMenu Edit 'LowerCase Selection/L' ∂'	Begin; ∂		Set Selection "{Active}.§"; ∂		Translate a-zA-Z a-za-z < "{Selection}" | Catenate > "{Selection}"; ∂		Unset Selection; ∂	End ≥≥ "Dev:Null" ∂'# Step through compilation errorsAddMenu Find 'Next Error/≥' ∂'	Begin; ∂	Find /•[ ∂t]*File/ "{Worksheet}"; ∂	Find !0 "{Worksheet}"; ∂	Execute "{Worksheet}.§"; ∂	End ∑∑ "{Worksheet}" ∂'AddMenu Find 'Previous Error/≤' ∂'	Begin; ∂	Find \•[ ∂t]*File\ "{Worksheet}"; ∂	Find !0 "{Worksheet}"; ∂	Execute "{Worksheet}.§"; ∂	End ∑∑ "{Worksheet}" ∂'AddMenu Find 'Goto Line Number…' ∂'	Begin; ∂		Find `Request -q "Enter line number:"` {Active}; ∂	End ≥≥ "{Worksheet}" ∂'AddMenu Find 'Show Line Number…' ∂'	Begin; ∂	Find !0:• "{Active}"; ∂	Alert `Echo -n "Line "; Count -l "{Active}".§`; ∂	Find !0 "{Active}"; ∂	End ≥≥ "{Worksheet}" ∂'### Add personalized Mount to Project Menu###if {ProjectorUsed}	# Check in active window	AddMenu Project 'Check In Active Window' ∂	'	Begin; ∂			CheckInActive; ∂		End ∑∑ "{Worksheet}" ∂	'	# Check out active window	AddMenu Project 'Check Out Active Window' ∂	'	Begin; ∂			CheckOutActive; ∂		End ≥≥ "Dev:Null" ∂	'		AddMenu Project '(-' ''	AddMenu Project 'Mount Doom' ∂	'	Begin; ∂			MountProject {jmCurrentProjectorDisk}; ∂			CheckOutDir	-project {jmDoomProject} -r "{jmCurrentProjectDisk}"; ∂		End ≥≥ "Dev:Null" ∂	'End### Create a custom menu with options for build, mark/lookup, ### search, and configuration#echo "Adding custom menu options"###DeleteMenu Custom ≥ Dev:Null#echo "Adding Search Current Directory"AddMenu Custom 'Search Current Directory…/`' ∂'	Begin; ∂		set rName "`Request -q Enter String To Search For:`"; ∂		if "{rName}" != ""; ∂			Set Dir	`Directory`; ∂			Export Dir; ∂			open "{worksheet}"; ∂			echo " " ∑∑ "{worksheet}"; ∂			echo "∂# Searching for ∂"{rName}∂" in ∂"{Dir}∂"" ∑∑ "{worksheet}"; ∂			Search /{rName}/ `Files -f -o -r -t TEXT "{Dir}"` ∑∑ "{worksheet}"; ∂		end; ∂	End ≥≥ "Dev:Null" ∂'#echo "Adding Search C Headers"AddMenu Custom 'Search C Headers…' ∂'	Begin; ∂		set rName "`Request -q Enter ToolBox function (C):`"; ∂		if "{rName}" != ""; ∂			open "{worksheet}"; ∂			echo " " ∑∑ "{worksheet}"; ∂			echo "∂# Searching for ∂"{rName}∂" in C headers:" ∑∑ "{worksheet}"; ∂			Search /{rName}/ "{cincludes}"≈.h ∑∑ "{worksheet}"; ∂		end; ∂	End ≥≥ "Dev:Null" ∂'AddMenu Custom '(-' ''#echo "Set Echo"AddMenu Custom 'Echo On' ∂'	Begin; ∂		Set echo 1; ∂	End ∑∑ "{Worksheet}" ∂'#echo "Clear Echo"AddMenu Custom 'Echo Off' ∂'	Begin; ∂		Set echo 0; ∂	End ∑∑ "{Worksheet}" ∂'AddMenu Custom '(-' ''# Find the selected C function using preset map and directory values#echo "Adding Find C Function"AddMenu Custom 'Find C Function/J' ∂'	Begin; ∂		FindCFunction; ∂	End ≥≥ "{Worksheet}" ∂'# Mark the C function declarations in the active window#echo "Adding Mark C Function"AddMenu Custom 'Mark C Functions/K' ∂'	Begin; ∂#		"{MPWScripts}"MarkCFunctions "{Active}"; ∂		"{MPWScripts}"Markit…; ∂	End ≥≥ "{Worksheet}" ∂'