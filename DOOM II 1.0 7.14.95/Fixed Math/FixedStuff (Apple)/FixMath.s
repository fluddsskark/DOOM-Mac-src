##	File:		FixMath.s##	Contains:	PowerPC assembly implementations of Fixed math routines##	Written by:	Eric Traut## 	PPCAsm FixMath.s -o FixMath.o##	Fixed AsmFixedMul(Fixed a, Fixed b);##	On entry, this routine takes the following parameters:#		r3 - 	operand a (fixed point format)#		r4 -	operand b (fixed point format)#	On exit:#		r3 -	fixed point product##	Within the routine, r5 and r6 are used as scratch registers.#	#	NOTE: this function will be fastest if the smaller of the#	two numbers is passed as the second argument. In some#	cases, some of the processors will short-cut the operation#	if the upper bits are zero.#	EXPORT .AsmFixedMul			# export the code symbol.AsmFixedMul:	mullw	r5,r3,r4			# multiply low word	mulhw	r6,r3,r4			# multiply high word (signed)	rlwinm	r3,r5,16,16,31		# mask off low portion of result	rlwimi	r3,r6,16,0,15		# insert high portion of result	blr							# return to caller##	Fixed AsmFixedDiv(Fixed a, Fixed b);##	On entry, this routine takes the following parameters:#		r3 - 	operand a (fixed point, frac, or long format)#		r4 -	operand b (fixed point, frac, or long format)#	On exit:#		r3 -	fixed point, frac, or long quotient##	Within the routine, r5 and r6 are used as scratch registers.##	If b is zero, the function returns:#		0x80000000 if a is negative#		0x7FFFFFFF if a is zero or positive#	#	NOTE: this does not handle the case where a is equal#	to 0x80000000 and b is equal to 0xFFFFFFFF. In this#	case, the results are undefined.#	EXPORT .AsmFixedDiv			# export the code symbol.AsmFixedDiv:	cmpi	0,r4,0				# check for division by zero	beq-	0,FixedDivByZero	# branch if division by zero	divw	r3,r3,r4			# perform long division	blr							# return to callerFixedDivByZero:	cmpi	0,r3,0				# test for non-negative numerator	lis		r3,-0x8000			# load largest negative number	bltlr	0					# return if we are done	subi	r3,r3,1				# form largest positive number	blr							# return to caller