{    profiler.h    The main entry points for the Profiler.        Copyright © 1993-1994 Metrowerks Inc.  All rights reserved.}unit profiler;interface	uses		Types;	type		ProfilerCollectionMethod = (collectDetailed, collectSummary);		ProfilerTimeBase = (ticksTimeBase, timeMgrTimeBase, microsecondsTimeBase, PPCTimeBase, bestTimeBase);		{  The following call turns on the Profiler and starts the underlying timebase.}function ProfilerInit(method: ProfilerCollectionMethod; timeBase: ProfilerTimeBase; numFunctions: integer; stackDepth: integer) :OSErr;{  Turn off the profiler and stop the timebase}procedure ProfilerTerm;{  Turn on and off the profiler.  This pauses the timebase, and the recording of data.  0 turns off, anything else turns on.}procedure ProfilerSetStatus(on: integer);function ProfilerGetStatus: integer;{  Return the data buffer sizes that the profiler has currently used.  This is useful  for tuning the buffer sizes passed to ProfilerInit.}procedure ProfilerGetDataSizes(var functionSize :longint; var stackSize: longint);{  Dump the current buffer of profile information to the given file.  If it exists, append  and increment a number to the filename.  This does not clear the profile information.  The filename should be a Pascal string.}function ProfilerDump(filename: Str255) :OSErr;{  Clear out the profile buffer.  This does not stop the recording of new information.}procedure ProfilerClear;{  The actual function that the compiler calls to collect profile information.}procedure __PROFILE(functionName: Ptr);implementationend.