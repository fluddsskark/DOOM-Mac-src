#	runtime.s	-	Runtime Support routines for Metrowerks C++ for PowerPC##	Copyright © 1993 metrowerks inc.  All Rights Reserved.###	BUILD INSTRUCTIONS##	To assemble this file:##		ppcasm runtime.s -o runtime.o##	The object file runtime.o can be added directly to any CodeWarriorª project.#		dialect	powerpc##	Assembler Equates#cr0		equ		0cr1		equ		1cr2		equ		2cr3		equ		3cr4		equ		4cr5		equ		5cr6		equ		6cr7		equ		7##	Private Data#		csect	__constants{RO}		dc.l	0x43300000			# integer->floating conversion constant		dc.l	0x80000000		dc.l	0x43300000			# unsigned->floating conversion constant		dc.l	0x00000000		dc.l	0x00000000			# 0.0		dc.l	0x00000000		dc.l	0x41F00000			# 2**32		dc.l	0x00000000		dc.l	0x41E00000			# 2**31		dc.l	0x00000000				csect	__argv{RW}		dc.l	0##	TOC pointers#		toc		tc		__constants{TC}, __constants{RO}#	__cvt_int2single	-	convert 32-bit integer to floating-point single##	Convert the 32-bit integer in R3 to a floating-point single and return#	the result in F1.#		csect	.__cvt_int2single{PR}		export	.__cvt_int2single{PR}		lwz		r4,__constants{TC}(RTOC)		xoris	r0,r3,0x8000		lfd		fp0,0(r4)			# fp0 = integer->floating conversion constant		stw		r0,-4(SP)		lis		r0,0x4330		stw		r0,-8(SP)		lfd		fp1,-8(SP)		fsubs	fp1,fp1,fp0		blr#	__cvt_int2double	-	convert 32-bit integer to floating-point double##	Convert the 32-bit integer in R3 to a floating-point double and return#	the result in F1.#		csect	.__cvt_int2double{PR}				export	.__cvt_int2double{PR}		lwz		r4,__constants{TC}(RTOC)		xoris	r0,r3,0x8000		lfd		fp0,0(r4)			# fp0 = integer->floating conversion constant		stw		r0,-4(SP)		lis		r0,0x4330		stw		r0,-8(SP)		lfd		fp1,-8(SP)		fsub	fp1,fp1,fp0		blr#	__cvt_uns2single	-	convert 32-bit unsigned to floating-point single##	Convert the 32-bit integer in R3 to a floating-point single and return#	the result in F1.#		csect	.__cvt_uns2single{PR}		export	.__cvt_uns2single{PR}		lwz		r4,__constants{TC}(RTOC)		stw		r3,-4(SP)		lfd		fp0,8(r4)			# fp0 = unsigned->floating conversion constant		lis		r0,0x4330		stw		r0,-8(SP)		lfd		fp1,-8(SP)		fsubs	fp1,fp1,fp0		blr #	__cvt_uns2double	-	convert 32-bit unsigned to floating-point double##	Convert the 32-bit integer in R3 to a floating-point single and return#	the result in F1.#		csect	.__cvt_uns2double{PR} 		export	.__cvt_uns2double{PR}		lwz		r4,__constants{TC}(RTOC)		stw		r3,-4(SP)		lfd		fp0,8(r4)			# fp0 = unsigned->floating conversion constant		lis		r0,0x4330		stw		r0,-8(SP)		lfd		fp1,-8(SP)		fsub	fp1,fp1,fp0		blr#	__cvt_fp2unsigned	-	convert floating-point to 32-bit unsigned integer##	Convert the floating-point value in F1 to a 32-bit unsigned integer#	and return the result in R3.##	This routine is copied from the Motorola PowerPC 602 Users Manual, pg. F-1.#		export	.__cvt_fp2unsigned{PR}		csect	.__cvt_fp2unsigned{PR}				lwz		r4,__constants{TC}(RTOC)		li		r3,0				# r3 = 0		lfd		fp0,16(r4)			# fp0 = 0.0		lfd		fp3,24(r4)			# fp3 = 2**32		lfd		fp4,32(r4)			# fp4 = 2**31		fcmpu	cr0,fp1,fp0			# cr0 = compare(fp1,0.0)		fcmpu	cr6,fp1,fp3			# cr6 = compare(fp1,2**32)		bltlr	cr0					# return 0x00000000 if input was < 0.0		addi	r3,r3,-1		bgelr	cr6					# return 0xFFFFFFFF if input was >= 2**32		fcmpu	cr7,fp1,fp4			# cr7 = compare(fp1,2**31)		fmr		fp2,fp1		blt		cr7,$+8				# use fp1 if < 2**31		fsub	fp2,fp1,fp4			# subtract 2**31		fctiwz	fp2,fp2				# convert float to 8-byte integer		stfd	fp2,-8(SP)			# store 8-byte integer		lwz		r3,-4(SP)			# load 4-byte integer		bltlr	cr7		addis	r3,r3,-32768		# add 2**31 if input was >= 2**31		blr#	__ptr_glue		-	glue for function calls through pointers##	Call the function whose 2-word TVector address is in R12.#		csect	.__ptr_glue{GL}		export	.__ptr_glue{GL}		lwz		r0,0(r12)		stw		RTOC,20(SP)		mtctr	r0		lwz		RTOC,4(r12)		bctr				#	_ptrgl			-	PPCC-compatible version of __ptr_glue##	Call the function whose 3-word TVector address is in R11. R12 must be#	set to point to the TVector on exit. The 3rd word of the TVector is ignored.#	(This is different from the AIX convention)#		csect	._ptrgl{GL}		export	._ptrgl{GL}		lwz		r0,0(r11)		stw		RTOC,20(SP)		mtctr	r0		lwz		RTOC,4(r11)		mr		r12,r11		bctr				#	__blockmove		-	move (unaligned) block of data##	Move the # bytes in R5 from the address in R4 to the address in R3.#	The # bytes is at least 128. We move the data in 32-byte chunks.#		csect	.__blockmove{PR}		export	.__blockmove{PR}#	save some nonvolatile registers that we need		stw		r13,-4(SP)		stw		r14,-8(SP)		stw		r15,-12(SP)#	set XER = chunk size		li		r7,32		mtxer	r7#	set CTR = #chunks to move		rlwinm	r8,r5,27,5,31		mtctr	r8#	set	R5 = remainder			rlwinm.	r5,r5,0,27,31	#	cr0(eq) = no remainder		#	copy 32-byte chunks		li		r6,0loop:	lswx	r8,r6,r4		stswx	r8,r6,r3		addi	r6,r6,32		bdnz	loop		beq		exit			#	return if no remainder		#	copy remainder		mtxer	r5		lswx	r8,r6,r4		stswx	r8,r6,r3#	restore registers and returnexit:	lwz		r15,-12(SP)		lwz		r14,-8(SP)		lwz		r13,-4(SP)		blr##	__save_fpr_XX	-	save FPR's XX through 31#		csect	.__save_fpr{PR}		export	.__save_fpr{PR}		export	.__save_fpr_14		export	.__savef14		export	.__save_fpr_15		export	.__savef15		export	.__save_fpr_16		export	.__savef16		export	.__save_fpr_17		export	.__savef17		export	.__save_fpr_18		export	.__savef18		export	.__save_fpr_19		export	.__savef19		export	.__save_fpr_20		export	.__savef20		export	.__save_fpr_21		export	.__savef21		export	.__save_fpr_22		export	.__savef22		export	.__save_fpr_23		export	.__savef23		export	.__save_fpr_24		export	.__savef24		export	.__save_fpr_25		export	.__savef25		export	.__save_fpr_26		export	.__savef26		export	.__save_fpr_27		export	.__savef27		export	.__save_fpr_28		export	.__savef28		export	.__save_fpr_29		export	.__savef29		export	.__save_fpr_30		export	.__savef30		export	.__save_fpr_31		export	.__savef31.__save_fpr_14:.__savef14:		stfd	fp14,-144(SP).__save_fpr_15:.__savef15:		stfd	fp15,-136(SP).__save_fpr_16:.__savef16:		stfd	fp16,-128(SP).__save_fpr_17:.__savef17:		stfd	fp17,-120(SP).__save_fpr_18:.__savef18:		stfd	fp18,-112(SP).__save_fpr_19:.__savef19:		stfd	fp19,-104(SP).__save_fpr_20:.__savef20:		stfd	fp20,-96(SP).__save_fpr_21:.__savef21:		stfd	fp21,-88(SP).__save_fpr_22:.__savef22:		stfd	fp22,-80(SP).__save_fpr_23:.__savef23:		stfd	fp23,-72(SP).__save_fpr_24:.__savef24:		stfd	fp24,-64(SP).__save_fpr_25:.__savef25:		stfd	fp25,-56(SP).__save_fpr_26:.__savef26:		stfd	fp26,-48(SP).__save_fpr_27:.__savef27:		stfd	fp27,-40(SP).__save_fpr_28:.__savef28:		stfd	fp28,-32(SP).__save_fpr_29:.__savef29:		stfd	fp29,-24(SP).__save_fpr_30:.__savef30:		stfd	fp30,-16(SP).__save_fpr_31:.__savef31:		stfd	fp31,-8(SP)		blr		##	__restore_fpr_XX	-	restore FPR's XX through 31#		csect	.__restore_fpr{PR}		export	.__restore_fpr{PR}		export	.__restore_fpr_14		export	.__restf14		export	.__restore_fpr_15		export	.__restf15		export	.__restore_fpr_16		export	.__restf16		export	.__restore_fpr_17		export	.__restf17		export	.__restore_fpr_18		export	.__restf18		export	.__restore_fpr_19		export	.__restf19		export	.__restore_fpr_20		export	.__restf20		export	.__restore_fpr_21		export	.__restf21		export	.__restore_fpr_22		export	.__restf22		export	.__restore_fpr_23		export	.__restf23		export	.__restore_fpr_24		export	.__restf24		export	.__restore_fpr_25		export	.__restf25		export	.__restore_fpr_26		export	.__restf26		export	.__restore_fpr_27		export	.__restf27		export	.__restore_fpr_28		export	.__restf28		export	.__restore_fpr_29		export	.__restf29		export	.__restore_fpr_30		export	.__restf30		export	.__restore_fpr_31		export	.__restf31.__restore_fpr_14:.__restf14:		lfd		fp14,-144(SP).__restore_fpr_15:.__restf15:		lfd		fp15,-136(SP).__restore_fpr_16:.__restf16:		lfd		fp16,-128(SP).__restore_fpr_17:.__restf17:		lfd		fp17,-120(SP).__restore_fpr_18:.__restf18:		lfd		fp18,-112(SP).__restore_fpr_19:.__restf19:		lfd		fp19,-104(SP).__restore_fpr_20:.__restf20:		lfd		fp20,-96(SP).__restore_fpr_21:.__restf21:		lfd		fp21,-88(SP).__restore_fpr_22:.__restf22:		lfd		fp22,-80(SP).__restore_fpr_23:.__restf23:		lfd		fp23,-72(SP).__restore_fpr_24:.__restf24:		lfd		fp24,-64(SP).__restore_fpr_25:.__restf25:		lfd		fp25,-56(SP).__restore_fpr_26:.__restf26:		lfd		fp26,-48(SP).__restore_fpr_27:.__restf27:		lfd		fp27,-40(SP).__restore_fpr_28:.__restf28:		lfd		fp28,-32(SP).__restore_fpr_29:.__restf29:		lfd		fp29,-24(SP).__restore_fpr_30:.__restf30:		lfd		fp30,-16(SP).__restore_fpr_31:.__restf31:		lfd		fp31,-8(SP)		blr