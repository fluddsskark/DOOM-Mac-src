/* *	CPlusLibPPC.h		-	C++ Runtime Support Routines for Metrowerks C++ (PowerPC) * *	Copyright © 1993 metrowerks inc. All Rights Reserved. * */#include <stdlib.h>	/*	private types	*/typedef void (*ConstructorDestructor)(void *, int);typedef struct DestructorChain {	struct DestructorChain	*next;			/*	pointer to next destructor chain element	*/	ConstructorDestructor	destructor;		/*	pointer to destructor function	*/	void					*object;		/*	pointer to memory location (0L: element is marker)	*/} DestructorChain;typedef struct PTMF {	long	this_delta;						/*	delta to this pointer	*/	long	vtbl_offset;					/*	offset in vtable (-1: not a virtual function)	*/	union {		void	*func_addr;					/*	nonvirtual function address	*/		long	ventry_offset;				/*	offset of virtual function entry in vtable	*/	}	func_data;} PTMF;	/*	private data		*/extern DestructorChain	*__global_destructor_chain;	/*	chain of global objects that need destruction	*/extern DestructorChain	*__local_destructor_chain;	/*	chain of local objects that need destruction	*/	/*	prototypes	*/#ifdef __cplusplusextern "C" {#endifPTMF *__ptmf_cast(long offset, const PTMF *ptmfrom, PTMF *ptmto);void *__register_global_object(void *object, ConstructorDestructor destructor, DestructorChain *regmem);void *__register_local_object(void *object, ConstructorDestructor destructor, DestructorChain *regmem);void *__preregister_local_object(void *object, DestructorChain *regmem);void *__reregister_local_object(DestructorChain *regmem, ConstructorDestructor destructor);void __destroy_local_objects(DestructorChain *lastregmem);void __destroy_local_objects_to(DestructorChain *lastregmem);void __destroy_local_chain(void);void __destroy_global_chain(void);void *__copy(char *to, char *from, size_t size);void *__new_hdl(size_t size);void __del_hdl(void *hdl);void *__init_arr(void *memptr, ConstructorDestructor constructor, size_t objectsize, size_t nobjects);void *__new_arr(ConstructorDestructor constructor, size_t objectsize, size_t nobjects);void __del_arr(void *memptr, ConstructorDestructor destructor);void __dc_arr(void *memptr, ConstructorDestructor constructordestructor, short objectsize, short nobjects);#ifdef __cplusplus}#endif