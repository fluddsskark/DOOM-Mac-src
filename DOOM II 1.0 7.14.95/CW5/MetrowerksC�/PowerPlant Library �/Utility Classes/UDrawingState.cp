// ===========================================================================//	UDrawingState.cp				©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Classes for saving/restoring the drawing state////	For each class, the Constructor saves the current state and the//	Destructor restores it, so you can use stack-based objects to//	automatically save and restore the state.////	There are separate Save and Restore functions in case you want to//	explicitly change the state (at other than construct and destruct time).////	Finally, each class has a Normalize function which sets the state of//	the current GrafPort to default values (same as those set by OpenPort).#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UDrawingState.h>#ifndef __DIALOGS__#include <Dialogs.h>#endif#ifndef __FONTS__#include <Fonts.h>#endif// ===========================================================================//	UQDGlobals// ===========================================================================////	Stores a pointer to the QuickDraw globals////	A stand-alone code module (code resource or code fragment) may need to//	access the QuickDraw globals of the main process. If the main process//	is an application, it should call UQDGlobals::InitializeToolbox(&qd).////	If you do not control the main program (for example, you are writing//	an external plug-in such as a HyperCard XCMD), you need to call//	UQDGlobals::SetQDGlobals(). For 68K programs, the QDGlobals are accessed//	relative to the A5 world of the main program. For PowerPC fragments,//	you can use the Code Fragment Manager to find the "qd" symbol.QDGlobals*	UQDGlobals::sQDGlobals;voidUQDGlobals::InitializeToolbox(	QDGlobals	*inQDGlobals){	sQDGlobals = inQDGlobals;		::InitGraf((Ptr) &sQDGlobals->thePort);		// Toolbox Managers	::InitFonts();	::InitWindows();	::InitMenus();	::TEInit();	::InitDialogs(nil);}QDGlobals*UQDGlobals::GetQDGlobals(){	return sQDGlobals;}voidUQDGlobals::SetQDGlobals(	QDGlobals	*inQDGlobals){	sQDGlobals = inQDGlobals;}GrafPtrUQDGlobals::GetCurrentPort(){	return sQDGlobals->thePort;}// ===========================================================================//	StColorState// ===========================================================================////	Color State Info://		Foreground Color//		Background ColorStColorState::StColorState(){	Save();}StColorState::~StColorState(){	Restore();}voidStColorState::Save(){	::GetForeColor(&mForegroundColor);	::GetBackColor(&mBackgroundColor);}voidStColorState::Restore(){	::RGBForeColor(&mForegroundColor);	::RGBBackColor(&mBackgroundColor);}voidStColorState::Normalize(){	RGBColor	rgbBlack = {0, 0, 0};	RGBColor	rgbWhite = {65535, 65535, 65535};	::RGBForeColor(&rgbBlack);	::RGBBackColor(&rgbWhite);}// ===========================================================================//	StColorPenState// ===========================================================================////	Color Pen State Info://		Foreground Color//		Background Color//		Pen Location//		Pen Size//		Pen Mode//		Pen PatternStColorPenState::StColorPenState(){	::GetPenState(&mPenState);}StColorPenState::~StColorPenState(){	::SetPenState(&mPenState);}voidStColorPenState::Save(){	mColorState.Save();	::GetPenState(&mPenState);}voidStColorPenState::Restore(){	mColorState.Restore();	::SetPenState(&mPenState);}voidStColorPenState::Normalize(){	StColorState::Normalize();	::PenNormal();}// ===========================================================================//	StTextState// ===========================================================================////	Text State Info://		Font Number//		Text Size//		Text Style//		Text ModeStTextState::StTextState(){	Save();}StTextState::~StTextState(){	Restore();}voidStTextState::Save(){	GrafPtr		currPort = UQDGlobals::GetCurrentPort();	mFontNumber = currPort->txFont;	mSize = currPort->txSize;	mStyle = currPort->txFace;	mMode = currPort->txMode;}voidStTextState::Restore(){	::TextFont(mFontNumber);	::TextSize(mSize);	::TextFace(mStyle);	::TextMode(mMode);}voidStTextState::Normalize(){	::TextFont(systemFont);	::TextSize(0);	::TextFace(0);	::TextMode(srcOr);}// ===========================================================================//	StClipRgnState// ===========================================================================////	ClipRgn State Info://		Clipping RegionStClipRgnState::StClipRgnState(){	mClipRgn = nil;	Save();}StClipRgnState::StClipRgnState(	const Rect	&inClipRect){	mClipRgn = nil;	Save();	::ClipRect(&inClipRect);}StClipRgnState::~StClipRgnState(){	Restore();	if (mClipRgn != nil) {		::DisposeRgn(mClipRgn);	}}voidStClipRgnState::Save(){	if (mClipRgn == nil) {		mClipRgn = ::NewRgn();	}		if (mClipRgn != nil) {		::GetClip(mClipRgn);	}}voidStClipRgnState::Restore(){	if (mClipRgn != nil) {		::SetClip(mClipRgn);	}}voidStClipRgnState::Normalize(){	Rect	wideOpen = {-32768, -32768, 32767, 32767};	::ClipRect(&wideOpen);}// ===========================================================================//	StPortOriginState// ===========================================================================////	Port Origin State Info://		GrafPtr upon entry//		Port Origin of input GrafPtrStPortOriginState::StPortOriginState(	GrafPtr		inGrafPtr){	Save(inGrafPtr);}StPortOriginState::~StPortOriginState(){	Restore();}voidStPortOriginState::Save(	GrafPtr		inGrafPtr){	mGrafPtr = UQDGlobals::GetCurrentPort();	::SetPort(inGrafPtr);	mOrigin = topLeft(inGrafPtr->portRect);}voidStPortOriginState::Restore(){	::SetOrigin(mOrigin.h, mOrigin.v);	::SetPort(mGrafPtr);}voidStPortOriginState::Normalize(){	::SetOrigin(0, 0);}// ===========================================================================//	StColorPortState// ===========================================================================////	ColorPort State Info://		GrafPtr upon entry//		Port Origin//		ColorPen State//		Text State//		Clipping RegionStColorPortState::StColorPortState(	GrafPtr		inGrafPtr)		: mPortOriginState(inGrafPtr){}StColorPortState::~StColorPortState(){}voidStColorPortState::Save(	GrafPtr		inGrafPtr){	mPortOriginState.Save(inGrafPtr);	mColorPenState.Save();	mTextState.Save();	mClipRgnState.Save();}voidStColorPortState::Restore(){	mColorPenState.Restore();	mTextState.Restore();	mClipRgnState.Restore();	mPortOriginState.Restore();}voidStColorPortState::Normalize(){	StPortOriginState::Normalize();	StColorPenState::Normalize();	StTextState::Normalize();	StClipRgnState::Normalize();}