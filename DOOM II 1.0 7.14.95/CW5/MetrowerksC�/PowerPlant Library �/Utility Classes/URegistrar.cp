// ===========================================================================//	URegistrar.cp					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Maintains a table of (Class ID, Creator Function Pointer) pairs that//	is used for dynamically creating objects from external data at runtime#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <URegistrar.h>#ifndef __MEMORY__#include <Memory.h>#endif// === Static Members ===Int16			URegistrar::sClassCount = 0;SClassTableH	URegistrar::sTableH;// ---------------------------------------------------------------------------//		¥ RegisterClass// ---------------------------------------------------------------------------//	Register a ClassID and associated ClassCreatorFunc////	If ClassID is already registered, the existing ClassCreatorFunc is//	replaced.voidURegistrar::RegisterClass(	ClassIDT			inClassID,	ClassCreatorFunc	inCreatorFunc){	Int16	classIndex = 1;				// One-based index into class table	if (sClassCount == 0) {				// Create new class table		sTableH = (SClassTableH) NewHandle(sizeof(SClassTable));		ThrowIfMemFail_(sTableH);		sClassCount = 1;										} else {										// See if class is already in table		classIndex = FetchClassIndex(inClassID);				if (classIndex == 0) {			// Not in table, so grow table by 1				SetHandleSize((Handle) sTableH,							(sClassCount+1) * sizeof(SClassTable));			ThrowIfMemError_();			sClassCount++;			classIndex = sClassCount;		}	}										// Store ID and CreatorFunc	(*sTableH)[classIndex - 1].classID = inClassID;	(*sTableH)[classIndex - 1].creatorFunc = inCreatorFunc;}// ---------------------------------------------------------------------------//		¥ CreateObject// ---------------------------------------------------------------------------//	Return a newly created object of the specified class using data from//	a Streamvoid*URegistrar::CreateObject(	ClassIDT	inClassID,	LStream		*inStream){	void	*theObject = nil;	Int16 index = FetchClassIndex(inClassID);	if (index != 0) {		theObject = (*(*sTableH)[index - 1].creatorFunc)(inStream);	}	return theObject;}// ---------------------------------------------------------------------------//		¥ FetchClassIndex// ---------------------------------------------------------------------------//	Return the index of a ClassID in our class table////	Returns 0 if the ClassID is not in our tableInt16URegistrar::FetchClassIndex(	ClassIDT	inClassID){		// Search class table. Stop when reaching the end or finding		// a matching ClassID	Int16	classIndex	= 0;	SClassTable			*tableP = *sTableH;	for (Int16 i = 0; i < sClassCount; i++) {		if (tableP[i].classID == inClassID) {			classIndex = i + 1;			break;		}	}	return classIndex;}