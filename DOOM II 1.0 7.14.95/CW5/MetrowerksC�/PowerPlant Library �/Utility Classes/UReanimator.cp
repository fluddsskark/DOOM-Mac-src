// ===========================================================================//	UReanimator.cp					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Functions for creating objects using data from resources#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UReanimator.h>#include <URegistrar.h>#include <UMemoryMgr.h>#include <LDataStream.h>#include <LControl.h>#include <LView.h>#include <LCommander.h>#ifndef __RESOURCES__#include <Resources.h>#endiftypedef	Int32	TagID;enum {	tag_ObjectData		= 'objd',	tag_BeginSubs		= 'begs',	tag_EndSubs			= 'ends',	tag_Include			= 'incl',	tag_UserObject		= 'user',	tag_ClassAlias		= 'dopl',	tag_End				= 'end.',		object_Null			= 'null'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endiftypedef struct {	Int16	numberOfItems;	PaneIDT	itemID[1];} SResList, *SResListP;#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif// ---------------------------------------------------------------------------//		¥ ReadObjects// ---------------------------------------------------------------------------//	Create new objects from the data read from a resource. Return a pointer//	to the first object created.void*UReanimator::ReadObjects(	OSType	inResType,	ResIDT	inResID){	StResource	objectRes(inResType, inResID);	HLockHi(objectRes.mResourceH);		LDataStream		objectStream(*objectRes.mResourceH,									GetHandleSize(objectRes.mResourceH));										Int16	ppobVersion;	objectStream.ReadData(&ppobVersion, sizeof(Int16));		SignalIf_(ppobVersion != 2);										void	*theObject = ObjectsFromStream(&objectStream);		return theObject;}// ---------------------------------------------------------------------------//		¥ ObjectsFromStream// ---------------------------------------------------------------------------//	Create new objects from the data in a Stream. Return a pointer//	to the first object created.void*UReanimator::ObjectsFromStream(	LStream	*inStream){	void		*firstObject = nil;	ClassIDT	aliasClassID = 'null';									// Save current defaults	LCommander	*defaultCommander = LCommander::GetDefaultCommander();	LView		*defaultView = LPane::GetDefaultView();		Boolean		readingTags = true;	do {		void	*currentObject = nil;	// Object created by current tag		TagID	theTag = tag_End;		inStream->ReadData(&theTag, sizeof(TagID));				switch (theTag) {					case tag_ObjectData: {					// Restore default Commander and View				LCommander::SetDefaultCommander(defaultCommander);				LPane::SetDefaultView(defaultView);									// Object data consists of a byte length, class ID,					// and then the data for the object. We use the					// byte length to manually set the stream marker					// after creating the object just in case the					// object constructor doesn't read all the data.									Int32		dataLength;				inStream->ReadData(&dataLength, sizeof(Int32));				Int32		dataStart = inStream->GetMarker();				ClassIDT	classID;				inStream->ReadData(&classID, sizeof(ClassIDT));								if (aliasClassID != 'null') {						// The previous tag specified an Alias for						// the ID of this Class					classID = aliasClassID;				}								currentObject = URegistrar::CreateObject(classID, inStream);				inStream->SetMarker(dataStart + dataLength, streamFrom_Start);								aliasClassID = 'null';	// Alias is no longer in effect								if (currentObject == nil  &&  classID != 'null') {					SignalPStr_("\pnil object created from tag");				}				break;			}							case tag_BeginSubs:				currentObject = ObjectsFromStream(inStream);				break;							case tag_EndSubs:			case tag_End:				readingTags = false;				break;							case tag_UserObject: {								// The UserObject tag is only needed for the Constructor					// view editing program. It tells Constructor to treat					// the following object as if it were an object of the					// specified superclass (which must be a PowerPlant					// class that Constructor knows about). We don't need					// this information here, so we just read and ignore					// the superclass ID.									ClassIDT	superClassID;				inStream->ReadData(&superClassID, sizeof(ClassIDT));				break;			}							case tag_ClassAlias:								// The ClassAlias tag defines the ClassID the for					// the next object in the Stream. This allows you					// to define an object which belongs to a subclass					// of another class, but has the same data as that					// other class.									inStream->ReadData(&aliasClassID, sizeof(ClassIDT));				break;							default:				SignalPStr_("\pUnrecognized Tag");				readingTags = false;				break;		}					if (firstObject == nil) {			firstObject = currentObject;		}				} while (readingTags);		return firstObject;}// ---------------------------------------------------------------------------//		¥ LinkListenerToControls// ---------------------------------------------------------------------------//	Associate a Listener with Controls specified as a list of Pane ID's//	stored in a resourcevoidUReanimator::LinkListenerToControls(	LListener	*inListener,	LView		*inControlContainer,	ResIDT		inResListID){	StResource	idList('RidL', inResListID);	HLockHi(idList.mResourceH);	SResListP	resListP = (SResListP) *idList.mResourceH;		for (Int16 i = 0; i < resListP->numberOfItems; i++) {		LControl	*theControl = (LControl*)			inControlContainer->FindPaneByID(resListP->itemID[i]);		if (theControl != nil) {			theControl->AddListener(inListener);		}	}}