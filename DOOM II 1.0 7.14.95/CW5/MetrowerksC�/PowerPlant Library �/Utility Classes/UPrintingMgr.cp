// ===========================================================================//	UPrintingMgr.cp				 	©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Printing utility functions#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UPrintingMgr.h>#ifndef __MEMORY__#include <Memory.h>#endifTHPrint	UPrintingMgr::mDefaultPrintRecordH;// ---------------------------------------------------------------------------//		¥ OpenPrinter// ---------------------------------------------------------------------------//	Open the current Printer driverBooleanUPrintingMgr::OpenPrinter(){	::PrOpen();		return (PrError() == noErr);}// ---------------------------------------------------------------------------//		¥ ClosePrinter// ---------------------------------------------------------------------------//	Close the current Printer drivervoidUPrintingMgr::ClosePrinter(){	::PrClose();}// ---------------------------------------------------------------------------//		¥ CreatePrintRecord// ---------------------------------------------------------------------------//	Allocate a new TPrint Record with default settings and return a//	handle to itTHPrintUPrintingMgr::CreatePrintRecord(){	THPrint	thePrintRecordH = nil;	if (OpenPrinter()) {		thePrintRecordH = (THPrint) NewHandle(sizeof(TPrint));		ThrowIfMemFail_(thePrintRecordH);		::PrintDefault(thePrintRecordH);	}	ClosePrinter();	return thePrintRecordH;}// ---------------------------------------------------------------------------//		¥ GetDefaultPrintRecord// ---------------------------------------------------------------------------//	Return a handle to the PrintRecord maintained by this classTHPrintUPrintingMgr::GetDefaultPrintRecord(){	if (mDefaultPrintRecordH == nil) {		mDefaultPrintRecordH = CreatePrintRecord();	}	return mDefaultPrintRecordH;}// ---------------------------------------------------------------------------//		¥ ValidatePrintRecord// ---------------------------------------------------------------------------//	Check whether a PrintRecord is valid for the current Printer driver,//	changing it if necessary. Returns true if the record was changed.////	Call this function to validate an existing PrintRecord that might//	have been used for a different Printer driver. For example, if you//	store a PrintRecord with a Document, you should validate that//	PrintRecord before using it for printing.BooleanUPrintingMgr::ValidatePrintRecord(	THPrint	ioPrintRecordH){	Boolean	wasChanged = false;	if (OpenPrinter()) {		wasChanged = ::PrValidate(ioPrintRecordH);	}	ClosePrinter();	return wasChanged;}// ---------------------------------------------------------------------------//		¥ AskPageSetup// ---------------------------------------------------------------------------//	Display the standard Page Setup dialog.////	If the user OK's the settings, the ioPrintRecordH is changed to the//	new settings and this function returns true. If the user Cancels,//	ioPrintRecordH is unchanged and this function returns false.BooleanUPrintingMgr::AskPageSetup(	THPrint	ioPrintRecordH){	Boolean userOK = false;	if (OpenPrinter()) {		userOK = ::PrStlDialog(ioPrintRecordH);	}	ClosePrinter();	return userOK;}// ---------------------------------------------------------------------------//		¥ AskPrintJob// ---------------------------------------------------------------------------//	Display the standard Print Job Dialog.////	If the user OK's the job, the ioPrintRecordH is changed to the//	new settings and this function returns true. If the user Cancels,//	ioPrintRecordH is unchanged and this function returns false.BooleanUPrintingMgr::AskPrintJob(	THPrint	ioPrintRecordH){	Boolean userOK = false;	if (OpenPrinter()) {		userOK = ::PrJobDialog(ioPrintRecordH);	}	ClosePrinter();	return userOK;}