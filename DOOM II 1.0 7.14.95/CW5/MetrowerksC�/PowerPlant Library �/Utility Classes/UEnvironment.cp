// ===========================================================================//	UEnvironment.cp					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Maintains information about the Environment (machine and system software)//	in which a program is running. Usually, you will set the features//	of the Environment at the beginning of the program using Gestalt calls.//	Storing the Gestalt results in this class for later inspection is//	faster than repeatedly calling Gestalt during the program.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UEnvironment.h>#ifndef __GESTALTEQU__#include <GestaltEqu.h>#endif// === Static Member Variable ===EnvironmentFeature	UEnvironment::sFeatures = 0;// ---------------------------------------------------------------------------//		¥ SetFeature// ---------------------------------------------------------------------------//	Set an Environment Feature on or offvoidUEnvironment::SetFeature(	EnvironmentFeature	inFeature,	Boolean				inSetting){	if (inSetting) {		sFeatures |= inFeature;	} else {		sFeatures &= ~inFeature;	}}// ---------------------------------------------------------------------------//		¥ HasFeature// ---------------------------------------------------------------------------//	Return whether an Environment Feature is on or offBooleanUEnvironment::HasFeature(	EnvironmentFeature	inFeature){	return ((sFeatures & inFeature) == inFeature);}// ---------------------------------------------------------------------------//		¥ HasGestaltAttribute// ---------------------------------------------------------------------------//	Return whether an attribute bit of a Gestalt selector is set////	inSelector should be a Gestalt selector with the "Attr" suffix//	inAttribute is the bit number in the Atrribute to checkBooleanUEnvironment::HasGestaltAttribute(	OSType	inSelector,	Uint32	inAttribute){	Int32	response;	return ( (::Gestalt(inSelector, &response) == noErr)  &&			 ((response & (1L << inAttribute)) != 0) );}