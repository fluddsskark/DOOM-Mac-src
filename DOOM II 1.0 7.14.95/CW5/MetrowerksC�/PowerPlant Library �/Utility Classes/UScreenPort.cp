// ===========================================================================//	UScreenPort.cp					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Creates a GrafPort that is the same size as the Gray Region//	(all screen area excluding the menu bar).////	All class member functions are static, so you never actually//	make a UDesktop object.////	Routines://		void UScreenPort::Initialize()//			Creates a new GrafPort.////		void	UScreenPort::Dispose();//			Disposes of the GrafPort////		GrafPtr	UScreenPort::GetScreenPort();//			Returns a pointer to the GrafPort////	Typical Use://		> Call UScreenPort::Initialize() once at the beginning of your//		program, usually in the constructor for your Application class.//		> Call SetPort(UScreenPort::GetScreenPort()) whenever you want//		to draw into the Screen Port. This is just a normal QuickDraw//		port, so it's up to you to adjust the port characteristics//		(font, pen, color settings, etc.) as needed.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UScreenPort.h>#ifndef __MEMORY__#include <Memory.h>#endif#ifndef __GESTALTEQU__#include <GestaltEqu.h>#endif#ifndef __WINDOWS__#include <Windows.h>#endif// === Static Member Variable ===GrafPtr	UScreenPort::sScreenGrafPtr = nil;// ---------------------------------------------------------------------------//		¥ Initialize// ---------------------------------------------------------------------------//	Create a GrafPort covering the entire gray region (all screen area)voidUScreenPort::Initialize(){	if (sScreenGrafPtr != nil) {		// Do nothing if already initialized		return;	}			// Allocate and Initialize the GrafPort, using color if it		// is available on this machine			Int32		qdVersion;	OSErr	err = Gestalt(gestaltQuickdrawVersion, &qdVersion);	if ( (err != noErr)  ||  (qdVersion == gestaltOriginalQD) ) {		sScreenGrafPtr = (GrafPtr) NewPtr(sizeof(GrafPort));		OpenPort(sScreenGrafPtr);	} else {		sScreenGrafPtr = (GrafPtr) NewPtr(sizeof(CGrafPort));		OpenCPort((CGrafPtr) sScreenGrafPtr);	}			// To make the GrafPort the same as the screen (excluding the		// menu bar), we adjust its origin so that its local coordinates		// are the same as global coordinates and set its port rectangle,		// clipping region, and visible region to the size of the Gray Region.			RgnHandle	grayRgnH = GetGrayRgn();	Rect		grayBounds = (**grayRgnH).rgnBBox;		MovePortTo(grayBounds.left, grayBounds.top);	SetOrigin(grayBounds.left, grayBounds.top);		PortSize(grayBounds.right - grayBounds.left,				grayBounds.bottom - grayBounds.top);	SetClip(grayRgnH);	CopyRgn(grayRgnH, sScreenGrafPtr->visRgn);}voidUScreenPort::Dispose(){	if (sScreenGrafPtr != nil) {		DisposePtr((Ptr) sScreenGrafPtr);		sScreenGrafPtr = nil;	}}GrafPtrUScreenPort::GetScreenPort(){	if (sScreenGrafPtr == nil) {		// Initialize if necessary		Initialize();	}			return sScreenGrafPtr;}