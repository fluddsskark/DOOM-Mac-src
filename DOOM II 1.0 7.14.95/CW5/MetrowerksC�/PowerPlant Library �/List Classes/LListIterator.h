// ===========================================================================//	LListIterator.h					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include <LIteratedList.h>class	LListIterator {	friend class LIteratedList;public:			LListIterator(LIteratedList &inList, Int32 inPosition);			~LListIterator();				void	ResetTo(Int32 inPosition);		Boolean	Current(void *outItem);	Boolean	Next(void *outItem);	Boolean	Previous(void *outItem);	protected:	LListIterator	*mNextIterator;	LIteratedList	&mList;	Int32			mCurrIndex;	Int32			mNextIndex;	void			CalcNextIndex();	void			SetNextIterator(LListIterator *inIterator);	LListIterator*	GetNextIterator();		void			ListDied();	void			ItemsInserted(Int32 inCount, Int32 inAtIndex);	void			ItemsRemoved(Int32 inCount, Int32 inAtIndex);};	// Constants which specify the position where to start iteratingconst Int32		iterate_FromStart	= 0;const Int32		iterate_FromEnd		= -1;