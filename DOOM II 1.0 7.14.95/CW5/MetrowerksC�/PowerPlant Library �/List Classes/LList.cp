// ===========================================================================//	LList.cp						©1993 Metrowerks Inc. All rights reserved.// ===========================================================================//	//	An ordered collection of items. Item positions in the list are//	one-based--the first item is at index 1.////	This List is a DynamicArray which can be associated with a ListIterator.////	Note about index values://		Index values are signed, 32-bit integers. Only positive values//		are valid. PowerPlant uses negative index values as flags for//		special situations.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LList.h>#include <LListIterator.h>// ---------------------------------------------------------------------------//		¥ LList// ---------------------------------------------------------------------------//	Contruct an empty List of pointersLList::LList()		: LDynamicArray(sizeof(void*)){}// ---------------------------------------------------------------------------//		¥ LList// ---------------------------------------------------------------------------//	Contructct an empty List of items with the specified sizeLList::LList(	Int32	inItemSize)		: LDynamicArray(inItemSize){}// ---------------------------------------------------------------------------//		¥ LList// ---------------------------------------------------------------------------//	Contructct List from an existing Handle of items of the specified size.//	The List assumes ownership of the Handle.LList::LList(	Int32	inItemSize,	Handle	inItemsHandle)		: LDynamicArray(inItemSize, inItemsHandle){}// ---------------------------------------------------------------------------//		¥ ~LList// ---------------------------------------------------------------------------//	DestructorLList::~LList(){}// ---------------------------------------------------------------------------//		¥ GetCount// ---------------------------------------------------------------------------//	Return the number of items in a ListInt32LList::GetCount() const{	return mItemCount;}// ---------------------------------------------------------------------------//		¥ FetchItemAt// ---------------------------------------------------------------------------//	Pass back the Item at the specified index////	Returns true if an item exists at inIndex (and sets outItem)//	Returns false if inIndex is out of range (and leave outItem unchanged)BooleanLList::FetchItemAt(	Int32	inAtIndex,	void	*outItem){	return LDynamicArray::FetchItemAt(inAtIndex, outItem);}// ---------------------------------------------------------------------------//		¥ InsertItemsAt// ---------------------------------------------------------------------------//	Insert items at the specified position in a List////	inCount items are inserted into the List starting at inAtIndex.//	All items are set to the same value, as specified by inItem.voidLList::InsertItemsAt(	Uint32	inCount,	Int32	inAtIndex,	void	*inItem){	if (inAtIndex > mItemCount) {		// Check upper bound		inAtIndex = mItemCount + 1;		// Insert at end of List	}	LDynamicArray::InsertItemsAt(inCount, inAtIndex, inItem);	ItemsInserted(inCount, inAtIndex);}// ---------------------------------------------------------------------------//		¥ RemoveItemsAt// ---------------------------------------------------------------------------//	Remove Items starting at the specified position in the ListvoidLList::RemoveItemsAt(	Uint32	inCount,	Int32	inAtIndex){	Int32	saveCount = mItemCount;	LDynamicArray::RemoveItemsAt(inCount, inAtIndex);	Int32	numberRemoved = saveCount - mItemCount;		if (numberRemoved > 0) {		if (inAtIndex == arrayIndex_Last) {			inAtIndex = mItemCount;		}				ItemsRemoved(numberRemoved, inAtIndex);	}}