// ===========================================================================//	LDataStream.cp					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	A Stream whose bytes are in block of memory defined by a pointer to//	the first byte and a byte count#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LDataStream.h>#ifndef __MEMORY__#include <Memory.h>#endif// ---------------------------------------------------------------------------//		¥ LDataStream// ---------------------------------------------------------------------------//	Default ConstructorLDataStream::LDataStream(){	mBuffer = nil;					// Buffer is undefined}// ---------------------------------------------------------------------------//		¥ LDataStream(void*, Int32)// ---------------------------------------------------------------------------//	Construct from a pointer and a byte count////	inBuffer points to the first byte of the Stream, which is inLength//	bytes longLDataStream::LDataStream(	void	*inBuffer,	Int32	inLength){	SetBuffer(inBuffer, inLength);}// ---------------------------------------------------------------------------//		¥ ~LDataStream// ---------------------------------------------------------------------------//	DestructorLDataStream::~LDataStream(){}voidLDataStream::SetBuffer(	void	*inBuffer,	Int32	inLength){	mBuffer = inBuffer;	SetLength(inLength);}void*LDataStream::GetBuffer(){	return mBuffer;}Int32LDataStream::WriteData(	const void	*inFromBuffer,	Int32		inByteCount){	Int32	bytesWritten = inByteCount;		if (GetMarker() + inByteCount > GetLength()) {		bytesWritten = GetLength() - GetMarker();	}		BlockMove(inFromBuffer, (Int8*) mBuffer + GetMarker(), bytesWritten);	SetMarker(bytesWritten, streamFrom_Marker);	return bytesWritten;}Int32LDataStream::ReadData(	void	*outToBuffer,	Int32	inByteCount){									// Upper bound is number of bytes from									//   marker to end	Int32	bytesRead = inByteCount;	if (GetMarker() + inByteCount > GetLength()) {		bytesRead = GetLength() - GetMarker();	}		BlockMove((Int8*) mBuffer + GetMarker(), outToBuffer, bytesRead);	SetMarker(bytesRead, streamFrom_Marker);	return bytesRead;}