// ===========================================================================//	UDesktop.h				 		©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Utility class for manipulating windows.////	In order to implement floating windows, you can't call certain Window//	Manager routines, namely SelectWindow, ShowWindow, HideWindow, and//	DragWindow. You also have to make sure new windows are created at the//	proper position in the window list. This class provides wrapper functions//	for these Window Manager routines.////		Window Manager Trap				UDesktop Wrapper Function//		-------------------				-------------------------//		GetNewWindow/GetNewCWindow		NewDeskWindow//		SelectWindow					SelectDeskWindow//		ShowWindow						ShowDeskWindow//		HideWindow						HideDeskWindow//		DragWindow						DragDeskWindow////	The UDesktop routines take Window objects as parameters rather than//	Toolbox window pointers.////	Other Functions:////		WindowIsSelected	- Checks if Window is at the front of its layer//		Suspend				- Call when program receives a suspend event//		Resume				- Call when program receives a resume event//		Deactivate			- Call before displaying a modal dialog//		Activate			- Call after dismissing a modal dialog////		FetchTopRegular		- Returns topmost window in Regular layer//		FetchTopFloater		- Returns topmost window in Floater layer//		FetchBottomFloater	- Returns bottommost window in Floater layer//		FetchTopModal		- Returns topmost window in Modal layer//		FetchBottomModal	- Returns bottommost window in Modal layer//		FrontWindowIsModal	- Checks if front window is Modal										#pragma once#include <PP_Prefix.h>#ifndef __WINDOWS__#include <Windows.h>#endifclass	LWindow;class	UDesktop {public:	static WindowPtr	NewDeskWindow(LWindow *inWindow,  Int16 inWINDid,										WindowPtr inBehind);		static Boolean		WindowIsSelected(LWindow *inWindow);	static void			SelectDeskWindow(LWindow *inWindow);	static void			ShowDeskWindow(LWindow *inWindow);	static void			HideDeskWindow(LWindow *inWindow);	static void			DragDeskWindow(LWindow *inWindow,										const EventRecord &inMacEvent,										const Rect &inDragRect);		static void			Suspend();	static void			Resume();		static void			Deactivate();	static void			Activate();		static LWindow*		FetchTopRegular();	static LWindow*		FetchTopFloater();	static LWindow*		FetchBottomFloater();	static LWindow*		FetchTopModal();	static LWindow*		FetchBottomModal();	static Boolean		FrontWindowIsModal();	static void			NormalizeWindowOrder();};