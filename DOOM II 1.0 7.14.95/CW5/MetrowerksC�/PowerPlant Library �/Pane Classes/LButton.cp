// ===========================================================================//	LButton.cp						©1993 Metrowerks Inc. All rights reserved.// ===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LButton.h>#include <LStream.h>#include <UDrawingState.h>#ifndef __ICONS__#include <Icons.h>#endif#ifndef __TOOLUTILS__#include <ToolUtils.h>#endif// ---------------------------------------------------------------------------//		¥ CreateButtonStream// ---------------------------------------------------------------------------//	Create a new Button object from the data in a StreamLButton*LButton::CreateButtonStream(	LStream	*inStream){	return (new LButton(inStream));}// ---------------------------------------------------------------------------//		¥ LButton// ---------------------------------------------------------------------------//	Default ConstructorLButton::LButton(){	mGraphicsType = 'ICN#';	mNormalID = resID_Undefined;	mPushedID = resID_Undefined;}// ---------------------------------------------------------------------------//		¥ LButton(const LButton&)// ---------------------------------------------------------------------------//	Copy ConstructorLButton::LButton(	const LButton	&inOriginal)		: LControl(inOriginal){	mGraphicsType = inOriginal.mGraphicsType;	mNormalID = inOriginal.mNormalID;	mPushedID = inOriginal.mPushedID;}// ---------------------------------------------------------------------------//		¥ LButton// ---------------------------------------------------------------------------//	Construct from input parametersLButton::LButton(	const SPaneInfo	&inPaneInfo,	MessageT		inClickedMessage,	OSType			inGraphicsType,	ResIDT			inNormalID,	ResIDT			inPushedID)		: LControl(inPaneInfo, inClickedMessage, 0, 0, 1){	mGraphicsType = inGraphicsType;	mNormalID = inNormalID;	mPushedID = inPushedID;}// ---------------------------------------------------------------------------//		¥ LButton(LStream*)// ---------------------------------------------------------------------------//	Construct a new Button from the data in a Stream////	Stream data must be://		OSType		Graphics Type ('ICN#', or 'ICON', or 'PICT')//		ResIDT		Resource ID for normal graphic//		ResIDT		Resource ID for pushed graphicLButton::LButton(	LStream	*inStream)		: LControl(inStream){	inStream->ReadData(&mGraphicsType, sizeof(OSType));	inStream->ReadData(&mNormalID, sizeof(ResIDT));	inStream->ReadData(&mPushedID, sizeof(ResIDT));}voidLButton::SetGraphicsType(	OSType	inGraphicsType){	mGraphicsType = inGraphicsType;}voidLButton::SetGraphics(	ResIDT	inNormalID,	ResIDT	inPushedID){	mNormalID = inNormalID;	mPushedID = inPushedID;}// ---------------------------------------------------------------------------//		¥ DrawSelf// ---------------------------------------------------------------------------//	Draw the ButtonvoidLButton::DrawSelf(){	DrawGraphic(mNormalID);}// ---------------------------------------------------------------------------//		¥ DrawGraphic// ---------------------------------------------------------------------------//	Draw the graphic for a Button. Pane must already be focused.voidLButton::DrawGraphic(	ResIDT	inGraphicID){	Rect	frame;	CalcLocalFrameRect(frame);	StColorPenState::Normalize();		if (inGraphicID == resID_Undefined) {		::FillRect(&frame, &UQDGlobals::GetQDGlobals()->ltGray);		::FrameRect(&frame);	} else if (mGraphicsType == 'ICN#') {		if (mEnabled != triState_Off) {			::PlotIconID(&frame, atNone, ttNone, inGraphicID);		} else {			::PlotIconID(&frame, atNone, ttDisabled, inGraphicID);		}			} else if (mGraphicsType == 'PICT') {		PicHandle	macPictureH = ::GetPicture(inGraphicID);		if (macPictureH != nil) {			::DrawPicture(macPictureH, &frame);		}			} else if (mGraphicsType == 'ICON') {		Handle	iconHandle = ::GetIcon(inGraphicID);		if (iconHandle != nil) {			::PlotIcon(&frame, iconHandle);		}	}}// ---------------------------------------------------------------------------//		¥ HotSpotAction// ---------------------------------------------------------------------------//	Take action during mouse down tracking////	Buttons toggle between two graphics, depending on whether the mouse is//	inside or outside the button.voidLButton::HotSpotAction(	Int16		inHotSpot,	Boolean		inCurrInside,	Boolean		inPrevInside){									// Draw if cursor moved from IN to OUT									//   or from OUT to IN	if (inCurrInside != inPrevInside) {				ResIDT	theID = mNormalID;	// Pick which graphic to draw		if (inCurrInside) {			theID = mPushedID;		}				DrawGraphic(theID);	}}voidLButton::HotSpotResult(	Int16	inHotSpot){									// Undo Button hilighting	HotSpotAction(inHotSpot, false, true);	BroadcastValueMessage();		// Although value doesn't change,									//   send message to inform Listeners									//   that button was clicked}BooleanLButton::PointIsInFrame(	Int32	inHoriz,	Int32	inVert) const{	Boolean	isInFrame = LPane::PointIsInFrame(inHoriz, inVert);		if (isInFrame && (mGraphicsType == 'ICN#')) {		Rect	frame;		if (CalcPortFrameRect(frame)) {			Point	thePoint;			thePoint.h = inHoriz;			thePoint.v = inVert;			isInFrame = PtInIconID(thePoint, &frame, ttNone, mNormalID);		}	}		return isInFrame;}