// ===========================================================================//	LGrafPortView.cp				©1994 Metrowerks Inc. All rights reserved.// ===========================================================================////	A GrafPortView is a top-level PowerPlant View (it's SuperView should be//	nil) that can be hosted inside a non-PowerPlant window. This allows you//	to use PowerPlant Panes in other application frameworks or in externals//	such as HyperCard XMCDs.////	A GrafPortView acts as the interface between PowerPlant Panes and//	"foreign" code that knows nothing about PowerPlant. You are responsible//	for calling proper GrafPortView functions at certain times. Unlike other//	PowerPlant Panes, GrafPortView always preserves Port settings.////	Initalizing PowerPlant//		Since GrafPortViews can be used without PowerPlant's Application and//		Window classes, you must initialize some low-level PowerPlant//		classes yourself.////		* QuickDraw Globals://			Call UQDGlobals::SetQDGlobals(&qd) at the beginning of your//			program. If you are writing a code resource, you must get a//			pointer to the qd globals (by looking at A5 on a 68K).////		* UEnvironment://			Set the flag indicating if the machine has color QuickDraw:////			Int32		qdVersion = gestaltOriginalQD;//			Gestalt(gestaltQuickdrawVersion, &qdVersion);//			UEnvironment::SetFeature(env_SupportsColor,//									 (qdVersion > gestaltOriginalQD));//			//	Creating GrafPortViews://		* You can create GrafPortViews from PPob resources by registering//		the CreateGrafPortViewStream() function with the URegistrar and//		calling CreateGrafPortView().////		* You can also create GrafPortViews manually by using the constructor//		that takes a SPaneInfo& and SViewInfo& parameters (same as LView).////	Window Events://		* Update Event//			Call UpdatePort() if the GrafPortView is the only thing in//			the Window. This takes cares of calling BeginUpdate/EndUpdate.////			Call Draw(nil) to draw the GrafPortView if there are other things//			in the Window. In this case, you must call BeginUpdate/EndUpdate//			yourself.////		* Activate Event//			Call Activate()////		* Deactivate Event//			Call Deactivate()////		* Mouse Down Event//			Call ClickInContent()////	"Target" Events://		* Key Presses//			GrafPortView does not do anything special for key presses. You//			should deal directly with the Target:////				LCommander *theTarget = LCommander::GetTarget();//				if (theTarget != nil) {//					theTarget->ProcessKeyPress(&theEventRecord);//				}////		* Menu Commands//			GrafPortView does not do anything special for menu commands. You//			should deal directly with the Target:////				LCommander *theTarget = LCommander::GetTarget();//				if (theTarget != nil) {//					theTarget->ProcessCommand(theCommand, theParam);//				}////	Idle Time://		GrafPortView does not do anything special for idle time. If you have//		Panes inside a GrafPortView that are Periodicals, you should call//		LPeriodical::DevoteTimeToIdlers() and//		LPeriodical::DevoteTimeToRepeater() at the appropriate times//		from your event loop.////	NOTE: With both Target and Idle Time events, you may want to preserve//	the Port settings (origin, clipping region, etc) if there are other//	items in your window besides the GrafPortView. PowerPlant always Focuses//	Panes before drawing, but other code might assume that the GrafPort//	is in a certain state.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LGrafPortView.h>#include <LPeriodical.h>#include <UDrawingState.h>#include <UReanimator.h>// ---------------------------------------------------------------------------//		¥ CreateGrafPortView// ---------------------------------------------------------------------------//	Return a new GrafPortView object initialized from a PPob resource////	GrafPortView is put inside the current GrafPortLGrafPortView*LGrafPortView::CreateGrafPortView(	ResIDT		inGrafPortViewID,	LCommander	*inSuperCommander){	StColorPortState	mSavePort(UQDGlobals::GetCurrentPort());		SetDefaultCommander(inSuperCommander);	LGrafPortView	*theGrafPortView =			(LGrafPortView*) UReanimator::ReadObjects('PPob', inGrafPortViewID);	theGrafPortView->FinishCreate();		OutOfFocus(nil);	return theGrafPortView;}// ---------------------------------------------------------------------------//		¥ CreateGrafPortViewStream// ---------------------------------------------------------------------------//	Return a newly created Window object initialized with data from a StreamLGrafPortView*LGrafPortView::CreateGrafPortViewStream(	LStream	*inStream){	return (new LGrafPortView(inStream));}// ---------------------------------------------------------------------------//		¥ LGrafPortView// ---------------------------------------------------------------------------//	Default ConstructorLGrafPortView::LGrafPortView(){	::GetPort(&mGrafPtr);	InitGrafPortView();}// ---------------------------------------------------------------------------//		¥ LGrafPortView(GrafPtr)// ---------------------------------------------------------------------------//	ConstructorLGrafPortView::LGrafPortView(	GrafPtr	inGrafPtr){	mGrafPtr = inGrafPtr;	InitGrafPortView();}// ---------------------------------------------------------------------------//		¥ LView(SPaneInfo&, SViewInfo&)// ---------------------------------------------------------------------------//	Construct GrafPortView from input parameters////	GrafPortView is put inside the current GrafPortLGrafPortView::LGrafPortView(	const SPaneInfo	&inPaneInfo,	const SViewInfo &inViewInfo)		: LView(inPaneInfo, inViewInfo){	::GetPort(&mGrafPtr);		if (mVisible == triState_Latent) {		mVisible = triState_On;	}		mActive = triState_Off;		if (mEnabled == triState_Latent) {		mEnabled = triState_On;	}}// ---------------------------------------------------------------------------//		¥ LGrafPortView(LStream*)// ---------------------------------------------------------------------------//	Constructor from a StreamLGrafPortView::LGrafPortView(	LStream	*inStream)		: LView(inStream){	::GetPort(&mGrafPtr);		if (mVisible == triState_Latent) {		mVisible = triState_On;	}		mActive = triState_Off;		if (mEnabled == triState_Latent) {		mEnabled = triState_On;	}}// ---------------------------------------------------------------------------//		¥ ~LGrafPortView// ---------------------------------------------------------------------------//	DestructorLGrafPortView::~LGrafPortView(){}// ---------------------------------------------------------------------------//		¥ InitGrafPortView// ---------------------------------------------------------------------------//	Private initializervoidLGrafPortView::InitGrafPortView(){	mFrameLocation.h = mFrameLocation.v = 0;	mFrameSize.width = mGrafPtr->portRect.right - mGrafPtr->portRect.left;	mFrameSize.height = mGrafPtr->portRect.bottom - mGrafPtr->portRect.top;		mFrameBinding.left =		mFrameBinding.top =		mFrameBinding.right =		mFrameBinding.bottom = true;			CalcPortFrameRect(mRevealedRect);		mVisible = triState_On;	mActive = triState_Off;	mEnabled = triState_On;}// ---------------------------------------------------------------------------//		¥ GetMacPort// ---------------------------------------------------------------------------//	Return the Toolbox GrafPort associated with a LGrafPortViewGrafPtrLGrafPortView::GetMacPort() const{	return mGrafPtr;}// ---------------------------------------------------------------------------//		¥ EstablishPort// ---------------------------------------------------------------------------//	Make GrafPortView the current Port////	Usage Note: If you call this function directly, you should call//		LView::OutOfFocus(nil), since changing the current port may//		invalidate the Focus.voidLGrafPortView::EstablishPort(){	::SetPort(mGrafPtr);}// ---------------------------------------------------------------------------//		¥ Invalidating and Validating areas// ---------------------------------------------------------------------------voidLGrafPortView::InvalPortRect(	const Rect	*inRect){	StPortOriginState	portOriginState(mGrafPtr);	OutOfFocus(nil);	::SetOrigin(0, 0);	::InvalRect(inRect);}voidLGrafPortView::InvalPortRgn(	RgnHandle	inRgnH){	StPortOriginState	portOriginState(mGrafPtr);	OutOfFocus(nil);	::SetOrigin(0, 0);	::InvalRgn(inRgnH);}voidLGrafPortView::ValidPortRect(	const Rect	*inRect){	StPortOriginState	portOriginState(mGrafPtr);	OutOfFocus(nil);	::SetOrigin(0, 0);	::ValidRect(inRect);}voidLGrafPortView::ValidPortRgn(	RgnHandle	inRgnH){	StPortOriginState	portOriginState(mGrafPtr);	OutOfFocus(nil);	::SetOrigin(0, 0);	::ValidRgn(inRgnH);}// ---------------------------------------------------------------------------//		¥ UpdatePort// ---------------------------------------------------------------------------//	Redraw invalidated area of the GrafPortViewvoidLGrafPortView::UpdatePort(){	StColorPortState	savePortState(mGrafPtr);	OutOfFocus(nil);	::BeginUpdate(mGrafPtr);	::EraseRect(&mGrafPtr->portRect);	Draw(mGrafPtr->visRgn);	::EndUpdate(mGrafPtr);	OutOfFocus(nil);}// ---------------------------------------------------------------------------//		¥ Draw// ---------------------------------------------------------------------------//	Draw a GrafPortViewvoidLGrafPortView::Draw(	RgnHandle	inSuperDrawRgnH){	StColorPortState	savePortState(mGrafPtr);	OutOfFocus(nil);	LView::Draw(inSuperDrawRgnH);		OutOfFocus(nil);}// ---------------------------------------------------------------------------//		¥ DrawSelf// ---------------------------------------------------------------------------//	Draw a GrafPortView////	This function erases the GrafPortView's Frame. Perhaps there should be//	an option for this ???voidLGrafPortView::DrawSelf(){	Rect	frame;	CalcLocalFrameRect(frame);	EraseRect(&frame);}// ---------------------------------------------------------------------------//		¥ Activate// ---------------------------------------------------------------------------//	Activate a GrafPortViewvoidLGrafPortView::Activate(){	if (mActive == triState_Off) {		StColorPortState	savePortState(mGrafPtr);		OutOfFocus(nil);			mActive = triState_On;		ActivateSelf();		LView::Activate();					// Normally the active Window contains the Target. If this			// Window can be the Target, restore the Target to what			// it was when the Window was last active. Don't do this			// if the Window is already on duty (which happens when			// the Window is a Superior of a Window that was just			// deactivated).					if (!IsOnDuty()) {			RestoreTarget();		}				OutOfFocus(nil);	}}// ---------------------------------------------------------------------------//		¥ Deactivate// ---------------------------------------------------------------------------//	Deactivate a GrafPortViewvoidLGrafPortView::Deactivate(){	StColorPortState	savePortState(mGrafPtr);	OutOfFocus(nil);	LView::Deactivate();		if (IsOnDuty()) {			// Switch target to SuperCommander to prevent an		// inactive Window from containing the Target				SwitchTarget(GetSuperCommander());	}		OutOfFocus(nil);}// ---------------------------------------------------------------------------//		¥ ClickInContent// ---------------------------------------------------------------------------//	Respond to a mouse click inside a GrafPortViewvoidLGrafPortView::ClickInContent(	const EventRecord	&inMacEvent){	if (IsEnabled()) {		StColorPortState	savePortState(mGrafPtr);		OutOfFocus(nil);		SMouseDownEvent		theMouseDown;		theMouseDown.wherePort = inMacEvent.where;				FocusDraw();		::GlobalToLocal(&theMouseDown.wherePort);		LocalToPortPoint(theMouseDown.wherePort);				theMouseDown.whereLocal = theMouseDown.wherePort;		theMouseDown.macEvent = inMacEvent;		theMouseDown.delaySelect = false;				Click(theMouseDown);		OutOfFocus(nil);	}}voidLGrafPortView::DoKeyPress(	const EventRecord	&inMacEvent){	LCommander	*theTarget = GetTarget();	if (theTarget != nil) {		StColorPortState	savePortState(mGrafPtr);		theTarget->ProcessKeyPress(inMacEvent);		OutOfFocus(nil);	}}voidLGrafPortView::DoIdle(	const EventRecord	&inMacEvent){	StColorPortState	savePortState(mGrafPtr);	LPeriodical::DevoteTimeToIdlers(inMacEvent);	OutOfFocus(nil);}