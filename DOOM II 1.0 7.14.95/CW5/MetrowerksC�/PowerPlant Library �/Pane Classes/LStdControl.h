// ===========================================================================//	LStdControl.h					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include <LControl.h>#ifndef __CONTROLS__#include <Controls.h>#endiftypedef struct	SCNTLResource {	Rect		bounds;	Int16		value;	Int16		visible;	Int16		max;	Int16		min;	Uint16		procID;	Int32		refCon;	Str255		title;} SCNTLResource, **SCNTLResourceH;typedef	pascal void (*ThumbActionFunc)();class	LStdControl : public LControl {public:	enum { class_ID = 'sctl' };	static LStdControl*	CreateFromCNTL(ResIDT inCNTLid,							MessageT inValueMessage, ResIDT inTextTraitsID,							LView *inSuperView);	static LStdControl*	CreateStdControlStream(LStream *inStream);							LStdControl();						LStdControl(Int16 inControlKind);						LStdControl(const LStdControl &inOriginal);						LStdControl(const SPaneInfo &inPaneInfo,							MessageT inValueMessage, Int32 inValue,							Int32 inMinValue, Int32 inMaxValue,							Int16 inControlKind, ResIDT inTextTraitsID,							Str255 inTitle, Int32 inMacRefCon);						LStdControl(const SPaneInfo &inPaneInfo,							MessageT inValueMessage, Int32 inValue,							Int32 inMinValue, Int32 inMaxValue,							Int16 inControlKind, ResIDT inTextTraitsID,							ControlHandle inMacControlH);						LStdControl(LStream *inStream);	virtual				~LStdControl();		void				SetStdMinAndMax();	ControlHandle		GetMacControl();	virtual void		ResizeFrameBy(Int16 inWidthDelta, Int16 inHeightDelta,										Boolean inRefresh);	virtual void		MoveBy(Int32 inHorizDelta, Int32 inVertDelta,										Boolean inRefresh);	virtual StringPtr	GetDescriptor(Str255 outDescriptor) const;	virtual void		SetDescriptor(ConstStr255Param inDescriptor);	virtual void		SetValue(Int32 inValue);	virtual void		SetMinValue(Int32 inMinValue);	virtual void		SetMaxValue(Int32 inMaxValue);		void				SetActionProc(ControlActionUPP inActionProc);	void				SetThumbFunc(ThumbActionFunc inThumbFunc);		virtual Boolean		FocusDraw();protected:	ControlHandle		mMacControlH;	ThumbActionFunc		mThumbFunc;	Int16				mControlKind;	ResIDT				mTextTraitsID;	Boolean				mUsingBigValues;	static Boolean		ValueIsInStdRange(Int32 inValue);		void				AlignControlRect();	Int16				CalcSmallValue(Int32 inBigValue);	Int32				CalcBigValue(Int16 inSmallValue);	virtual Int16		FindHotSpot(Point inPoint);	virtual Boolean		PointInHotSpot(Point inPoint, Int16 inHotSpot);	virtual Boolean		TrackHotSpot(Int16 inHotSpot, Point inPoint);	virtual void		HotSpotAction(Int16 inHotSpot, Boolean inCurrInside,										Boolean inPrevInside);	virtual void		HotSpotResult(Int16 inHotSpot);		virtual void		DrawSelf();		virtual void		ShowSelf();	virtual void		HideSelf();		virtual void		EnableSelf();	virtual void		DisableSelf();		void				InitStdControl(Int16 inControlKind,							ResIDT inTextTraitsID, Str255 inTitle,							Int32 inMacRefCon);};class	LDefaultOutline;class	LStdButton : public LStdControl {public:	enum { class_ID = 'pbut' };	static LStdButton*	CreateStdButtonStream(LStream *inStream);					LStdButton();				LStdButton(const LStdButton &inOriginal);				LStdButton(const SPaneInfo &inPaneInfo,					MessageT inValueMessage, ResIDT inTextTraitsID,					Str255 inTitle);				LStdButton(const SPaneInfo &inPaneInfo,					MessageT inValueMessage, ResIDT inTextTraitsID,					ControlHandle inMacControlH);				LStdButton(LStream *inStream);protected:	virtual void	HotSpotResult(Int16 inHotSpot);};class	LDefaultOutline : public LPane {public:				LDefaultOutline(LPane *inHostPane);protected:	virtual void	DrawSelf();};class	LStdCheckBox : public LStdControl {public:	enum { class_ID = 'cbox' };	static LStdCheckBox*	CreateStdCheckBoxStream(LStream *inStream);				LStdCheckBox();				LStdCheckBox(const LStdCheckBox &inOriginal);				LStdCheckBox(const SPaneInfo &inPaneInfo,					MessageT inValueMessage, Int32 inValue,					ResIDT inTextTraitsID, Str255 inTitle);				LStdCheckBox(const SPaneInfo &inPaneInfo,					MessageT inValueMessage, Int32 inValue,					ResIDT inTextTraitsID, ControlHandle inMacControlH);				LStdCheckBox(LStream *inStream);protected:	virtual void	HotSpotResult(Int16 inHotSpot);};class	LStdRadioButton : public LStdControl {public:	enum { class_ID = 'rbut' };	static LStdRadioButton*	CreateStdRadioButtonStream(LStream *inStream);				LStdRadioButton();				LStdRadioButton(const SPaneInfo &inPaneInfo,					MessageT inValueMessage, Int32 inValue,					ResIDT inTextTraitsID, Str255 inTitle);				LStdRadioButton(const SPaneInfo &inPaneInfo,					MessageT inValueMessage, Int32 inValue,					ResIDT inTextTraitsID, ControlHandle inMacControlH);				LStdRadioButton(const LStdRadioButton &inOriginal);				LStdRadioButton(LStream *inStream);protected:	virtual void	HotSpotResult(Int16 inHotSpot);};class	LStdPopupMenu : public LStdControl {public:	enum { class_ID = 'popm' };	static LStdPopupMenu*	CreateStdPopupMenuStream(LStream *inStream);				LStdPopupMenu(const SPaneInfo &inPaneInfo,					MessageT inValueMessage, Int16 inTitleOptions,					ResIDT inMENUid, Int16 inTitleWidth,					Int16 inPopupVariation, ResIDT inTextTraitsID,					Str255 inTitle, OSType inResTypeMENU,					Int16 inInitialMenuItem);				LStdPopupMenu(const SPaneInfo &inPaneInfo,					MessageT inValueMessage, Int32 inMaxValue,					ResIDT inTextTraitsID, ControlHandle inMacControlH);				LStdPopupMenu(LStream *inStream);	virtual		~LStdPopupMenu();	virtual MenuHandle	GetMacMenuH();	private:	void		InitStdPopupMenu(Int16 inInitialMenuItem);};