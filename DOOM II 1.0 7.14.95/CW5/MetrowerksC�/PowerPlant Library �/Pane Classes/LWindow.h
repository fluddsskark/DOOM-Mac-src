// ===========================================================================//	LWindow.h				 		й1993 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include <LView.h>#include <LCommander.h>#include <LModelObject.h>#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endiftypedef struct	SWINDResource {		// Format of a 'WIND' Resource	Rect	bounds;	Int16	procID;	Int16	visible;	Int16	hasGoAway;	Int32	refCon;	Str255	title;					// Not really, but OK as long as we									//   only use this for typecasting									//   WIND resource handles} SWINDResource, *SWINDResourceP, **SWINDResourceH;struct SWindowInfo {	ResIDT			WINDid;	Int16			layer;	Uint32			attributes;	Int16			minimumWidth;	Int16			minimumHeight;	Int16			maximumWidth;	Int16			maximumHeight;	SDimension16	standardSize;	Int32			userCon;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endifenum {	windAttr_Modal			= 0x80000000,	windAttr_Floating		= 0x40000000,	windAttr_Regular		= 0x20000000,	windAttr_CloseBox		= 0x10000000,	windAttr_TitleBar		= 0x08000000,	windAttr_Resizable		= 0x04000000,	windAttr_SizeBox		= 0x02000000,	windAttr_Zoomable		= 0x01000000,	windAttr_ShowNew		= 0x00800000,	windAttr_Enabled		= 0x00400000,	windAttr_Targetable		= 0x00200000,	windAttr_GetSelectClick	= 0x00100000,	windAttr_HideOnSuspend	= 0x00080000,	windAttr_DelaySelect	= 0x00040000,	windAttr_EraseOnUpdate	= 0x00020000};typedef	Uint32	EWindAttr;const Int16		PP_Window_Kind = 20000;const Int16		click_OutsideModal = 42;#define		window_InFront	((WindowPtr) -1)#define		window_InBack	((WindowPtr) 0)enum {	windLayer_Modal,	windLayer_Floating,	windLayer_Regular};class	LWindow : public LView,				  public LCommander,				  public LModelObject {public:	enum { class_ID = 'wind' };					LWindow();					LWindow(const SWindowInfo &inWindowInfo);					LWindow(ResIDT inWINDid, Uint32 inAttributes,								LCommander *inSuperCommander);					LWindow(LStream *inStream);	virtual			~LWindow();		static LWindow*	CreateWindow(ResIDT inWindowID,								LCommander *inSuperCommander);	static LWindow*	CreateWindowStream(LStream *inStream);			static LWindow*	FetchWindowObject(WindowPtr inWindowP);	virtual GrafPtr	GetMacPort() const;		Boolean			HasAttribute(EWindAttr inAttribute) const;	void			SetAttribute(EWindAttr inAttribute);	void			GetMinMaxSize(Rect &outRect) const;	void			SetMinMaxSize(const Rect &inRect);		void			GetStandardSize(SDimension16 &outStdSize);	void			SetStandardSize(SDimension16 inStdSize);		virtual StringPtr	GetDescriptor(Str255 outDescriptor) const;	virtual void		SetDescriptor(ConstStr255Param inDescriptor);		virtual void	HandleClick(const EventRecord &inMacEvent, Int16 inPart);	virtual void	ClickInContent(const EventRecord &inMacEvent);		virtual void	UpdatePort();	virtual void	EstablishPort();		virtual void	InvalPortRect(const Rect *inRect);	virtual void	InvalPortRgn(RgnHandle inRgnH);	virtual void	ValidPortRect(const Rect *inRect);	virtual void	ValidPortRgn(RgnHandle inRgnH);	virtual void	Select();	virtual void	Show();	virtual void	Activate();	virtual void	Deactivate();	virtual void	Enable();		virtual void	Suspend();	virtual void	Resume();		virtual void	GlobalToPortPoint(Point &ioPoint) const;	virtual void	PortToGlobalPoint(Point &ioPoint) const;		virtual void	ExpandSubPane(LPane *inSub, Boolean inExpandHoriz,										Boolean inExpandVert);	virtual Boolean	ObeyCommand(CommandT inCommand, void *ioParam);	virtual void	FindCommandStatus(CommandT inCommand,							Boolean &outEnabled, Boolean &outUsesMark,							Char16 &outMark, Str255 outName);		// ее Performing Actions					// е Changing Position		virtual void	ClickInDrag(const EventRecord &inMacEvent);	virtual void	SendAESetPosition(Point inPosition, Boolean inExecuteAE);	virtual void	DoSetPosition(Point inPosition);				// е Changing Size and/or Position		virtual void	ClickInGrow(const EventRecord &inMacEvent);	virtual void	SendAESetBounds(Rect *inBounds, Boolean inExecuteAE);	virtual void	DoSetBounds(const Rect &inBounds);				// е Zooming	virtual void	ClickInZoom(const EventRecord &inMacEvent,							short inZoomDirection);	virtual Boolean	CalcStandardBounds(Rect &outStdBounds) const;	virtual void	CalcStandardBoundsForScreen(const Rect &inScreenBounds,							Rect &outStdBounds) const;	virtual void	SendAESetZoom();	virtual void	DoSetZoom(Boolean inZoomToStdState);				// е Closing			virtual void	ClickInGoAway(const EventRecord &inMacEvent);	virtual void	AttemptClose();	virtual void	DoClose();			// ее AppleEvent Object Model Support ее		DescType				GetModelKind() const;											  	virtual void			GetAEProperty(DescType inProperty,										  const AEDesc &inRequestedType,										  AEDesc& outPropertyDesc) const;	virtual void			SetAEProperty(DescType inProperty,										  const AEDesc &inValue,										  AEDesc& outAEReply);	void					GetAEWindowAttribute(EWindAttr inAttribute,										  AEDesc& outPropertyDesc) const;	virtual void			HandleAppleEvent(									const AppleEvent	&inAppleEvent,									AppleEvent			&outAEReply,									AEDesc				&outResult,									Int32				inAENumber);protected:	WindowPtr		mMacWindowP;	Rect			mMinMaxSize;	SDimension16	mStandardSize;	Rect			mUserBounds;	Uint32			mAttributes;	Boolean			mMoveOnlyUserZoom;	virtual void	DrawSelf();	virtual void	DrawSizeBox();		virtual void	ShowSelf();	virtual void	HideSelf();		virtual void	ActivateSelf();	virtual void	DeactivateSelf();		virtual void			MakeSelfSpecifier(									AEDesc		&inSuperSpecifier,									AEDesc		&outSelfSpecifier) const;	private:	void			InitWindow(const SWindowInfo &inWindowInfo);	void			MakeMacWindow(short inWINDid);};