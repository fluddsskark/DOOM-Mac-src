// ===========================================================================//	UQuickTime.cp					©1994 Metrowerks Inc. All rights reserved.// ===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UQuickTime.h>#ifndef __GESTALTEQU__#include <GestaltEqu.h>#endif#ifndef __STANDARDFILE__#include <StandardFile.h>#endif// === Static Member Variables ===Boolean	UQuickTime::sQuickTimeIsPresent = false;BooleanUQuickTime::QuickTimeIsPresent(){	return sQuickTimeIsPresent;}voidUQuickTime::Initialize(){	Int32	qtVersion;	sQuickTimeIsPresent = ::Gestalt(gestaltQuickTime, &qtVersion) == noErr;	if (sQuickTimeIsPresent) {		OSErr	err = ::EnterMovies();	}}voidUQuickTime::Finalize(){	if (sQuickTimeIsPresent) {		::ExitMovies();	}}MovieUQuickTime::GetMovieFromFile(){	Movie	theMovie = nil;		SFTypeList			fileTypes;	fileTypes[0] = MovieFileType;	StandardFileReply	reply;	::StandardGetFilePreview(nil, 1, fileTypes, &reply);		if (reply.sfGood) {		OSErr	err;		Int16	movieRefNum;		err = ::OpenMovieFile(&reply.sfFile, &movieRefNum, fsRdPerm);				Int16	actualResID = DoTheRightThing;		Boolean	wasChanged;		err = ::NewMovieFromFile(&theMovie, movieRefNum, &actualResID,									nil, newMovieActive, &wasChanged);											err = ::CloseMovieFile(movieRefNum);	}		return theMovie;}voidUQuickTime::SaveFlattenedMovie(	Movie	inMovie){}LMovieController::LMovieController(){	mMovie = nil;	mMovieController = nil;}LMovieController::LMovieController(	const SPaneInfo	&inPaneInfo,	Movie			inMovie)		: LPane(inPaneInfo){	mMovie = inMovie;	Rect	movieBounds;	::GetMovieBox(inMovie, &movieBounds);	::OffsetRect(&movieBounds, -movieBounds.left, -movieBounds.top);	::SetMovieBox(inMovie, &movieBounds);		::SetMovieGWorld(inMovie, (CGrafPtr) GetMacPort(), nil);		Rect	frame;	CalcLocalFrameRect(frame);	mMovieController = ::NewMovieController(inMovie, &frame, mcTopLeftMovie);		::MCGetControllerBoundsRect(mMovieController, &frame);		StartRepeating();}LMovieController::~LMovieController(){	::DisposeMovieController(mMovieController);}voidLMovieController::DrawSelf(){	::MCDraw(mMovieController, GetMacPort());}voidLMovieController::SpendTime(	const EventRecord	&inMacEvent){	FocusDraw();	// GHD 8/11/94	::MCIsPlayerEvent(mMovieController, &inMacEvent);}