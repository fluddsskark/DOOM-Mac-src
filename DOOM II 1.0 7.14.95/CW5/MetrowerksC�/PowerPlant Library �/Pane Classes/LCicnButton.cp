// ===========================================================================//	LCicnButton.cp					©1994 Metrowerks Inc. All rights reserved.// ===========================================================================////	A button that draws itself using 'cicn' resources.////	GetCIcon Strategy://		Calling GetCIcon creates a new CIconHandle initialized from data//		in a 'cicn' resource. We call GetCIcon the first time we need to//		draw a 'cicn' and store the CIconHandle for later use. By not//		calling GetCIcon in a Constructor, we save the overhead of creating//		a CIconHandle if the 'cicn' is not drawn (which could be fairly//		common for the "pushed" 'cicn' where the user may never click//		a particular button).#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LCicnButton.h>#include <LStream.h>#include <UDrawingState.h>// ---------------------------------------------------------------------------//		¥ CreateCicnButtonStream// ---------------------------------------------------------------------------//	Create a new CicnButton object from the data in a StreamLCicnButton*LCicnButton::CreateCicnButtonStream(	LStream	*inStream){	return (new LCicnButton(inStream));}// ---------------------------------------------------------------------------//		¥ LCicnButton// ---------------------------------------------------------------------------//	Default ConstructorLCicnButton::LCicnButton(){	mNormalID = resID_Undefined;	mPushedID = resID_Undefined;	mNormalCicnH = nil;	mPushedCicnH = nil;}// ---------------------------------------------------------------------------//		¥ LCicnButton(const LCicnButton&)// ---------------------------------------------------------------------------//	Copy ConstructorLCicnButton::LCicnButton(	const LCicnButton	&inOriginal)		: LControl(inOriginal){	mNormalID = inOriginal.mNormalID;	mPushedID = inOriginal.mPushedID;	mNormalCicnH = nil;	mPushedCicnH = nil;}// ---------------------------------------------------------------------------//		¥ LCicnButton// ---------------------------------------------------------------------------//	Construct from input parametersLCicnButton::LCicnButton(	const SPaneInfo	&inPaneInfo,	MessageT		inClickedMessage,	ResIDT			inNormalID,	ResIDT			inPushedID)		: LControl(inPaneInfo, inClickedMessage, 0, 0, 1){	mNormalID = inNormalID;	mPushedID = inPushedID;	mNormalCicnH = nil;	mPushedCicnH = nil;}// ---------------------------------------------------------------------------//		¥ LCicnButton(LStream*)// ---------------------------------------------------------------------------//	Construct a new CicnButton from the data in a Stream////	Stream data must be://		ResIDT		Resource ID for normal graphic//		ResIDT		Resource ID for pushed graphicLCicnButton::LCicnButton(	LStream	*inStream)		: LControl(inStream){	inStream->ReadData(&mNormalID, sizeof(ResIDT));	inStream->ReadData(&mPushedID, sizeof(ResIDT));	mNormalCicnH = nil;	mPushedCicnH = nil;}// ---------------------------------------------------------------------------//		¥ ~LCicnButton// ---------------------------------------------------------------------------//	DestructorLCicnButton::~LCicnButton(){	if (mNormalCicnH != nil) {		DisposeCIcon(mNormalCicnH);	}		if (mPushedCicnH != nil) {		DisposeCIcon(mPushedCicnH);	}}// ---------------------------------------------------------------------------//		¥ SetCicns// ---------------------------------------------------------------------------//	Specify new ID's for the normal and pushed 'cicn' resourcesvoidLCicnButton::SetCicns(	ResIDT	inNormalID,	ResIDT	inPushedID){	mNormalID = inNormalID;			// Store new ID's	mPushedID = inPushedID;			// For both normal and pushed, dispose of existing CIconHandles		if (mNormalCicnH != nil) {		DisposeCIcon(mNormalCicnH);	}	mNormalCicnH = nil;		if (mPushedCicnH != nil) {		DisposeCIcon(mPushedCicnH);	}	mPushedCicnH = nil;}// ---------------------------------------------------------------------------//		¥ DrawSelf// ---------------------------------------------------------------------------//	Draw the CicnButtonvoidLCicnButton::DrawSelf(){	Rect	frame;	CalcLocalFrameRect(frame);	StColorPenState::Normalize();		if (mNormalCicnH == nil) {		// Load 'cicn' if necessary		mNormalCicnH = ::GetCIcon(mNormalID);	}		if (mNormalCicnH != nil) {		::PlotCIcon(&frame, mNormalCicnH);	}}// ---------------------------------------------------------------------------//		¥ HotSpotAction// ---------------------------------------------------------------------------//	Take action during mouse down tracking////	CicnButtons toggle between two graphics, depending on whether the mouse is//	inside or outside the CicnButton.voidLCicnButton::HotSpotAction(	short		inHotSpot,	Boolean		inCurrInside,	Boolean		inPrevInside){									// Draw if cursor moved from IN to OUT									//   or from OUT to IN	if (inCurrInside != inPrevInside) {			Rect	frame;		CalcLocalFrameRect(frame);		StColorPenState::Normalize();											// Pick which graphic to draw		CIconHandle	theCicnH = mNormalCicnH;		if (inCurrInside) {			theCicnH = mPushedCicnH;		}				if (theCicnH == nil) {		// Load 'cicn' if necessary			if (inCurrInside) {				theCicnH = mPushedCicnH = ::GetCIcon(mPushedID);			} else {				theCicnH = mNormalCicnH = ::GetCIcon(mNormalID);			}		}				if (theCicnH != nil) {			::PlotCIcon(&frame, theCicnH);		}	}}voidLCicnButton::HotSpotResult(	short	inHotSpot){									// Undo CicnButton hilighting	HotSpotAction(inHotSpot, false, true);	BroadcastValueMessage();		// Although value doesn't change,									//   send message to inform Listeners									//   that CicnButton was clicked}