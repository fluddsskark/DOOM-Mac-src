// ===========================================================================//	LDialogBox.cp				 	©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	A DialogBox is a Window that has an optional Default and/or Cancel//	Button. Return and Enter are keyboard equivalents for the Default//	Button, which has a DefaultOutline drawn around it. Escape and//	Command-Period are keyboard equivalents for the Cancel Button.////	The DialogBox is a Listener to these buttons, which must derived from//	LControl. However, the DialogBox does not attach any special meaning//	to the buttons. The user must give meaning to these buttons by assigning//	them an appropriate message (the one broadcasted when they are clicked).////	A DialogBox handles negative message numbers by relaying them to its//	SuperCommander as commands to ObeyCommand(). This allows any//	Commander to create a DialogBox and then to receive as commands//	the messages sent by the DialogBox's Broadcasters (which are usually//	Controls such as buttons).#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LDialogBox.h>#include <LStdControl.h>#include <LStream.h>#include <LAction.h>#include <UReanimator.h>#include <UKeyFilters.h>#include <PP_KeyCodes.h>#include <PP_Messages.h>// ---------------------------------------------------------------------------//		¥ CreateDialogBoxStream [static]// ---------------------------------------------------------------------------//	Return a new DialogBox object initialized using data from a StreamLDialogBox*LDialogBox::CreateDialogBoxStream(	LStream	*inStream){	return (new LDialogBox(inStream));}// ---------------------------------------------------------------------------//		¥ LDialogBox// ---------------------------------------------------------------------------//	Default ConstructorLDialogBox::LDialogBox(){	mDefaultButtonID = PaneIDT_Undefined;	mCancelButtonID = PaneIDT_Undefined;	mDefaultOutline = nil;	mLastAction = nil;}// ---------------------------------------------------------------------------//		¥ LDialogBox(SWindowInfo&)// ---------------------------------------------------------------------------//	Construct DialogBox from the data in a structLDialogBox::LDialogBox(	SWindowInfo	&inWindowInfo)		: LWindow(inWindowInfo){	mDefaultButtonID = PaneIDT_Undefined;	mCancelButtonID = PaneIDT_Undefined;	mDefaultOutline = nil;	mLastAction = nil;}// ---------------------------------------------------------------------------//		¥ LDialogBox(ResIDT, Uint32, LCommander*)// ---------------------------------------------------------------------------//	Construct a DialogBox from a WIND Resource with the specified attributes//	and SuperCommander////	Side Effect: Created window becomes the current portLDialogBox::LDialogBox(	ResIDT		inWINDid,	Uint32		inAttributes,	LCommander	*inSuper)		: LWindow(inWINDid, inAttributes, inSuper){	mDefaultButtonID = PaneIDT_Undefined;	mCancelButtonID = PaneIDT_Undefined;	mDefaultOutline = nil;	mLastAction = nil;}// ---------------------------------------------------------------------------//		¥ LDialogBox(LStream*)// ---------------------------------------------------------------------------//	Construct a DialogBox from the data in a StreamLDialogBox::LDialogBox(	LStream	*inStream)		: LWindow(inStream){	inStream->ReadData(&mDefaultButtonID, sizeof(PaneIDT));	inStream->ReadData(&mCancelButtonID, sizeof(PaneIDT));	mDefaultOutline = nil;	mLastAction = nil;}// ---------------------------------------------------------------------------//		¥ ~LDialogBox// ---------------------------------------------------------------------------//	DestructorLDialogBox::~LDialogBox(){	delete mLastAction;}// ---------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------//	Finish creation by linking DialogBox as a Listener to its Default//	and Cancel Buttons.voidLDialogBox::FinishCreateSelf(){	LControl	*theControl;		// Link DialogBox as a Listener to the									//   Default and Cancel Buttons		if (mDefaultButtonID > 0) {		theControl = (LControl*) FindPaneByID(mDefaultButtonID);		if (theControl != nil) {			theControl->AddListener(this);			mDefaultOutline = new LDefaultOutline(theControl);		}	}		if (mCancelButtonID > 0) {		theControl = (LControl*) FindPaneByID(mCancelButtonID);		if (theControl != nil) {			theControl->AddListener(this);		}	}}// ---------------------------------------------------------------------------//		¥ HandleKeyPress// ---------------------------------------------------------------------------//	DialogBox handles keyboard equivalents for hitting the Default and//	Cancel Buttons.////		Default Button: Enter, Return//		Cancel Button:  Escape, Command-PeriodBooleanLDialogBox::HandleKeyPress(	const EventRecord	&inKeyEvent){	Boolean		keyHandled = true;	LControl	*keyButton = nil;		switch (inKeyEvent.message & charCodeMask) {			case char_Enter:		case char_Return:			keyButton = (LControl*) FindPaneByID(mDefaultButtonID);			break;					case char_Escape:			if ((inKeyEvent.message & keyCodeMask) == vkey_Escape) {				keyButton =  (LControl*) FindPaneByID(mCancelButtonID);			}			break;					case char_Period:			if (inKeyEvent.modifiers & cmdKey) {				keyButton =  (LControl*) FindPaneByID(mCancelButtonID);			}			break;					default:			if (UKeyFilters::IsCmdPeriod(inKeyEvent)) {				keyButton =  (LControl*) FindPaneByID(mCancelButtonID);			} else {				keyHandled = LWindow::HandleKeyPress(inKeyEvent);			}			break;	}				if (keyButton != nil) {		keyButton->SimulateHotSpotClick(inButton);	}		return keyHandled;}// ---------------------------------------------------------------------------//		¥ ListenToMessage// ---------------------------------------------------------------------------//	Respond to messages from Broadcasters////	DialogBox responds to the cmd_Close message by deleting itself.////	Also, negative message numbers are relayed to the SuperCommander//	of the DialogBox as commands to ObeyCommand(). This allows any//	Commander to create a DialogBox and then to receive as commands//	the messages sent by Broadcasters (which are usually Controls//	such as buttons) to the DialogBox.voidLDialogBox::ListenToMessage(	MessageT	inMessage,	void		*ioParam){	if (inMessage == cmd_Close) {		DoClose();		} else if (inMessage < 0) {									// Relay message to supercommander		if (GetSuperCommander() != nil) {			SDialogResponse	theResponse;			theResponse.dialogBox = this;			theResponse.messageParam = ioParam;			GetSuperCommander()->ProcessCommand(inMessage, &theResponse);		}	}}// ---------------------------------------------------------------------------//		¥ SetDefaultButton// ---------------------------------------------------------------------------//	Specify the PaneID of the default button of a DialogBox. The default//	button must be derived from LControl.////	The default button has a default outline around it and certain//	keyboard equivalents (Return and Enter) simulate a click inside itvoidLDialogBox::SetDefaultButton(	PaneIDT	inButtonID){	mDefaultButtonID = inButtonID;		if (mDefaultOutline != nil) {	// Remove former default outline		mDefaultOutline->Refresh();		delete mDefaultOutline;		mDefaultOutline = nil;	}		LControl	*theButton = (LControl*) FindPaneByID(inButtonID);	if (theButton != nil) {		theButton->AddListener(this);									// Create new default outline		mDefaultOutline = new LDefaultOutline(theButton);		mDefaultOutline->Refresh();	}}// ---------------------------------------------------------------------------//		¥ SetCancelButton// ---------------------------------------------------------------------------//	Specify the PaneID of the cancel button of a DialogBox. The cancel//	button must be derived from LControl.////	Certain keyboard equivalents (Escape and Command-Period) simulate//	a click inside the cancel buttonvoidLDialogBox::SetCancelButton(	PaneIDT	inButtonID){	mCancelButtonID = inButtonID;		LControl	*theButton = (LControl*) FindPaneByID(inButtonID);	if (theButton != nil) {		theButton->AddListener(this);	}}BooleanLDialogBox::ObeyCommand(	CommandT	inCommand,	void		*ioParam){	Boolean		cmdHandled = true;		switch (inCommand) {				case msg_ActionDone:			delete mLastAction;			mLastAction = (LAction*) ioParam;			break;					case cmd_Undo:			mLastAction->Undo();			break;					default:			cmdHandled = LWindow::ObeyCommand(inCommand, ioParam);			break;	}			return cmdHandled;}// ---------------------------------------------------------------------------//		¥ FindCommandStatus// ---------------------------------------------------------------------------//	Return the status of a CommandvoidLDialogBox::FindCommandStatus(	CommandT	inCommand,	Boolean		&outEnabled,	Boolean		&outUsesMark,	Char16		&outMark,	Str255		outName){	outUsesMark = false;	switch (inCommand) {			case cmd_Undo:			outEnabled = (mLastAction != nil);			if (outEnabled) {				mLastAction->GetDescriptor(outName);			}			break;					default:			LWindow::FindCommandStatus(inCommand, outEnabled,									outUsesMark, outMark, outName);			break;	}}