// ===========================================================================//	LPicture.cp						©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Displays a 'PICT' resource#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LPicture.h>#include <LStream.h>#include <UDrawingState.h>#ifndef __TOOLUTILS__#include <ToolUtils.h>#endif// ---------------------------------------------------------------------------//		¥ CreatePictureStream [static]// ---------------------------------------------------------------------------//	Return a new Picture object initialized using data from a StreamLPicture*LPicture::CreatePictureStream(	LStream	*inStream){	return (new LPicture(inStream));}// ---------------------------------------------------------------------------//		¥ LPicture// ---------------------------------------------------------------------------//	Default ConstructorLPicture::LPicture(){	mPICTid = resID_Undefined;}// ---------------------------------------------------------------------------//		¥ LPicture(const LPicture&)// ---------------------------------------------------------------------------//	Copy ConstructorLPicture::LPicture(	const LPicture	&inOriginal){	mPICTid = inOriginal.mPICTid;	InitPicture();}// ---------------------------------------------------------------------------//		¥ LPicture(SPaneInfo&, SViewInfo&, ResIDT)// ---------------------------------------------------------------------------//	Construct Picture from input parametersLPicture::LPicture(	const SPaneInfo	&inPaneInfo,	const SViewInfo	&inViewInfo,	ResIDT			inPICTid)		: LView(inPaneInfo, inViewInfo){	mPICTid = inPICTid;	InitPicture();}// ---------------------------------------------------------------------------//		¥ LPicture(LStream*)// ---------------------------------------------------------------------------//	Construct Picture from the data in a StreamLPicture::LPicture(	LStream	*inStream)		: LView(inStream){	inStream->ReadData(&mPICTid, sizeof(ResIDT));	InitPicture();}// ---------------------------------------------------------------------------//		¥ LPicture(ResIDT)// ---------------------------------------------------------------------------//	Construct a Picture from a PICT Resource IDLPicture::LPicture(	ResIDT	inPictureID){	mPICTid = inPictureID;	InitPicture();}// ---------------------------------------------------------------------------//		¥ InitPicture// ---------------------------------------------------------------------------//	Private Initializer. Assumes mPICTid is set.voidLPicture::InitPicture(){		// If the PICT Resource exists (can be loaded), set the Image		// size to the size of the picture.			PicHandle	macPictureH = GetPicture(mPICTid);	if (macPictureH != nil) {		Rect	picFrame = (**macPictureH).picFrame;		ResizeImageTo(picFrame.right - picFrame.left,					  picFrame.bottom - picFrame.top, false);	}}// ---------------------------------------------------------------------------//		¥ GetPictureID// ---------------------------------------------------------------------------//	Return the PICT Resource ID associated with a PictureResIDTLPicture::GetPictureID(){	return mPICTid;}// ---------------------------------------------------------------------------//		¥ SetPictureID// ---------------------------------------------------------------------------//	Set the PICT Resource ID associated with a Picture////	This changes size of the Image to match the bounds of the PICT.voidLPicture::SetPictureID(	ResIDT	inPictureID){	mPICTid = inPictureID;	InitPicture();}// ---------------------------------------------------------------------------//		¥ DrawSelf// ---------------------------------------------------------------------------//	Draw a PicturevoidLPicture::DrawSelf(){		// If Picture resource exists, draw it. Otherwise, fill the		// Frame with a light gray pattern and a one-pixel border.			PicHandle	macPictureH = GetPicture(mPICTid);	if (macPictureH != nil) {		SDimension32	imageSize;		GetImageSize(imageSize);				Rect	pictureBounds;		pictureBounds.left   = 0;		pictureBounds.top    = 0;		pictureBounds.right  = imageSize.width;		pictureBounds.bottom = imageSize.height;				::DrawPicture(macPictureH, &pictureBounds);			} else {		Rect	frame;		CalcLocalFrameRect(frame);		::PenNormal();		::FillRect(&frame, &UQDGlobals::GetQDGlobals()->ltGray);		::FrameRect(&frame);	}}	