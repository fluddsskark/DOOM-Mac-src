// ===========================================================================//	LTable.h					   © 1993 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include <LView.h>class	LDynamicArray;typedef	Int32	TableIndexT;typedef struct	TableCellT {	TableIndexT	row;	TableIndexT	col;} TableCellT, *TableCellP, **TableCellH;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endiftypedef struct	STableInfo {	Int32		numberOfRows;	Int32		numberOfCols;	Int32		rowHeight;	Int32		colWidth;	Int32		cellDataSize;} STableInfo;#if defined(powerc) || defined(__powerc)#pragma options align=reset#endifclass	LTable : public LView {public:	enum { class_ID = 'tabl' };	static LTable*	CreateTableStream(LStream *inStream);					LTable();					LTable(const SPaneInfo &inPaneInfo,							const SViewInfo &inViewInfo,							Int32 inNumberOfRows, Int32 inNumberOfCols,							Int32 inRowHeight, Int32 inColWidth,							Int32 inCellDataSize);					LTable(LStream *inStream);	virtual			~LTable();			void			GetTableSize(TableIndexT &outRows, TableIndexT &outCols);	Boolean			IsValidCell(const TableCellT &inCell);	Boolean			EqualCell(const TableCellT &inCellA,								const TableCellT &inCellB);		virtual void	InsertRows(Int32 inHowMany, TableIndexT inAfterRow,								void *inCellData);	virtual void	InsertCols(Int32 inHowMany, TableIndexT inAfterCol,								void *inCellData);	virtual void	RemoveRows(Int32 inHowMany, TableIndexT inFromRow);	virtual void	RemoveCols(Int32 inHowMany, TableIndexT inFromCol);		virtual void	SetRowHeight(Int16 inHeight, TableIndexT inFrom,									TableIndexT inTo);	virtual void	SetColWidth(Int16 inWidth, TableIndexT inFrom,									TableIndexT inTo);		void			SetCellDataSize(Int32 inCellDataSize);									virtual void	SetCellData(const TableCellT &inCell, void *inData);	virtual void	GetCellData(const TableCellT &inCell, void *outData);		virtual void	SelectCell(const TableCellT &inCell);	void			GetSelectedCell(TableCellT &outCell);protected:	TableIndexT		mRows;	TableIndexT		mCols;	Int32			mRowHeight;	Int32			mColWidth;	LDynamicArray	*mCellData;	TableCellT		mSelectedCell;	virtual void	ClickSelf(const SMouseDownEvent &inMouseDown);	virtual void	DrawSelf();		virtual void	HiliteCell(const TableCellT &inCell);	virtual void	UnhiliteCell(const TableCellT &inCell);		virtual void	ClickCell(const TableCellT &inCell,									const SMouseDownEvent &inMouseDown);	virtual void	DrawCell(const TableCellT &inCell);		virtual void	ActivateSelf();	virtual void	DeactivateSelf();		virtual Boolean	FetchLocalCellFrame(const TableCellT &inCell,									Rect &outCellFrame);	virtual void	FetchCellHitBy(const SPoint32 &inImagePt,									TableCellT &outCell);										Int32			FetchCellDataIndex(const TableCellT &inCell);	private:	void			InitTable(Int32 inNumberOfRows, Int32 inNumberOfCols,							Int32 inRowHeight, Int32 inColWidth,							Int32 inCellDataSize);};	