// ===========================================================================//	LCaption.cp						©1993 Metrowerks Inc. All rights reserved.// ===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LCaption.h>#include <LStream.h>#include <UTextTraits.h>#include <String_Utils.h>#ifndef __TEXTUTILS__#include <TextUtils.h>#endif// ---------------------------------------------------------------------------//		¥ CreateCaptionStream// ---------------------------------------------------------------------------//	Create a new Caption object from the data in a StreamLCaption*LCaption::CreateCaptionStream(	LStream	*inStream){	return (new LCaption(inStream));}// ---------------------------------------------------------------------------//		¥ LCaption// ---------------------------------------------------------------------------//	Default ConstructorLCaption::LCaption(){	mText[0] = 0;	mTxtrID = 0;}// ---------------------------------------------------------------------------//		¥ LCaption(const LCaption&)// ---------------------------------------------------------------------------//	Copy ConstructorLCaption::LCaption(	const LCaption	&inOriginal)		: LPane(inOriginal){	Str255	theText;				// Copy Caption text	SetDescriptor(inOriginal.GetDescriptor(theText));									// Copy TextTraits ID	SetTextTraitsID(inOriginal.GetTextTraitsID());}// ---------------------------------------------------------------------------//		¥ LCaption(SPaneInfo&, Str255, ResIDT)// ---------------------------------------------------------------------------//	Construct from parameters. Use this constructor to create a Caption//	from runtime data.LCaption::LCaption(	const SPaneInfo	&inPaneInfo,	Str255			inString,	ResIDT			inTextTraitsID)		: LPane(inPaneInfo){	CopyPStr(inString, mText);	mTxtrID = inTextTraitsID;}	// ---------------------------------------------------------------------------//		¥ LCaption(LStream*)// ---------------------------------------------------------------------------//	Construct from data in a StreamLCaption::LCaption(	LStream	*inStream)		: LPane(inStream){	inStream->ReadPString(mText);	inStream->ReadData(&mTxtrID, sizeof(ResIDT));}// ---------------------------------------------------------------------------//		¥ ~LCaption// ---------------------------------------------------------------------------//	DestructorLCaption::~LCaption(){}// ---------------------------------------------------------------------------//		¥ GetDescriptor// ---------------------------------------------------------------------------//	Return contents of a Caption as a stringStringPtrLCaption::GetDescriptor(	Str255	outDescriptor) const{	return CopyPStr(mText, outDescriptor);}// ---------------------------------------------------------------------------//		¥ SetDescriptor// ---------------------------------------------------------------------------//	Set contents of a Caption from a stringvoidLCaption::SetDescriptor(	ConstStr255Param	inDescriptor){	CopyPStr(inDescriptor, mText);}// ---------------------------------------------------------------------------//		¥ GetValue// ---------------------------------------------------------------------------//	Return the integer value represented by the text of CaptionInt32LCaption::GetValue() const{	Int32	theNumber = 0;	Str255	str;		GetDescriptor(str);	if (str[0] > 0) {		::StringToNum(str, &theNumber);	}	return theNumber;}// ---------------------------------------------------------------------------//		¥ SetValue// ---------------------------------------------------------------------------//	Set a Caption to the text representation of an integer valuevoidLCaption::SetValue(	Int32	inValue){	Str255	numberAsString;	::NumToString(inValue, numberAsString);	SetDescriptor(numberAsString);}ResIDTLCaption::GetTextTraitsID() const{	return mTxtrID;}voidLCaption::SetTextTraitsID(	ResIDT	inTxtrID){	mTxtrID = inTxtrID;}// ---------------------------------------------------------------------------//		¥ DrawSelf// ---------------------------------------------------------------------------//	Draw the CaptionvoidLCaption::DrawSelf(){	Rect	frame;	CalcLocalFrameRect(frame);		::TETextBox((Ptr)mText+1, mText[0], &frame,				UTextTraits::SetPortTextTraits(mTxtrID));}