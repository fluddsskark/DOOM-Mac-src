// ===========================================================================//	LQueue.h						©1994 Metrowerks Inc. All rights reserved.////									Author:  Paul Lalonde// ===========================================================================#ifndef _H_LQueue#define _H_LQueue#ifdef __MWERKS__#	pragma once#endif// system headers#include <Types.h>// PowerPlant headers#include <PP_Types.h>// ===========================================================================// ¥ Forward declarations// ===========================================================================// forward class declarationsclass	LLink;// ===========================================================================// ¥ Data structures// ===========================================================================// iterator functiontypedef void	(*LQueueIterator)(LLink& aLink, void *arg);// ===========================================================================// ¥ class LQueue// ===========================================================================class LQueue{//	I N T E R F A C E ============================================public:		// INSTANCE METHODS -----------------		// constructors / destructors					LQueue();	virtual			~LQueue();		// queue manipulation	virtual void	NextPut(LLink *aLink);	virtual LLink	*NextGet(void);	virtual Boolean	Remove(LLink *aLink);		// inquiries	virtual Uint32	GetSize(void) const;	virtual Boolean	IsEmpty(void) const;		// iterators	virtual void	DoForEach(LQueueIterator proc, void *arg);		//	I M P L E M E N T A T I O N ==================================	protected:		// INSTANCE METHODS -----------------		// constructors & destructors					LQueue(const LQueue&);		// INSTANCE VARIABLES ---------------		LLink			*mFirst;		// first element in queue	LLink			*mLast;			// last element in queue	Uint32			mSize;			// number of elements in queue		private:		// INSTANCE METHODS -----------------		// assignment	LQueue&			operator = (const LQueue&);};#endif // _H_LQueue