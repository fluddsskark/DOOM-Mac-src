// ===========================================================================//	LThreadInline.h					©1994 Metrowerks Inc. All rights reserved.////									Author:  Paul Lalonde// ===========================================================================#if THREAD_INLINES#	define	THREAD_INLINE_PROC	inline#else#	define	THREAD_INLINE_PROC#endif// ===========================================================================//	¥ Inline static member functions// ===========================================================================// ---------------------------------------------------------------------------//		¥ GetCurrentThread	[static]// ---------------------------------------------------------------------------//	Returns the current thread object.THREAD_INLINE_PROC LThread	*LThread::GetCurrentThread(void){	return (sThread);}// ---------------------------------------------------------------------------//		¥ GetMainThread	[static]// ---------------------------------------------------------------------------//	Returns the main thread object.THREAD_INLINE_PROC LThread	*LThread::GetMainThread(void){	return (sMainThread);}// ---------------------------------------------------------------------------//		¥ CountReadyThreads	[static]// ---------------------------------------------------------------------------//	Returns the number of ready threads (i.e., the number of threads eligible //	for CPU time).  This number does not include the current thread.THREAD_INLINE_PROC Int16	LThread::CountReadyThreads(void){	return (sReadyThreadCount);}// ---------------------------------------------------------------------------//		¥ InMainThread	[static]// ---------------------------------------------------------------------------//	Returns whether or not the current thread is also the main thread.THREAD_INLINE_PROC Boolean	LThread::InMainThread(void){	return (GetCurrentThread() == GetMainThread());}// ---------------------------------------------------------------------------//		¥ InsertTimeTask	[static]// ---------------------------------------------------------------------------//	Insert the given task from the Time Manager's queue.THREAD_INLINE_PROC void	LThread::InsertTimeTask(SThreadTMTask& task){	// add element to timer queue	InsTime((QElemPtr) &task.ioTask);}// ---------------------------------------------------------------------------//		¥ PrimeTimeTask	[static]// ---------------------------------------------------------------------------//	Activate the given task in the Time Manager's queue.THREAD_INLINE_PROC void	LThread::PrimeTimeTask(SThreadTMTask& task, long interval){	PrimeTime((QElemPtr) &task.ioTask, interval);}// ---------------------------------------------------------------------------//		¥ RemoveTimeTask	[static]// ---------------------------------------------------------------------------//	Remove the given task from the Time Manager's queue.THREAD_INLINE_PROC void	LThread::RemoveTimeTask(SThreadTMTask& task){	RmvTime((QElemPtr) &task.ioTask);}// ===========================================================================//	¥ Inline non-static member functions// ===========================================================================// ---------------------------------------------------------------------------//		¥ IsCurrent// ---------------------------------------------------------------------------//	Is the thread the current thread ?THREAD_INLINE_PROC Boolean	LThread::IsCurrent(void) const{	return (this == sThread);}// ---------------------------------------------------------------------------//		¥ MakeReady// ---------------------------------------------------------------------------//	Put a thread into the ready state.THREAD_INLINE_PROC void	LThread::MakeReady(void){	mState = threadState_Ready;	++sReadyThreadCount;}// ---------------------------------------------------------------------------//		¥ MakeUnready// ---------------------------------------------------------------------------//	Remove a thread from the ready state.THREAD_INLINE_PROC void	LThread::MakeUnready(void){	--sReadyThreadCount;}