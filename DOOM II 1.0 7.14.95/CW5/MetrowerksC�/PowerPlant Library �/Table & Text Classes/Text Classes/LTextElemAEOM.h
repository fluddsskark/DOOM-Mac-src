//	===========================================================================//	LTextElemAEOM.h					©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma once#include	<LSelectableItem.h>//	Range type#include	<LTextEngine.h>class	LNTextEdit;class	LTextSelection;//	===========================================================================class	LTextElemAEOM			:	public LSelectableItem{	friend class LNTextEdit;	friend class LTextSelection;public:				//	Maintenance						LTextElemAEOM(								LModelObject		*inSuperModel,								DescType			inKind,								LNTextEdit			*inFlow,								const TextRangeT	&inRange);	virtual				~LTextElemAEOM();	virtual	void		GetSuperRange(TextRangeT *outRange) const;//	virtual void		FixLink(void);	virtual	void		GetRange(TextRangeT *outRange) const;	virtual	void		SetRange(const TextRangeT &inRange);private:	virtual void		AdjustRange(Int32 inStart, Int32 inDelta, Boolean inInclusive);	virtual void		AdjustRangesRecurse(Int32 inStart, Int32 inDelta, Boolean inInclusive);public:	virtual void		AdjustRanges(Int32 inStart, Int32 inDelta, Boolean inInclusive = false);				//	LSelectableItem implementation	virtual Boolean		EquivalentTo(const LSelectableItem *inItem);	virtual	Boolean		IndependentFrom(const LSelectableItem *inItem);	virtual Boolean		PointInRepresentation(Point inWhere);	virtual void		DrawSelfSelected(void);	virtual void		DrawSelfLatent(void);	virtual void		DrawSelfReceiver(void);	virtual void		UnDrawSelfSelected(void);	virtual void		UnDrawSelfLatent(void);	virtual void		AddFlavorTypesTo(LDataTube *inTube);	virtual Boolean		SendFlavorTo(FlavorType inFlavor, LDataTube *inTube);	virtual FlavorType	PickFlavorFrom(const LDataTube *inTube);	virtual void		ReceiveDataFrom(LDataTube *inTube);public:				//	AEOM support	virtual Int32		CountSubModels(DescType inModelID) const;	virtual LCoreAEOM *	GetSubModelForInsertion(									DescType		inInsertPosition,									LModelObject	*inTargetObject) const;	virtual void		GetSubModelByPosition(									DescType		inModelID,									Int32			inPosition,									AEDesc			&outToken) const;	virtual void		GetModelByRelativePosition(									DescType		inModelID,									OSType			inRelativePosition,									AEDesc			&outToken) const;	virtual void		GetSubModelByComplexKey(									DescType		inModelID,									DescType		inKeyForm,									const AEDesc	&inKeyData,									AEDesc			&outToken) const;	virtual Int32		GetPositionOfSubModel(									DescType		inModelID,									const LModelObject	*inSubModel) const;	virtual void		GetAEProperty(DescType		inProperty,									const AEDesc	&inRequestedType,									AEDesc			&outPropertyDesc) const;	virtual void		SetAEProperty(DescType		inProperty,									const AEDesc	&inValue,									AEDesc&			outAEReply);	virtual void		MakeSelfSpecifier(									AEDesc			&inSuperSpecifier,									AEDesc			&outSelfSpecifier) const;	virtual	void		MakeSpecifier(AEDesc &outSpecifier) const;				//	AEOM implementation helpprotected:	virtual void		FindInsertionRange(									DescType		inInsertPosition,									LTextElemAEOM	*inTargetObject,									TextRangeT		*outRange,									Boolean			*outInclusive) const;/*	virtual void		PutRangeInDesc(								const TextRangeT	&inRange,								const Int32			inDescPosition,								AEDesc				*outDesc) const;	virtual LTextElemAEOM*						NewModelForNParts(								DescType			inPartType,								const TextRangeT	&inRange,								Int32				inStartPart,								Int32				inPartCount,								const LModelObject	*inSuperModel) const;*/	virtual void		GetRangeAEProperty(								const TextRangeT	&inRange,								DescType			inProperty,								const AEDesc		&inRequestedType,								AEDesc				&outPropertyDesc) const;	virtual void		SetRangeAEProperty(								const TextRangeT	&inRange,								DescType			inProperty,								const AEDesc		&inValue,								AEDesc&				outAEReply) const;public:				//	AEOM verbs...	virtual void		HandleDelete(								AppleEvent			&outAEReply,								AEDesc				&outResult);	virtual LModelObject*	HandleCreateElementEvent(								DescType			inElemClass,								DescType			inInsertPosition,								LModelObject*		inTargetObject,								const AppleEvent	&inAppleEvent,								AppleEvent			&outAEReply);													//	Data membersprotected:	TextRangeT				mRange;	LTextEngine				*mText;	LNTextEdit				*mTextFlow;	RgnHandle				mDragRgn;};