#pragma	once//	===========================================================================//	LTextSelection.h				©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#include	<LSelection.h>#include	<LListener.h>class	LSelectableItem;class	LTextEngine;class	LTextElemAEOM;class	LNTextEdit;class	LTextSelection			:	public	LSelection			,	public	LListener{private:						LTextSelection();	//	Parameters requiredpublic:						LTextSelection(							LModelObject	*inSuperModel,							LNTextEdit		*inFlow,							LTextEngine		*inText,							LTextElemAEOM	*inLink);	virtual				~LTextSelection(void);	virtual void		FixSelection(void);	virtual RgnHandle	FindDragOutline(Point inOrigin);	virtual Boolean		PointInRepresentation(Point inWhere);	virtual	Boolean		IsSubstantive(void);	virtual void		ListenToMessage(MessageT inMessage, void *ioParam);		virtual	void		Activate(void);	virtual void		Deactivate(void);	virtual	void		Idle(void);/*	virtual Boolean		PointInRepresentation(Point inWhere);	virtual LSelectableItem *	ListEquivalentItem(const LSelectableItem *inItem);	virtual LSelectableItem *	ListDependentItem(const LSelectableItem *inItem);	virtual void		GetAEProperty(									const AEDesc	&inRequestedType,									AEDesc			&outPropertyDesc) const;*///	WARNING!	All of the following will become hidden or entirely go away.protected:	virtual void		ListAddItem(LSelectableItem *inItem);/*	virtual	Boolean		ListContains(const LSelectableItem *inItem);	virtual void		ListRemoveItem(LSelectableItem *inItem);	virtual Int32		ListCount(void);	virtual LSelectableItem *	ListNthItem(Int32 inIndex);*/	LTextEngine			*mText;	LTextElemAEOM		*mTextLink;	LNTextEdit			*mTextFlow;};