//	===========================================================================//	LNTextEdit.h					©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma once#include	<LTextEdit.h>#include	<LSelectHandlerView.h>#include	<LTextEngine.h>#include	<LTextElemAEOM.h>#include	<LListener.h>/*	Defined in LTextEditenum {	textAttr_MultiStyle		= 0x8000,	textAttr_Editable		= 0x4000,	textAttr_Selectable		= 0x2000,	textAttr_WordWrap		= 0x1000};*//*	---------------------------------------------------------------------------	Version number for AEOM text processor could be very useful to know in OSA	applications.*/	const DescType	pPPTextAEOMVersion = 'pptv';	#define			PPTEXTAEOMVERSION	0x01006004//	---------------------------------------------------------------------------class	LSelection;class	LNTextEdit			:	public LSelectHandlerView			,	public LListener{	friend class LTextElemAEOM;	friend class LTextEditHandler;private:	typedef	LSelectHandlerView	inheritView;							LNTextEdit();	//	Must use parameterspublic:				//	Maintenance	static LNTextEdit*	CreateNTextEditStream(LStream *inStream);						LNTextEdit(LStream *inStream);	virtual				~LNTextEdit();	virtual	void		FinishCreateSelf(void);	virtual void		SetTextTraitsID(ResIDT textTraitsID);				//	Text object access	virtual	LTextEngine *	GetTextObject(void);	virtual LTextElemAEOM *	GetTextLink(void);					//	Implementation						//	mEventHandler (override)	virtual void		NoteOverNewThing(LManipulator *inThing);	virtual	LSelectableItem *	OverItem(Point inWhere);						//	Linkage	virtual void		ListenToMessage(MessageT inMessage, void *ioParam);	virtual Boolean		ObeyCommand(CommandT inCommand, void *ioParam);	virtual void		FindCommandStatus(CommandT inCommand,							Boolean &outEnabled, Boolean &outUsesMark,							Char16 &outMark, Str255 outName);	virtual LSemanticAction *	MakePasteAction(void);	virtual Boolean		FocusDraw(void);	virtual void		DrawSelf(void);	virtual void		ResizeFrameBy(							Int16		inWidthDelta,							Int16		inHeightDelta,							Boolean		inRefresh);	virtual void		ScrollImageBy(Int32 inLeftDelta, Int32 inTopDelta,							Boolean inRefresh);	virtual void		ResizeImageBy(Int32 inWidthDelta, Int32 inHeightDelta,							Boolean inRefresh);	virtual void		MoveBy(Int32 inHorizDelta, Int32 inVertDelta,							Boolean inRefresh);	virtual void		SubtractSelfErasingAreas(RgnHandle inSourceRgn);	virtual void		GetPortOrigin(Point *outOrigin);	virtual void		SetScrollPosition(const SPoint32 &inLocation);		virtual void		SavePlace(LStream *outPlace);	virtual void		RestorePlace(LStream *inPlace);				//	Implementation -- AEOM support	virtual LCoreAEOM *	GetSubModelForInsertion(								DescType		inInsertPosition,								LModelObject	*inTargetObject) const;	virtual LModelObject*						HandleCreateElementEvent(									DescType			inElemClass,									DescType			inInsertPosition,									LModelObject*		inTargetObject,									const AppleEvent	&inAppleEvent,									AppleEvent			&outAEReply);	virtual Int32		CountSubModels(DescType inModelID) const;	virtual void		GetSubModelByPosition(									DescType		inModelID,									Int32			inPosition,									AEDesc			&outToken) const;	virtual void		GetSubModelByComplexKey(									DescType		inModelID,									DescType		inKeyForm,									const AEDesc	&inKeyData,									AEDesc			&outToken) const;	virtual void		GetSubModelByName(									DescType		inModelID,									Str255			inName,									AEDesc			&outToken) const;	virtual Int32		GetPositionOfSubModel(									DescType			inModelID,									const LModelObject	*inSubModel) const;	virtual void		GetAEProperty(DescType		inProperty,									const AEDesc	&inRequestedType,									AEDesc			&outPropertyDesc) const;	virtual void		SetAEProperty(DescType		inProperty,									const AEDesc	&inValue,									AEDesc&			outAEReply);protected:	Boolean				mSelectAllOnTabSelect;	//	resouce support needs to be added for this.				//	Implementationprotected:	virtual	void		FixLink(void) const;	virtual void		DrawDebugRects(void);	//	just for debugging	virtual void		FixView(void);	virtual void		FixImage(void);//	virtual void		FixSelection(void);	LTextElemAEOM		*mTextLink;	//	Link to entire text AEOM object	LTextEngine			*mText;		//	Link to text engine class.									//		"owned by this object"};