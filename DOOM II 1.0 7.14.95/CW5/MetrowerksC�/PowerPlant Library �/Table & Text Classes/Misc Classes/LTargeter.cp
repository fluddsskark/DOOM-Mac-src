// ===========================================================================//	LTargeter.cp					©1994 Metrowerks Inc. All rights reserved.// ===========================================================================////	Code originally copied from LFocusBox.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include	<LTargeter.h>#include	<UDrawingState.h>#include	<LCommander.h>#include	<LView.h>LTargeter::LTargeter(){	mIsTargeted = false;	mTarget = NULL;}LTargeter::~LTargeter(){}void	LTargeter::AttachPane(	LPane	*inPane){									// FocusBox has the same SuperView									//   as its host Pane	LView	*superView = inPane->GetSuperView();	PutInside(superView);		SDimension16	hostSize;		// Size FocusBox to surround its host	inPane->GetFrameSize(hostSize);	ResizeFrameTo(hostSize.width + 6, hostSize.height + 6, false);										// Locate FocusBox relative to its host	SPoint32	hostLocation;		//   Host location in Port coords	inPane->GetFrameLocation(hostLocation);		SPoint32	imageLoc = {0, 0};	// Get Super Image location	if (superView != nil) {		superView->GetImageLocation(imageLoc);	}										// Specify location of FocusBox									// in Image coords of its SuperView	PlaceInSuperImageAt(hostLocation.h - imageLoc.h - 3,						hostLocation.v - imageLoc.v - 3, false);										// Use same FrameBinding as host	inPane->GetFrameBinding(mFrameBinding);}void	LTargeter::AttachTarget(LCommander *inTarget){	mTarget = inTarget;}void	LTargeter::ClickSelf(const SMouseDownEvent &inMouseDown){	if (mTarget) {		LCommander::SwitchTarget(mTarget);	}}void	LTargeter::DrawSelf()	{	Rect	frame;		if (mIsTargeted) {		if (CalcLocalFrameRect(frame)) {			StColorPenState		saveState;						StColorPenState::Normalize();			::PenSize(2, 2);			::FrameRect(&frame);		}	} else {		if (CalcLocalFrameRect(frame)) {			StColorPenState		saveState;			RgnHandle	outerRgn = ::NewRgn();			::RectRgn(outerRgn, &frame);						RgnHandle	innerRgn = ::NewRgn();			::InsetRect(&frame, 2, 2);			::RectRgn(innerRgn, &frame);						::DiffRgn(outerRgn, innerRgn, outerRgn);			::DisposeRgn(innerRgn);						::EraseRgn(outerRgn);			::DisposeRgn(outerRgn);		}	}}void	LTargeter::ShowFocus(void){	if (!mIsTargeted) {		mIsTargeted = true;		FocusDraw();		DrawSelf();	}}void	LTargeter::HideFocus(void){	if (mIsTargeted) {		mIsTargeted = false;		FocusDraw();		DrawSelf();	}}