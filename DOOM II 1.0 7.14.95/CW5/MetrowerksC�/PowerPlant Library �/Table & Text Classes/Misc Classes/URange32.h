//	===========================================================================//	URange32.h						©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma	oncetypedef struct {	Int32	start;	//	zero based.  Ie 0 is first byte	Int32	length;	//	Length in bytes.  Length 0 means no bytes.} Range32T;class	URange32 {public:	static Boolean	RangeIntersection(const Range32T &inRangeA, const Range32T &inRangeB, Range32T *outRange = NULL);	static Boolean	RangeUnion(const Range32T &inRangeA, const Range32T &inRangeB, Range32T *outRange = NULL);	static Boolean	RangesSame(const Range32T &inRangeA, const Range32T &inRangeB);	static Boolean	RangeWithinRange(const Range32T &inRangeA, const Range32T &inRangeB);	static void		RangeShift(const Range32T &inRange, Int32 inDelta, Range32T *outRange);	static void		RangeExpand(const Range32T &inRange, Int32 inDelta, Range32T *outRange);	static void		RangeAdjust(						const Range32T		&inRange,						Int32				inStart,						Int32				inDelta,						Boolean				inInclusive,						Range32T			*outRange);	static void		RangeCrop(const Range32T &inRange, const Range32T &inBoundary, Range32T *outRange);							static Int32	Min(Int32 inA, Int32 inB);	static Int32	Max(Int32 inA, Int32 inB);};	