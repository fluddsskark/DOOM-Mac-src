//	===========================================================================//	URegions.cp				©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include	<PP_Prefix.h>#include	<URegions.h>#include	<UDrawingState.h>#include	<Errors.h>StRegion::StRegion(RgnHandle inRegion){	mRgn = inRegion;}StRegion::StRegion(){	mRgn = NewRgn();	ThrowIfNULL_(mRgn);}StRegion::~StRegion(){	if (mRgn)		DisposeRgn(mRgn);	mRgn = NULL;}void	URegions::DrawAt(RgnHandle inRegion, Point inWhere, ConstPatternParam inPat){	ThrowIfNULL_(inRegion);		Point	negWhere;	negWhere.h = -inWhere.h;	negWhere.v = -inWhere.v;		Translate(inRegion, inWhere);	Try_{		FillRgn(inRegion, inPat);		ThrowIfOSErr_(QDError());		Translate(inRegion, negWhere);	} Catch_(inErr) {		Translate(inRegion, negWhere);	} EndCatch_;}void	URegions::FrameAt(RgnHandle inRegion, Point inWhere){	ThrowIfNULL_(inRegion);		Point	negWhere;	negWhere.h = -inWhere.h;	negWhere.v = -inWhere.v;		Translate(inRegion, inWhere);	Try_{		FrameRgn(inRegion);		ThrowIfOSErr_(QDError());		Translate(inRegion, negWhere);	} Catch_(inErr) {		Translate(inRegion, negWhere);	} EndCatch_;}void	URegions::Translate(RgnHandle ioRegion, Point inVector){	ThrowIfNULL_(ioRegion);		OffsetRgn(ioRegion, inVector.h, inVector.v);}RgnHandle	URegions::MakeRegionOutline(RgnHandle inRegion, RgnHandle outRegion){	RgnHandle	rval = outRegion;	OSErr		err = noErr;		ThrowIfNULL_(inRegion);	if (!rval)		rval = NewRgn();		Try_ {		ThrowIfNil_(inRegion);		ThrowIfNil_(rval);				//	Get outline		CopyRgn(inRegion, rval);								ThrowIfOSErr_(QDError());		InsetRgn(rval, 1, 1);								ThrowIfOSErr_(QDError());		DiffRgn(inRegion, rval, rval);								ThrowIfOSErr_(QDError());			} Catch_(inErr) {		if (rval && outRegion) {			DisposeRgn(rval);			rval = NULL;		}		Throw_(inErr);	} EndCatch_;		return rval;}