//	===========================================================================//	LMiscAEOM.cp					©1994 Metrowerks Inc. All rights reserved.//	===========================================================================//	===========================================================================/*	The purpose of this undocumented class is a buffer zone between	LModelObject providing some common Misc Suite features.*///	===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include	<PP_Prefix.h>#include	"LMiscAEOM.h"#include	<UAEDesc.h>#include	<UAppleEventsMgr.h>#include	<UExtractFromAEDesc.h>//	===========================================================================//	MaintenanceLMiscAEOM::LMiscAEOM(){	Assert_(false);		//	Parameters required}LMiscAEOM::LMiscAEOM(		LModelObject	*inSuperModel,		DescType		inKind)	:	LCoreAEOM(inSuperModel, inKind)/*	By default objects are lazy and listless.*/{}LMiscAEOM::~LMiscAEOM(){}	void LMiscAEOM::HandleAppleEvent(	const AppleEvent	&inAppleEvent,	AppleEvent			&outAEReply,	AEDesc				&outResult,	long				inAENumber){	switch (inAENumber) {		case ae_Copy:			HandleCopy(outAEReply);Finalize();			break;					case ae_Cut:			HandleCut(outAEReply);Finalize();			break;					case ae_Paste:			HandlePaste(outAEReply);Finalize();			break;					case ae_Redo:			HandleRedo(outAEReply);Finalize();			break;					case ae_Undo:			HandleUndo(outAEReply);Finalize();			break;					default:			inherited::HandleAppleEvent(inAppleEvent, outAEReply, outResult, inAENumber);			break;	}}void	LMiscAEOM::HandleCut(	AppleEvent			&outAEReply){	Throw_(errAEEventNotHandled);}void	LMiscAEOM::HandleCopy(	AppleEvent			&outAEReply){	Throw_(errAEEventNotHandled);}void	LMiscAEOM::HandlePaste(	AppleEvent			&outAEReply){	Throw_(errAEEventNotHandled);}void	LMiscAEOM::HandleRedo(	AppleEvent			&outAEReply){	Throw_(errAEEventNotHandled);}void	LMiscAEOM::HandleUndo(	AppleEvent			&outAEReply){	Throw_(errAEEventNotHandled);}