//	===========================================================================//	LCoreAEOM.h					©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma once#include	<LModelObject.h>class	LList;class	LCoreAEOM			:	public LModelObject{private:						LCoreAEOM();	//	Must provide parameter.public:				//	Maintenance						LCoreAEOM(LModelObject *inSuperModel, DescType inKind);	virtual				~LCoreAEOM();	virtual void		SetSuperModel(LModelObject *inSuperModel);	virtual void		SetModelKind(DescType inModelKind);	virtual void		SetLaziness(Boolean inLaziness);	virtual	void		SetUseSubModelList(Boolean inUseSubModelList);					//	AEOM (new)	virtual	StringPtr	GetModelNamePtr(void) {return NULL;};	virtual LCoreAEOM *	GetSubModelForInsertion(								DescType		inInsertPosition,								LModelObject	*inTargetObject) const;												//	AEOM	virtual DescType	GetModelKind() const;	virtual const StringPtr	GetModelNamePtr(void) const {return NULL;};	virtual Boolean		IsLazy(void) const;	virtual void		GetAEProperty(								DescType		inProperty,								const AEDesc	&inRequestedType,								AEDesc			&outPropertyDesc) const;	virtual LModelProperty*	GetModelProperty(DescType inProperty);	virtual void		Finalize(void);	virtual void		AddSubModel(LModelObject *inSubModel);	virtual void		RemoveSubModel(LModelObject *inSubModel);	virtual Int32		CountSubModels(DescType inModelID) const;	virtual void		GetSubModelByPosition(									DescType		inModelID,									Int32			inPosition,									AEDesc			&outToken) const;	virtual void		GetSubModelByName(									DescType		inModelID,									Str255			inName,									AEDesc			&outToken) const;										virtual Int32		GetPositionOfSubModel(									DescType			inModelID,									const LModelObject	*inSubModel) const;	virtual void		HandleAppleEvent(								const AppleEvent	&inAppleEvent,								AppleEvent			&outAEReply,								AEDesc				&outResult,								Int32				inAENumber);					//	AEOM verb handling (override)	virtual void		HandleCount(								DescType			&inKind,								AppleEvent			&outAEReply);	virtual void		HandleDelete(								AppleEvent			&outAEReply,								AEDesc				&outResult);	virtual	void		HandleClone(								const AppleEvent	&inAppleEvent,								AppleEvent			&outAEReply,								AEDesc				&outResult);	virtual	void		HandleMove(								const AppleEvent	&inAppleEvent,								AppleEvent			&outAEReply,								AEDesc				&outResult);				//	AEOM verb handling help:	virtual	void		GetImportantAEProperties(AERecord &outKeyDescList);protected:	virtual	void		SendAppleEventWithReply(								AppleEvent			&inAppleEvent,								AppleEvent			&outAEReply,								Boolean				inRecord = true);					//	Data membersprotected:	DescType				mKind;	LList					*mSubModels;	Int32					mSubCount;		//	For avoiding deletion when submodel list list											//	not used, when the object is lazy instantiated,											//	And when some submodel still references this model											//	As a supermodel	Boolean					mLaziness;};