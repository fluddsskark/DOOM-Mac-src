//	===========================================================================//	LTableIterator.cp				   © 1994 Metrowerks Inc. All rights reserved.//	===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include	<PP_Prefix.h>#include	"LTableIterator.h"//	===========================================================================//	MaintenanceLTableIterator::LTableIterator(	LNTable				*inTable,	const TableCellT	&inRange)/*	Always iterates from start.*/{	mTable = inTable;	mRange = inRange;		mRangeIsTable = false;	mRangeIsRow = false;	mRangeIsCol = false;	mRangeIsCell = false;		do {		if ((mRange.row == 0) && (mRange.col == 0)) {			mRangeIsTable = true;			mNext.row = 1;			mNext.col = 1;			break;		}				if (mRange.row == 0) {			mRangeIsCol = true;			mNext.col = mRange.col;			mNext.row = 1;			break;		}				if (mRange.col == 0) {			mRangeIsRow = true;			mNext.row = mRange.row;			mNext.col = 1;			break;		}				mRangeIsCell = true;		mNext = mRange;		mIndex = mNext;	} while (false);}LTableIterator::~LTableIterator(){}//	===========================================================================//	New featuresBoolean	LTableIterator::Current(	TableCellT		&ioCell){	if (mTable->IsValidCell(mIndex)) {		ioCell = mIndex;		return true;	} else		return false;}Boolean	LTableIterator::Next(	TableCellT		&ioCell){	mIndex = mNext;	CalcNextIndex();		return(Current(ioCell));}Boolean	LTableIterator::Previous(	TableCellT		&ioCell){	Assert_(false);	return(false);}//	===========================================================================//	Implementationvoid	LTableIterator::CalcNextIndex(){	Boolean		rval = false;	if (mRangeIsRow) {		mNext.col++;	}		if (mRangeIsCol) {		mNext.row++;	}		if (mRangeIsTable) {		mNext.col++;		rval = mTable->IsValidCell(mNext);		if (!rval) {			mNext.col = 1;			mNext.row++;		}	}		if (mRangeIsCell) {		mNext.col = -1;		mNext.row = -1;	}}