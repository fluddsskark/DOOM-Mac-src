//	===========================================================================//	L2dDynamicArray.cp					©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include	<PP_Prefix.h>#include	"L2dDynamicArray.h"#include	<LDynamicArray.h>#include	<LList.h>#include	<LListIterator.h>#ifndef	Min	#define	Min(a,b)	( ((a) < (b)) ? (a) : (b) )#endif#ifndef	Max	#define	Max(a,b)	( ((a) > (b)) ? (a) : (b) )#endif//	===========================================================================//	MaintenanceL2dDynamicArray::L2dDynamicArray(Int32 inItemSize){	mElementSize = inItemSize;	CheckSizes();}L2dDynamicArray::~L2dDynamicArray(void){	Int32	i,			n = mRowCount;	for (i = n; i > 0; i--) {		DeleteRow(i);	}}//	===========================================================================//	QueriesInt32	L2dDynamicArray::GetItemSize(void){	return mElementSize;}void	L2dDynamicArray::GetDimensions(Int32 &outRowCount, Int32 &outColCount){	outRowCount = mRowCount;	outColCount = mColCount;}//	===========================================================================//	Access functionsBoolean		L2dDynamicArray::FetchItemAt2d(Int32 inColumn, Int32 inRow, void *outItem)/*	Using null as outItem causes FetchItemAt2d to behave as an element exists function*/{	Boolean			rval = false;	LDynamicArray	*row = NULL;		do {		if (	!(mRows.FetchItemAt(inRow, &row))	)			break;				if (row->GetCount() < inColumn)			break;				rval = true;				if (outItem == NULL)			break;					row->FetchItemAt(inColumn, outItem);	} while (false);		return rval;}void	L2dDynamicArray::SetItemAt2d(Int32 inColumn, Int32 inRow, void *inItem){	Boolean			rval = false;	LDynamicArray	*row = NULL;	Int32			i, ct;		//	Allocate rows if necessary	ct = inRow - mRows.GetCount();	for (i = 1; i <= ct; i++) {		//	Loop necessary since LList will only append									//	if given index is past end of list.		row = MakeNewRow();		mRows.InsertItemsAt(1, inRow, &row);	}		//	Find desired row	rval = mRows.FetchItemAt(inRow, &row);	Assert_(rval);	//	Row has to exist by now!	Assert_(row);		//	Allocate column cells if necessary	ct = inColumn - row->GetCount();	if (ct >0)		row->InsertItemsAt(ct, row->GetCount() + 1, NULL);	//	fill in undefined values...		//	Set the value	Assert_(inItem != NULL);	row->SetItemAt(inColumn, inItem);		mColCount = Max(mColCount, inColumn);	mRowCount = Max(mRowCount, inRow);}	//	===========================================================================//	Manipulationvoid	L2dDynamicArray::InsertRow(Int32 inRow){	LDynamicArray	*row;	Int32			i, ct;		//	Allocate / find row	ct = inRow - mRows.GetCount();	if (ct > 0) {		for (i = 1; i <= ct; i++) {		//	Loop necessary since LList will only append										//	if given index is past end of list.			row = MakeNewRow();			mRows.InsertItemsAt(1, inRow, &row);		}	} else {		row = MakeNewRow();		mRows.InsertItemsAt(1, inRow, &row);	}}void	L2dDynamicArray::DeleteRow(Int32 inRow){	LDynamicArray	*row;		if (mRows.FetchItemAt(inRow, &row)) {		mRows.RemoveItemsAt(1, inRow);		delete row;		CheckSizes();	}}void	L2dDynamicArray::InsertColumn(Int32 inColumn){	LListIterator	iter = LListIterator(mRows, iterate_FromStart);	LDynamicArray	*row;	Int32			ct;		while(iter.Next(&row)) {		ct = inColumn - row->GetCount();		if (ct > 1)			row->InsertItemsAt(ct, row->GetCount() + 1, NULL);		else			row->InsertItemsAt(1, inColumn, NULL);	}}void	L2dDynamicArray::DeleteColumn(Int32 inColumn){	LListIterator	iter = LListIterator(mRows, iterate_FromStart);	LDynamicArray	*row;		while(iter.Next(&row)) {		row->RemoveItemsAt(1, inColumn);	}}//	===========================================================================//	Implementationvoid	L2dDynamicArray::CheckSizes(void){	Int32			i, cols = 0;	LDynamicArray	*row;		mRowCount = mRows.GetCount();		for (i = 1; i <= mRowCount; i++) {		mRows.FetchItemAt(i, &row);			cols = Max(cols, row->GetCount());	}	mColCount = cols;}LDynamicArray *	L2dDynamicArray::MakeNewRow(void){	return new LDynamicArray(mElementSize);}