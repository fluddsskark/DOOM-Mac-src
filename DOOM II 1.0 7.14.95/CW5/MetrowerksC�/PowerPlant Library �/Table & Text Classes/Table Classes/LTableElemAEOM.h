//	===========================================================================//	LTableElemAEOM.h					©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma once#include	<LNTable.h>#include	<AppleEvents.h>#include	<LSelectableItem.h>//	===========================================================================//	LTableElemAEOMclass	LTableElemAEOM			:	public LSelectableItem{private:						LTableElemAEOM();			//	Parameters requiredpublic:				//	Maintenance						LTableElemAEOM(								LNTable		*inTable,								DescType	inKind,								TableCellT	inIndex);	virtual				~LTableElemAEOM();		virtual void		GetRange(TableCellT *outCell);					//	LSelectableItem implementation	virtual Boolean		EquivalentTo(const LSelectableItem *inItem);	virtual	Boolean		IndependentFrom(const LSelectableItem *inItem);	virtual Boolean		PointInRepresentation(Point inWhere);					//	Implementation	virtual void		GetCellIndex(TableCellT *outIndex);											//	AEOM	virtual void		MakeSpecifier(AEDesc &outSpecifier) const;	virtual void		GetAEProperty(DescType inProperty,										  const AEDesc &inRequestedType,										  AEDesc &outPropertyDesc) const;	virtual void		SetAEProperty(DescType inProperty,										  const AEDesc &inValue,										  AEDesc& outAEReply);								//	Data tubing	virtual void		AddFlavorTypesTo(LDataTube *inTube);	virtual Boolean		SendFlavorTo(FlavorType inFlavor, LDataTube *inTube);	virtual FlavorType	PickFlavorFrom(const LDataTube *inTube);	virtual void		ReceiveDataFrom(LDataTube *inTube);	protected:	virtual void		MakeSelfSpecifier(AEDesc &inSuperSpecifier,											  AEDesc &outSelfSpecifier) const;				//	Data membersprotected:	TableCellT				mIndex;			//	Row or column index.	LNTable					*mTable;};//	===========================================================================//	LCellAEOMclass LCellAEOM : public LTableElemAEOM{private:							LCellAEOM();			//	Parameters requiredpublic:							LCellAEOM(LNTable *inTable, TableCellT inIndex);	virtual					~LCellAEOM();				//	LSelectableItem implementation	virtual void		DrawSelf(void);	virtual void		DrawSelfSelected(void);	virtual void		DrawSelfLatent(void);	virtual void		DrawSelfReceiver(void);				//	AEOM verbs...	virtual void		HandleDelete(								AppleEvent			&outAEReply,								AEDesc				&outResult);};//	===========================================================================//	LRowAEOMclass LRowAEOM : public LTableElemAEOM{private:						LRowAEOM();				//	Parameters requiredpublic:						LRowAEOM(LNTable *inTable, TableCellT inIndex);	virtual 			~LRowAEOM();	virtual long		CountSubModels(DescType inModelID) const;	virtual void		GetSubModelByPosition(									DescType		inModelID,									Int32			inPosition,									AEDesc			&outToken) const;};//	===========================================================================//	LColumnAEOMclass LColumnAEOM : public LTableElemAEOM{private:						LColumnAEOM();			//	Parameters requiredpublic:						LColumnAEOM(LNTable *inTable, TableCellT inIndex);	virtual 			~LColumnAEOM();	virtual long		CountSubModels(DescType inModelID) const;	virtual void		GetSubModelByPosition(									DescType		inModelID,									Int32			inPosition,									AEDesc			&outToken) const;};