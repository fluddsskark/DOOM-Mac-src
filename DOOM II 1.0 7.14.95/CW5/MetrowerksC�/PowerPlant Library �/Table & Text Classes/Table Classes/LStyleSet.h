//	===========================================================================//	LStyleSet.h					©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma once#include	<LCoreAEOM.h>#include	<LSharedObject.h>#include	<UTextTraits.h>class	LNTextEdit;class	LAEStream;/*	The properties and types you'll see when dealing with styles...		cChar		pColor			cRGBColor			-- 1st char		pFont			cText (font name)	-- 1st char	(TX: kFontAttr)		pPointSize		cFixed				-- 1st char (TX: kFontSizeAttr)		pScriptTag		cIntlWritingCode	-- 1st char		pTextStyles		cTextStyles 		-- 1st char		pUniformStyles  cTextStyles   		-- styles constant accross range				?pLength		cLongInteger		-- number of characters of object		?pOffset		cLongInteger		-- characters from beginning of document					typeStyledText  (typeAEText is "better" and maybe coercion works between the two)		keyAEStyles	typeScrapStyles		keyAEText	typeChar		typeAEText		keyAEScriptTag	typeIntlWritingCode		keyAEStyles		typeScrapStyles plpt type		keyAEText		typeChar			typeIntlWritingCode		short	theScriptCode		short	theLangCode			typeRGBColor  (TX:  kForeColorAttr)		short	red		short	green		short	blue		typeScrapStyles		'styl' "see TextEdit IM V5"  uses font #'s instead of font names				typeTextStyles  (TX:  kFaceAttr's low short in bits of TE/QD)		keyAEOffStyles	typeAEList		keyAEOnStyles	typeAEList					AE						TextEdit			--						--------			kAEPlain				normal			kAEBold					bold			kAEItalic				italic			kAEOutline				outline			kAEShadow				shadow			kAEUnderline			underline			kAESuperscript			kAESubscript			kAEStrikethrough			kAESmallCaps			kAEAllCaps			kAELowercase			kAECondensed			condense			kAEExpanded				extend			kAEHidden*/#define	cStyleSet	'stys'class	LStyleSet			:	public LSharedObject			,	public LCoreAEOM{private:						LStyleSet();	//	Must provide parameters.public:				//	Maintenance						LStyleSet(LNTextEdit *inTextView, LStyleSet *inOriginal = NULL);	virtual				~LStyleSet();			virtual void		SetTextTraits(const TextTraitsRecord &inTraits);	virtual void		GetTextTraits(TextTraitsRecord *outTraits);				//	AEOM	virtual void		HandleDelete(								AppleEvent			&outAEReply,								AEDesc				&outResult);		virtual void		GetAEProperty(								DescType		inProperty,								const AEDesc	&inRequestedType,								AEDesc			&outPropertyDesc) const;	virtual void		SetAEProperty(								DescType		inProperty,								const AEDesc	&inValue,								AEDesc			&outAEReply);	virtual	void		Finalize(void);/*	Ease of use functions?				void		GetFontByName(Str255 outFontName);			void		SetFontByName(const Str255 inFontName);			void		GetFontSize(Int16 *outFontSize);			void		SetFontSize(Int16 inFontSize);		NOT!		These are not included because they shouldn't be used and just clutter	the API.		If you're setting up a default style for your application, read it from a	resource using UTextTraits and then set it using style->SetTextTraits().		If you're implementing some sort of menu or toolbar style support, you'll	need to codify the operation in AppleEvents for the sake of recordability	and or undoability  (ie, you're going to be calling Get/SetAEProperty	anyway).		And, if you're going to be applying a new style across a range of styles,	you get to write an iterator that probably uses the copy feature	of the style constructor.  Do it and if it is flexible, send it to us :)*/				//	Implementation support... rarely needed	virtual const StringPtr	GetModelNamePtr(void) const;	static	Int16		GetFontId(const Str255 inFontName);	static	void		GetFontName(Int16 inFontId, Str255 inFontName);public:	static	Int32		StylesToInt(const AEDesc &inStyles);	static	void		IntToStyles(Int32 inOnFaces, AEDesc *outStyles, Int32 inOffFaces = 0);protected:	static	void		WriteStyles(LAEStream &outStream, Int32 inFaces);	Str31				mName;	virtual void		MakeSelfSpecifier(								AEDesc		&inSuperSpecifier,								AEDesc		&outSelfSpecifier) const;};