//	===========================================================================//	LNTable.h					©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma once#include	<LSelectHandlerView.h>//	Only for TableCellT & TableIndexT...#include	<LTable.h>#include	<L2dDynamicArray.h>#include	<LDynamicArray.h>#include	<Drag.h>class	LDataTube;/*	Future range support?...	typedef struct {		TableIndexT	min;	//	upper left cell		TableIndexT	max;	//	lower right cell	} TableRangeT;*/class	LNTable			:	public LSelectHandlerView{private:	typedef	LSelectHandlerView	inheritAEOM;						LNTable();		//	Parameters requiredpublic:				//	Maintenance						LNTable(LStream *inStream);						LNTable(LModelObject *inSuperModel);	virtual				~LNTable(void);	virtual L2dDynamicArray *						Get2dArray(void);	virtual	void		Set2dArray(L2dDynamicArray *inArray);				//	Overrides	virtual void		DrawCell(const TableCellT &inCell) = 0;	virtual void		ClearCell(const TableCellT &inCell) = 0;					//	Data tubing (override)	virtual	FlavorType	PickFlavorFrom(								const TableCellT	&inCell,								const LDataTube		*inTube);	virtual	void		AddFlavorTypesTo(								const TableCellT	&inCell,								LDataTube			*inTube);	virtual	Boolean		SendFlavorTo(								FlavorType			inFlavor,								const TableCellT	&inCell,								LDataTube			*inTube);	virtual	void		ReceiveDataFrom(								const TableCellT	&inCell,								LDataTube			*inTube);				//	LSelectHandlerView overrides:	virtual void		NoteOverNewThing(LManipulator *inThing);	virtual	LSelectableItem *	OverItem(Point inWhere);public:				//	Query	virtual void		GetTableSize(TableIndexT &outRows, TableIndexT &outCols);	virtual Boolean		IsValidCell(const TableCellT &inCell);	virtual Boolean		EqualCell(const TableCellT &inCellA, const TableCellT &inCellB);	virtual Boolean		FetchCellHitBy(const Point &inPoint, TableCellT &outCell);	virtual Boolean		FetchCellHitBy(const SPoint32 &inImagePt, TableCellT &outCell);	virtual Boolean		FetchLocalCellFrame(const TableCellT &inCell, Rect &outCellFrame);				//	Semantic operations (mostly map to mArray)			//	And mostly unimplemented	virtual void		InsertRows(Int32 inHowMany, TableIndexT inAfterRow,								void *inCellData);	virtual void		InsertCols(Int32 inHowMany, TableIndexT inAfterCol,								void *inCellData);	virtual void		RemoveRows(Int32 inHowMany, TableIndexT inFromRow);	virtual void		RemoveCols(Int32 inHowMany, TableIndexT inFromCol);	virtual void		SetCellData(const TableCellT &inCell, void *inData);	virtual void		GetCellData(const TableCellT &inCell, void *outData);				//	Appearance		virtual void		SetRowHeight(Int16 inHeight, TableIndexT inFrom,								TableIndexT inTo);	virtual void		SetColWidth(Int16 inWidth, TableIndexT inFrom,								TableIndexT inTo);protected:				//	Implementation	virtual void		CheckSizes(void);	virtual void		DrawSelf(void);	virtual	void		RefreshCell(const TableCellT &inCell);public:													//	AEOM	virtual LModelObject*	HandleCreateElementEvent(								DescType			inElemClass,								DescType			inInsertPosition,								LModelObject*		inTargetObject,								const AppleEvent	&inAppleEvent,								AppleEvent			&outAEReply);	virtual long		CountSubModels(DescType inModelID) const;	virtual void		GetSubModelByPosition(									DescType		inModelID,									Int32			inPosition,									AEDesc			&outToken) const;	virtual Int32		GetPositionOfSubModel(									DescType			inModelID,									const LModelObject	*inSubModel) const;	virtual void		GetSubModelByName(									DescType		inModelID,									Str255			inName,									AEDesc			&outToken) const;	virtual void		GetAEProperty(									DescType		inProperty,									const AEDesc	&inRequestedType,									AEDesc			&outPropertyDesc) const;	virtual void		SetAEProperty(									DescType		inProperty,									const AEDesc	&inValue,									AEDesc&			outAEReply);	virtual LModelProperty*						GetModelProperty(DescType inProperty);				//	Data membersprotected:	L2dDynamicArray		*mArray;		Int32				mRows;	Int32				mCols;//	LDynamicArray		mColWidths;		//	Array of Int16//	LDynamicArray		mRowHeights;	//	Array of Int16	Int16				mColWidth;	Int16				mRowHeight;	Boolean				mClipToCellFrames;public:/*	Archaic methods:		The following should never be used in new code.  Older code	should adopt the use of the tubing methods for data i/o. */	virtual void		SetCellDataByDesc(								const TableCellT	&inCell,								const AEDesc		&inValue);	virtual void		GetCellDataAsDesc(								const TableCellT	&inCell,								const DescType		inRequestedType,								AEDesc				&outValue) const;};