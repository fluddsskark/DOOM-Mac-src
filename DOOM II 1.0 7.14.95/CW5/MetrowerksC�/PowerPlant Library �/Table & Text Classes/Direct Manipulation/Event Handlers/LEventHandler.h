//	===========================================================================//	LEventHandler.h					©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma	onceclass	LSelectHandlerView;//	===========================================================================/*	EVenT Language states:	Derived handlers may create more.  Therefore, subclass verb members should	do nothing if in an unknown state.*/typedef enum {	evtl_unStarted = -1,	evtl_idle,	evtl_maybeDrag,	evtl_dragging,	evtl_clickCounting,	evtl_EventHandlerNextState	//	Next subclass of EventHandler starts from here.} EventStateT;//	===========================================================================//	LEventHandler:class	LEventHandler {public:				//	Maintenance						LEventHandler(Int16 inMultiClickDistance = 4);	virtual				~LEventHandler();	virtual	void		Reset(void);									//	Required incoming hooks (must be called)	virtual Boolean		DoEvent(const EventRecord &inEvent);	virtual Boolean		DoLiteralEvent(const EventRecord &inEvent);	virtual void		Activate(void);	virtual void		Deactivate(void);	virtual void		SetMouseBounds(const Rect &inBounds);	virtual void		SetBoundaryRects(const Rect &inInside, const Rect &inOutside);	virtual void		SetView(LSelectHandlerView *inView);					//	Query	virtual	Int16		GetClickCount(void);	virtual Boolean		PointIsClose(Point inOldPt, Point inNewPt);	virtual	Boolean		PointInHandlerRgn(Point inWhere);protected:				//	Overrides	virtual void		NoteNthClick(Int16 inClickCount, Point inWhere);	virtual void		NoteOutOfBounds(Point inWhere);	virtual void		NoteInBounds(Point inWhere);	virtual void		NoteBoundaryDrag(Point inWhere);	virtual void		NoteAutoScrollVector(Point inVector);	virtual void		NoteDragStart(void);	virtual void		NoteDragStop(void);	virtual void		NoteDragMove(void);	virtual void		CheckCursor(void);				//	Implementationprotected:	virtual Int32		GetEvtState();	virtual void		SetEvtState(Int32 inState);	virtual Boolean		IsActive(void);	virtual void		UpdateLastEvt(EventRecord &inEvent, Point inLocalMouse);	virtual void		FocusDraw(void);	virtual Boolean		PtInBoundaryArea(Point inWhere);	virtual void		CheckBoundaryDrag(void);	virtual void		PreScroll(Point inVector);	virtual void		PostScroll(Point inVector);protected:				//	Verbs  (see mEvt... for associated parms)	virtual void		MouseMove(void);	virtual void		MouseUp(void);	virtual void		MouseDown(void);	virtual void		KeyDown(void);	virtual void		KeyUp(void);	virtual void		Idle(void);					//	New data membersprotected:	Rect				mMouseBounds;	LSelectHandlerView	*mView;				//	General state information	EventStateT			mEvtState;	EventRecord			mEvtRecord;	Point				mEvtMouse;			//	Mouse position (local coords)	EventStateT			mLastEvtState;	EventRecord			mLastEvtRecord;	Point				mLastEvtMouse;		//	Mouse position (local coords)					//	Clicking state information	Boolean				mClickInLastSelection;	//	was click in selection	Int16				mEvtClickCount;			//	1st, 2nd, 3rd, etc. click count	long				mEvtClickCountUpTime;	//	Time of last up.	Point				mEvtClickCountDown;		//	Compare to this pt to see												//	 if subsequent pts are close												//	 enough to call an nth click.	Boolean				mActive;	Boolean				mInBounds;	Int16				mMultiClickDistance;					//	Boundary Drag (BD) state information	Rect				mBDArea,			//	Interesting boundary drag area (auto						mBDAreaOutside;		//		ajusted by SetMouseBounds). 	Int32				mBDDelay;			//	Time between consecutive BD notifications	Int32				mBDInitialDelay;	//	Time from entry in interesting area											//		to first BD notification.	Boolean				mBDHasEntered;		//	Has entered BD area.	Boolean				mBDFirstTime;		//	First BD notification in a possible series of											//		notifications.	Int32				mLastBDTime;		//	Time of last BD notification};