//	===========================================================================//	LDragEventHandler.cp			©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include	<PP_Prefix.h>#include	"LDragEventHandler.h"#include	<LSelection.h>//	===========================================================================//	MaintenanceLDragEventHandler::LDragEventHandler(){	Assert_(false);	//	Parameters required}LDragEventHandler::LDragEventHandler(LSelection *inSelection, LSemanticUndoer *inUndoer):	LSelectionEventHandler(inSelection, inUndoer){	mDragItem = NULL;}LDragEventHandler::~LDragEventHandler(){	SHARED_OBJ_REPLACE_REF(mDragItem, NULL);}void	LDragEventHandler::Reset(void){	OSErr	err = noErr;	inherited::Reset();		SHARED_OBJ_REPLACE_REF(mDragItem, NULL);}//	===========================================================================//	New featuresvoid	LDragEventHandler::NoteSelectingDragStart(void){}void	LDragEventHandler::NoteSelectingDragMove(void){}void	LDragEventHandler::NoteSelectingDragStop(void){}void	LDragEventHandler::NoteMoveDragStart(void){	Assert_(mDragItem == NULL);	SHARED_OBJ_REPLACE_REF(mDragItem, mEvtThing);	Assert_(mDragItem);	mDragItem->DragStart(mEvtMouse);}void	LDragEventHandler::NoteMoveDragStop(void){	Assert_(mDragItem);	mDragItem->DragStop(mEvtMouse);	SHARED_OBJ_REPLACE_REF(mDragItem, NULL);}void	LDragEventHandler::NoteMoveDragMove(void){	Assert_(mDragItem);	mDragItem->DragMove(mLastEvtMouse, mEvtMouse);}//	===========================================================================//	Implementationvoid	LDragEventHandler::NoteDragStart(void){	Boolean	areaSelection = true;		if (mEvtThing) {		switch(mEvtThing->ItemType()) {			case kManipulator:				areaSelection = false;				break;			case kSelection:				areaSelection = !mSelectionCanMove;				break;		}	}		if (areaSelection) {		mDragType = dragType_Selecting;		NoteSelectingDragStart();	} else {		mDragType = dragType_Manipulator;		NoteMoveDragStart();	}}void	LDragEventHandler::NoteDragStop(void){	switch(mDragType) {		case dragType_Selecting:			NoteSelectingDragStop();			break;		case dragType_Manipulator:			NoteMoveDragStop();			break;	}}void	LDragEventHandler::NoteDragMove(void){	switch(mDragType) {		case dragType_Selecting:			NoteSelectingDragMove();			break;		case dragType_Manipulator:			NoteMoveDragMove();			break;	}}void	LDragEventHandler::SetEvtState(Int32 inState){	Int32	oldState,			newState;		oldState = GetEvtState();	inherited::SetEvtState(inState);		newState = GetEvtState();		if (	(oldState == evtl_dragging) &&			(newState != evtl_dragging)	) {		SHARED_OBJ_REPLACE_REF(mDragItem, NULL);	}}