//	===========================================================================//	LDataDragEventHandler.AEOM.cp	й1994 Metrowerks Inc. All rights reserved.//	===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include	<PP_Prefix.h>#include	"LDataDragEventHandler.h"#include	<LSelection.h>#include	<LSelectableItem.h>#include	<LAESemanticAction.h>#include	<UAppleEventsMgr.h>#include	<UExtractFromAEDesc.h>#include	<UMemoryMgr.h>#include	<UAEDesc.h>#include	<Errors.h>#include	<AERegistry.h>#include	<AEObjects.h>#include	<LDragTube.h>#define	DragTask	LDataDragTask::sActiveTask//	===========================================================================//	Drag tasks:LSemanticAction *	LDataDragEventHandler::MakeCreateTask(void){	LAESemanticAction	*action = NULL;	StAEDescriptor		data,						destination,						doerAppleEvent,						undoerAppleEvent,						postUndoerAE,						temp,						temp2;	OSErr				err;	FlavorType			desiredFlavor;	if (DragTask == NULL)		Throw_(paramErr);	if (DragTask->mDragTube == NULL)		Throw_(paramErr);	if (DragTask->mReceiver == NULL)		Throw_(paramErr);	//	ее	Make the "semantic action"	action = new LAESemanticAction(STRx_RedoDragDescriptions, str_DragDrop);	action->SetSelection(mSelection);	//	ее	Make doer create event	UAppleEventsMgr::MakeAppleEvent(kAECoreSuite, kAECreateElement, doerAppleEvent.mDesc);	//	keyAEData	desiredFlavor = DragTask->mReceiver->PickFlavorFrom(DragTask->mDragTube);	DragTask->mDragTube->GetFlavorAsDesc(desiredFlavor, &data.mDesc);	err = AEPutParamDesc(&doerAppleEvent.mDesc, keyAEData, &data.mDesc);	ThrowIfOSErr_(err);	//	keyAEPropData	//		is optional	//	keyAEInsertHere	DragTask->mReceiver->MakeSpecifier(temp.mDesc);	if (temp.mDesc.descriptorType != typeInsertionLoc) {		UAEDesc::MakeInsertionLoc(temp.mDesc, kAEReplace, &destination.mDesc);	} else {		err = AEDuplicateDesc(&temp.mDesc, &destination.mDesc);		ThrowIfOSErr_(err);	}	err = AEPutParamDesc(&doerAppleEvent.mDesc, keyAEInsertHere, &destination.mDesc);	ThrowIfOSErr_(err);	//	keyAEObjectClass	DescType	type = DragTask->mReceiver->GetModelKind();;	err = AEPutParamPtr(&doerAppleEvent.mDesc, keyAEObjectClass, typeType, &type, sizeof(type));	ThrowIfOSErr_(err); 	action->SetRedoAE(doerAppleEvent.mDesc);	//	ее	Make undoer event	UAppleEventsMgr::MakeAppleEvent(kAECoreSuite, kAEDelete, undoerAppleEvent.mDesc);		//	keyDirectObject	action->UndoAESetKeyFed(keyDirectObject);		action->SetUndoAE(undoerAppleEvent.mDesc);	//	ее	Make post undoer event	DescType	position;	UAEDesc::ParamDescFromDesc(destination.mDesc, keyAEPosition, typeEnumeration, &temp2.mDesc);	UExtractFromAEDesc::TheEnum(temp2.mDesc, position);	if (position == kAEReplace) {		StAEDescriptor	oldDestProps;				UAppleEventsMgr::MakeAppleEvent(kAECoreSuite, kAECreateElement, postUndoerAE.mDesc);		//	keyAEData		//		optional -- uses keyAEPropData				//	keyAEPropData		err = AECreateList(NULL, 0, true, &oldDestProps.mDesc);		ThrowIfOSErr_(err);		DragTask->mReceiver->GetImportantAEProperties(oldDestProps.mDesc);		err = AEPutParamDesc(&postUndoerAE.mDesc, keyAEPropData, &oldDestProps.mDesc);				//	keyAEInsertHere		action->PostUndoAESetKeyFed(keyAEInsertHere, keyAEInsertHere);				//	keyAEObjectClass		desiredFlavor = DragTask->mReceiver->GetModelKind();		err = AEPutParamPtr(&postUndoerAE.mDesc, keyAEObjectClass, typeType, &desiredFlavor, sizeof(desiredFlavor));		ThrowIfOSErr_(err); 		action->SetPostUndoAE(postUndoerAE.mDesc);	}	return action;}LSemanticAction *	LDataDragEventHandler::MakeCopyTask(void){	LAESemanticAction	*action = NULL;	StAEDescriptor	source,					destination,					doerAppleEvent,					undoerAppleEvent,					postUndoerAE,					temp,					temp2;	OSErr			err;	if (DragTask == NULL)		Throw_(paramErr);	if (DragTask->mDragTube == NULL)		Throw_(paramErr);	if (DragTask->mReceiver == NULL)		Throw_(paramErr);	if (DragTask->mDragRef == NULL)		Throw_(paramErr);	//	ее	Make the "semantic action"	action = new LAESemanticAction(STRx_RedoDragDescriptions, str_DragCopy);	action->SetSelection(mSelection);	//	Get source descriptor	DragTask->mDragTube->GetFlavorAsDesc(typeObjectSpecifier, &source.mDesc);		//	Get destination descriptor -- the drop location	err = GetDropLocation(DragTask->mDragRef, &destination.mDesc);	ThrowIfOSErr_(err);	Assert_(destination.mDesc.descriptorType != typeNull);	//	ее	Make doer copy event	UAppleEventsMgr::MakeAppleEvent(kAECoreSuite, kAEClone, doerAppleEvent.mDesc);		//	keyDirectObject	err = AEPutParamDesc(&doerAppleEvent.mDesc, keyDirectObject, &source.mDesc);	ThrowIfOSErr_(err);	//	keyAEInsertHere	DragTask->mReceiver->MakeSpecifier(temp.mDesc);	if (temp.mDesc.descriptorType != typeInsertionLoc) {		UAEDesc::MakeInsertionLoc(temp.mDesc, kAEReplace, &destination.mDesc);	} else {		err = AEDuplicateDesc(&temp.mDesc, &destination.mDesc);		ThrowIfOSErr_(err);	}	err = AEPutParamDesc(&doerAppleEvent.mDesc, keyAEInsertHere, &destination.mDesc);	ThrowIfOSErr_(err);	action->SetRedoAE(doerAppleEvent.mDesc);	//	ее	Make undoer event	UAppleEventsMgr::MakeAppleEvent(kAECoreSuite, kAEDelete, undoerAppleEvent.mDesc);	//	keyDirectObject	action->UndoAESetKeyFed(keyDirectObject);	action->SetUndoAE(undoerAppleEvent.mDesc);	//	ее	Make post undoer event	DescType	position;	UAEDesc::ParamDescFromDesc(destination.mDesc, keyAEPosition, typeEnumeration, &temp2.mDesc);	UExtractFromAEDesc::TheEnum(temp2.mDesc, position);	if (position == kAEReplace) {		StAEDescriptor	oldDestProps;		FlavorType		desiredFlavor;				UAppleEventsMgr::MakeAppleEvent(kAECoreSuite, kAECreateElement, postUndoerAE.mDesc);		//	keyAEData		//		optional -- uses keyAEPropData				//	keyAEPropData		err = AECreateList(NULL, 0, true, &oldDestProps.mDesc);		ThrowIfOSErr_(err);		DragTask->mReceiver->GetImportantAEProperties(oldDestProps.mDesc);		err = AEPutParamDesc(&postUndoerAE.mDesc, keyAEPropData, &oldDestProps.mDesc);				//	keyAEInsertHere		action->PostUndoAESetKeyFed(keyAEInsertHere, keyAEInsertHere);				//	keyAEObjectClass		desiredFlavor = DragTask->mReceiver->GetModelKind();		err = AEPutParamPtr(&postUndoerAE.mDesc, keyAEObjectClass, typeType, &desiredFlavor, sizeof(desiredFlavor));		ThrowIfOSErr_(err); 		action->SetPostUndoAE(postUndoerAE.mDesc);	}	return action;}LSemanticAction *	LDataDragEventHandler::MakeMoveTask(void){	LAESemanticAction	*action = NULL;	StAEDescriptor	source,					destination,					destinationPreData,					doerAppleEvent,					undoerAppleEvent,					postUndoerAE,					temp,					temp2;	OSErr			err;	if (DragTask == NULL)		Throw_(paramErr);	if (DragTask->mDragTube == NULL)		Throw_(paramErr);	if (DragTask->mReceiver == NULL)		Throw_(paramErr);	if (DragTask->mDragRef == NULL)		Throw_(paramErr);	//	ее	Make the "semantic action"	action = new LAEMoveAction(STRx_RedoDragDescriptions, str_DragMove);	action->SetSelection(mSelection);	//	Get source descriptor	DragTask->mDragTube->GetFlavorAsDesc(typeObjectSpecifier, &source.mDesc);		//	Get destination descriptor -- the drop location	err = GetDropLocation(DragTask->mDragRef, &destination.mDesc);	ThrowIfOSErr_(err);	Assert_(destination.mDesc.descriptorType != typeNull);		//	ее	Make doer copy event	UAppleEventsMgr::MakeAppleEvent(kAECoreSuite, kAEMove, doerAppleEvent.mDesc);		//	keyDirectObject	err = AEPutParamDesc(&doerAppleEvent.mDesc, keyDirectObject, &source.mDesc);	ThrowIfOSErr_(err);	//	keyAEInsertHere	Assert_(destination.mDesc.descriptorType == typeInsertionLoc);	err = AEPutParamDesc(&doerAppleEvent.mDesc, keyAEInsertHere, &destination.mDesc);	ThrowIfOSErr_(err);	action->SetRedoAE(doerAppleEvent.mDesc);	//	ее	Make undoer event	UAppleEventsMgr::MakeAppleEvent(kAECoreSuite, kAEMove, undoerAppleEvent.mDesc);	//	keyDirectObject	//		&	//	keyAEInsertHere	action->UndoAESetKeyFed(keyDirectObject);	action->SetUndoAE(undoerAppleEvent.mDesc);	//	ее	Make post undoer event	DescType	position;	UAEDesc::ParamDescFromDesc(destination.mDesc, keyAEPosition, typeEnumeration, &temp2.mDesc);	UExtractFromAEDesc::TheEnum(temp2.mDesc, position);	if (position == kAEReplace) {		StAEDescriptor	oldDestProps;		FlavorType		desiredFlavor;				UAppleEventsMgr::MakeAppleEvent(kAECoreSuite, kAECreateElement, postUndoerAE.mDesc);		//	keyAEData		//		optional -- uses keyAEPropData				//	keyAEPropData		err = AECreateList(NULL, 0, true, &oldDestProps.mDesc);		ThrowIfOSErr_(err);		DragTask->mReceiver->GetImportantAEProperties(oldDestProps.mDesc);		err = AEPutParamDesc(&postUndoerAE.mDesc, keyAEPropData, &oldDestProps.mDesc);				//	keyAEInsertHere		action->PostUndoAESetKeyFed(keyAEInsertHere, keyAEInsertHere);				//	keyAEObjectClass		desiredFlavor = DragTask->mReceiver->GetModelKind();		err = AEPutParamPtr(&postUndoerAE.mDesc, keyAEObjectClass, typeType, &desiredFlavor, sizeof(desiredFlavor));		ThrowIfOSErr_(err); 		action->SetPostUndoAE(postUndoerAE.mDesc);	}	return action;}LSemanticAction *	LDataDragEventHandler::MakeOSpecTask(void){	LAESemanticAction	*rval = NULL;		ThrowIfNULL_(rval);	return rval;}	LSemanticAction *	LDataDragEventHandler::MakeLinkTask(void){	LAESemanticAction	*rval = NULL;		ThrowIfNULL_(rval);	return rval;}