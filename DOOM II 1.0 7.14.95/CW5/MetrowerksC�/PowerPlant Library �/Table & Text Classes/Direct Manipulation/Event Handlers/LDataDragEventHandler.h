//	===========================================================================//	LDataDragEventHandler.h			©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma	once#include	<LDragEventHandler.h>#include	<LDragAndDrop.h>#include	<LDataDragTask.h>class	LSelectableItem;class	LSemanticAction;class	LDataTube;class	LDataDragEventHandler			:	public LDragEventHandler			,	public LDropArea{private:						LDataDragEventHandler();	//	Parameters requiredpublic:				//	Maintenance						LDataDragEventHandler(LSelection *inSelection, LSemanticUndoer *inUndoer);	virtual				~LDataDragEventHandler();	virtual	void		Reset(void);	virtual LDataDragTask *	MakeDragTask(LDataDragEventHandler *inHandler, Boolean inHandlerIsSource = false);					//	New features -- data dragging	virtual	void		DataDragDo(void);	virtual	DataDragT	FindDragSemantic(void);//	virtual	DataDragT	FindDataDragType(void);						//	DragFunc's//	virtual void		DoFactoredDataReceive(void);	//	dataDragFunc_Receive//	virtual void		DoFactoredDataDrop(void);		//	dataDragFunc_OSpecDrop//	virtual void		DoFactoredDataDrag(void);		//	dataDragFunc_Drag						//	Receiving handlers	virtual void		DataDragMoveIn(void);	virtual void		DataDragMoveOut(void);	virtual void		DataDragTrackMove(void);//	virtual Boolean		DataDragCanReceive(void);					//	Drag action creation	virtual	LSemanticAction *	MakeCreateTask(void);	virtual	LSemanticAction *	MakeCopyTask(void);	virtual	LSemanticAction *	MakeMoveTask(void);	virtual	LSemanticAction *	MakeLinkTask(void);	virtual	LSemanticAction *	MakeOSpecTask(void);protected:				//	Implementation	virtual void		SetMouseBounds(const Rect &inBounds);	virtual void		NoteDragStart(void);	virtual LSelectableItem *	OverItemSelf(Point inWhere);	virtual Boolean		PtInBoundaryArea(Point inWhere);	virtual void		PreScroll(Point inVector);	virtual void		PostScroll(Point inVector);				//	Implementation/linkage -- LDropArea	virtual Boolean		PointInDropArea(Point inGlobalPt);	virtual void		CheckDragRef(DragReference inDragRef);	virtual void		DoDragSendData(FlavorType inFlavor,								ItemReference inItemRef,								DragReference inDragRef);	virtual void		DoDragReceive(DragReference inDragRef);	virtual Boolean		DragIsAcceptable(DragReference inDragRef);	virtual void		EnterDropArea(DragReference inDragRef,								Boolean inDragHasLeftSender);	virtual void		LeaveDropArea(DragReference inDragRef);	virtual void		InsideDropArea(DragReference inDragRef);	virtual void		FocusDropArea(void);	virtual void		HiliteDropArea(DragReference inDragRef);	static	DragSendDataUPP			sDragSendDataUPP;	static	Boolean					sPreScrollWasHilited;	//	static	LDataDragTask			*sDragTask;				//	Perhaps more of these could be static.//	DragReference			mDragRef;					//	Drag state info contained herein	LSelectableItem			*mReceiver;	LSelectableItem			*mPossibleReceiver;//	Boolean					mHandlerStartedDrag;	Int32					mPreDragState;};enum {	evtl_DataDragEventHandlerNextState = evtl_DragEventHandlerNextState};