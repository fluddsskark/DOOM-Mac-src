//	===========================================================================//	LSelectionEventHandler.h		©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma	once#include	<LEventHandler.h>class	LSelection;class	LManipulator;class	LSelectableItem;//	Perhaps associated functionality of these will end up elsewhere.class	LSemanticAction;class	LSemanticUndoer;class	LSelectionEventHandler			:	public LEventHandler{private:						LSelectionEventHandler();	//	Must have inSelectionpublic:				//	Maintenance						LSelectionEventHandler(LSelection *inSelection, LSemanticUndoer *inUndoer);	virtual				~LSelectionEventHandler();	virtual	void		Reset(void);						virtual Boolean		GetAllowSingleGestureDrag(void);	virtual void		SetAllowSingleGestureDrag(Boolean inValue);				//	New features	virtual void		SelectSimple(void);	virtual void		SelectContinuous(void);	virtual void		SelectDiscontinuous(void);	virtual void		PostAction(LSemanticAction *inAction);	virtual	void		ClearAction(void);					//	New features (override equivalent methods from LSelectHandlerView instead)	virtual void		NoteOverNewThing(LManipulator *inThing);	virtual void		NoteOverNewThingSelf(LManipulator *inThing);	virtual LManipulator *		OverManipulator(Point inWhere);	virtual LSelection *		OverSelection(Point inWhere);	virtual LSelectableItem *	OverItem(Point inWhere);	virtual LManipulator *		OverManipulatorSelf(Point inWhere);	virtual LSelection *		OverSelectionSelf(Point inWhere);	virtual LSelectableItem *	OverItemSelf(Point inWhere);				//	Implementationprotected:	virtual Boolean		OverDifferentThing(							const Point		inWhere,							LManipulator	*inOldThing,							LManipulator	**outNewThing);	virtual void		SetEvtThing(LManipulator *inThing);	virtual void		NoteNthClick(Int16 inClickCount, Point inWhere);	virtual void		MouseMove(void);	virtual void		MouseUp(void);	virtual void		CheckCursor(void);				//	New data members	Boolean				mAllowSingleGestureMove;	//	May be changed as needed.	LSelection			*mSelection;	LManipulator		*mEvtThing;			//	Highest priority thing from...	LManipulator		*mEvtManipulator;	//		(OverDifferentThing() gives priority)	LSelection			*mEvtSelection;		//		redundant w/ mSelection above?	LSelectableItem		*mEvtItem;	Boolean				mSelectionCanMove;		LSemanticUndoer		*mUndoer;};enum {	evtl_SelectionEventHandlerNextState = evtl_EventHandlerNextState};