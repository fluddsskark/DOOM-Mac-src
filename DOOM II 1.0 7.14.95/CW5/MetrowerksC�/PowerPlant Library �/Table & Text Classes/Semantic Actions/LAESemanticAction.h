//	===========================================================================//	LAESemanticAction.h				©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma once#include	<LSemanticAction.h>#include	<UAppleEventsMgr.h>#include	<AERegistry.h>class	LAESemanticAction			:	public LSemanticAction{private:						LAESemanticAction();	//	Parameters requiredpublic:				//	Maintenance / initialization						LAESemanticAction(							ResIDT			inRedoDescriptionResource,							Int16			inDescriptionIndex);	virtual				~LAESemanticAction();	virtual void		SetRecordOnlyFinalState(Boolean inRecordOnlyFinalState);	virtual void		Finalize(void);	virtual void		SetRedoAE(AEEventClass inEventClass, AEEventID inEventID);	virtual void		SetRedoAE(const AppleEvent &inAppleEvent);	virtual void		RedoAEAdd(AEKeyword theAEKeyword, const AEDesc &inDesc);	virtual void		SetUndoAE(AEEventClass inEventClass, AEEventID inEventID, Boolean inFeedUndoWithRedoReply = false);	virtual void		SetUndoAE(const AppleEvent &inAppleEvent, Boolean inFeedUndoWithRedoReply = false);	virtual void		UndoAEAdd(AEKeyword theAEKeyword, const AEDesc &inDesc);	virtual void		UndoAESetKeyFed(DescType inKey, DescType inFromReplyKey = keyAEResult);	virtual void		SetPostUndoAE(const AppleEvent &inAppleEvent);	virtual void		PostUndoAESetKeyFed(DescType inKey, DescType inFromReplyKey = keyAEResult);				//	Implementation	virtual void		RedoSelf(void);	virtual void		UndoSelf(void);	virtual Boolean		CanRedo(void) const;	virtual Boolean		CanUndo(void) const;		virtual	void		GetReplyDesc(AEDesc *outDesc);protected:				//	Implementation	virtual	void		SendAppleEvent(AppleEvent &inAppleEvent, AESendMode inSendModifiers = 0);	virtual void		FixSelectionWReply(DescType inSelectionModifier);					//	Data members	AppleEvent			mRedoEvent;				//	AE that performs or redoes the action.	AppleEvent			mUndoEvent;				//	AE that undoes mRedoEvent.	AppleEvent			mPostUndoEvent;			//	AE that executes of mUndoEvent	StAEDescriptor		mReply;					//	Reply from last AE.	DescType			mUndoAEKeyFed;			//	The undo key parameter being fed by the redo AE.												//		(typeNull if none).	DescType			mFromReplyKey;			//	Key from reply fed into Undo AE.	DescType			mPostUndoAEKeyFed;	DescType			mPostFromReplyKey;	Boolean				mRecordOnlyFinalState;};class	LAEMoveAction			:	public LAESemanticAction{private:						LAEMoveAction();	//	Parameters requiredpublic:				//	Maintenance / initialization / implementation						LAEMoveAction(							ResIDT			inRedoDescriptionResource,							Int16			inDescriptionIndex);	virtual				~LAEMoveAction();	virtual void		RedoSelf(void);};