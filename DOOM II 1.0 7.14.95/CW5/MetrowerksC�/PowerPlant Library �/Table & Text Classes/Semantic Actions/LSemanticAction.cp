// ===========================================================================//	LSemanticAction.cp			©1994 Metrowerks Inc. All rights reserved.// ===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include	<PP_Prefix.h>#include	"LSemanticAction.h"#include	<UAppleEventsMgr.h>#include	<String_Utils.h>#include	<AERegistry.h>#include	<LSelection.h>LSemanticAction::LSemanticAction(){	Assert_(false);}LSemanticAction::LSemanticAction(	ResIDT		inRedoDescriptionResource,	Int16		inDescriptionIndex)/*	InRedoDescriptionResource is the resource id of the STR# resource containing	the list "Redo ...." descriptions.  By convention, the 	inRedoDescriptionResource+1 STR# resource contains the "Undo ..." list of	descriptions.*/{	mIsDone = false;	mSelection = NULL;	mRedoSelectionModifier = typeNull;	mUndoSelectionModifier = typeNull;		mDescriptionResource = inRedoDescriptionResource;	mDescriptionIndex = inDescriptionIndex;}LSemanticAction::~LSemanticAction(){}void	LSemanticAction::SetSelection(	LSelection	*inSelection,	DescType	inRedoSelectionModifier,	DescType	inUndoSelectionModifier){	mSelection = inSelection;	mRedoSelectionModifier = inRedoSelectionModifier;	mUndoSelectionModifier = inUndoSelectionModifier;}LSelection *	LSemanticAction::GetSelection(void){	return mSelection;}void	LSemanticAction::SetAlreadyDone(Boolean inAlreadyDone){	mIsDone = true;}void	LSemanticAction::Redo(void){	StAEDescriptor	temp;		if (CanRedo()) {		if (mSelection != NULL) {			if (mOriginalSelection.mDesc.descriptorType == typeNull) {							//	must be first time -- record selection in case there's repeated redo/undos				mSelection->GetAEValue(temp.mDesc, mOriginalSelection.mDesc);			} else {							//	Use the previous selection.				mSelection->SetAEValue(mOriginalSelection.mDesc, temp.mDesc);			}		}		RedoSelf();	}		mIsDone = true;}void	LSemanticAction::Undo(void){	if (CanUndo())		UndoSelf();			mIsDone = false;}Boolean	LSemanticAction::CanRedo(void) const{	return	!mIsDone;}Boolean	LSemanticAction::CanUndo(void) const{	return	mIsDone;}void	LSemanticAction::GetDescription(ResIDT *outDescriptionResource, Int16 *outDescriptionIndex) const{	Assert_(outDescriptionResource);	Assert_(outDescriptionIndex);		if (CanRedo())		*outDescriptionResource = mDescriptionResource;	if (CanUndo())		*outDescriptionResource = mDescriptionResource + 1;		*outDescriptionIndex = mDescriptionIndex;}