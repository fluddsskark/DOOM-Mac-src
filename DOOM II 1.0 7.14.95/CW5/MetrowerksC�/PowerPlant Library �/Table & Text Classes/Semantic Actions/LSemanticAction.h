//	===========================================================================//	LSemanticAction.h				©1994 Metrowerks Inc. All rights reserved.//	===========================================================================#pragma once#include	<PP_Prefix.h>#include	<AppleEvents.h>#include	<UAppleEventsMgr.h>//	---------------------------------------------------------------------------//	Undo/Redo menu item descriptions resources://	"Generic" Redo/undo description resource enums//		These are used if the requested resource/index isn't found.enum {	STRx_RedoGenericDescriptions = 46,		//	The Redo STR# resource id.	STRx_UndoGenericDescriptions,			//	The Undo STR# resource id.	str_RedoUndo = 1};//	"Dragging" Redo/undo description resource enumsenum {	STRx_RedoDragDescriptions = 42,			//	The Redo STR# resource id.	STRx_UndoDragDescriptions,				//	The Undo STR# resource id.	str_DragCopy = 1,						//	"Drag Copy"	str_DragMove,							//	"Drag Move"	str_DragDrop							//	"Drop"};	//	"Clipboard" undo description resource enumsenum {	STRx_RedoClipboardDescriptions = 44,	//	The Redo STR# resource id.	STRx_UndoClipboardDescriptions,			//	The Undo STR# resource id.	str_Cut = 1,	str_Copy,	str_Paste,	str_Clear};//	===========================================================================/*	Notes:	SemanticActions are always performed (via Redo) when they're posted.	Thereafter, they can be undone (Undo) and redone (Redo) as appropriate.		If a semantic action has already been done at the time of posting, it is	the responsibility of the poster to appropriately call SetAlreadyDone	before the action is posted.		It is the responsibility of a semantic action to update any associated	selection.*/class	LSelection;class	LSemanticAction {private:						LSemanticAction();	//	Parameters requiredpublic:				//	Maintenance / initialization						LSemanticAction(							ResIDT			inRedoDescriptionResource,							Int16			inDescriptionIndex);	virtual				~LSemanticAction();	virtual void		SetAlreadyDone(Boolean inIsAlreadyDone);	virtual void		SetSelection(							LSelection	*inSelection,							DescType	inRedoSelectionModifier = typeNull,							DescType	inUndoSelectionModifier = typeNull);	virtual LSelection *						GetSelection(void);	virtual void		Finalize(void) {delete this;};					//	New features	virtual void		Redo(void);		//	Also functions as "Do"	virtual void		Undo(void);						//	Override these to actuallly implement redo/undo...	virtual void		RedoSelf(void) = 0;	virtual void		UndoSelf(void) = 0;	virtual Boolean		CanRedo(void) const;	virtual Boolean		CanUndo(void) const;		virtual void		GetDescription(ResIDT *outDescriptionResouce, Int16 *outDescriptionIndex) const;protected:				//	Data members	ResIDT				mDescriptionResource;	//	STR# resource for undo menu item description	Int16				mDescriptionIndex;		//	Index in resource for undo menu item description	Boolean				mIsDone;				//	Is done or redone?	LSelection			*mSelection;	DescType			mRedoSelectionModifier;	//	Ie. to place selection kAEAfter reply.	DescType			mUndoSelectionModifier;		StAEDescriptor		mOriginalSelection;};