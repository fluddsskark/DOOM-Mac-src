// ===========================================================================//	LDragAndDrop.h					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include <PP_Prefix.h>#ifndef __DRAG__#include <Drag.h>#endifclass	LPane;class	LDynamicArray;class	LDropArea {public:					LDropArea(WindowPtr inWindow);	virtual			~LDropArea();		virtual Boolean	PointInDropArea(Point inGlobalPt) = 0;	virtual void	FocusDropArea();						static Boolean	DragAndDropIsPresent();protected:	WindowPtr	mDragWindow;	Boolean		mCanAcceptCurrentDrag;	Boolean		mIsHilited;	virtual void	HiliteDropArea(DragReference inDragRef);		virtual Boolean	DragIsAcceptable(DragReference inDragRef);	virtual Boolean	ItemIsAcceptable(DragReference inDragRef,								ItemReference inItemRef);	virtual void	EnterDropArea(DragReference inDragRef,								Boolean inDragHasLeftSender);	virtual void	LeaveDropArea(DragReference inDragRef);	virtual void	InsideDropArea(DragReference inDragRef);		virtual void	DoDragReceive(DragReference inDragRef);	virtual void	ReceiveDragItem(DragReference inDragRef,								DragAttributes inDragAttrs,								ItemReference inItemRef,								Rect &inItemBounds);									virtual void	DoDragSendData(FlavorType inFlavor,								ItemReference inItemRef,								DragReference inDragRef);									virtual void	DoDragInput(Point *ioMouse, Int16 *ioModifiers,								DragReference inDragRef);									virtual void	DoDragDrawing(DragRegionMessage inMessage,								RgnHandle inShowRgn, Point inShowOrigin,								RgnHandle inHideRgn, Point inHideOrigin,								DragReference inDragRef);									// === Static Members ===									static	DragTrackingHandlerUPP	sDragTrackingProc;	static	DragReceiveHandlerUPP	sDragReceiveProc;	static	LDynamicArray			*sDropAreaList;	static	LDropArea				*sCurrentDropArea;	static	Boolean					sDragHasLeftSender;	static void		InstallHandlers();		static void		AddDropArea(LDropArea *inDropArea,								WindowPtr inMacWindow);	static void		RemoveDropArea(LDropArea *inDropArea,								WindowPtr inMacWindow);	static LDropArea*	FindDropArea(WindowPtr inMacWindow,								Point inGlobalPoint,								DragReference inDragRef);									static void		InTrackingWindow(WindowPtr inMacWindow,								DragReference inDragRef);		static pascal OSErr HandleDragTracking(DragTrackingMessage inMessage,								WindowPtr inMacWindow, void *inRefCon,								DragReference inDragRef);									static pascal OSErr	HandleDragReceive(WindowPtr inMacWindow,								void *inRefCon, DragReference inDragRef);									static pascal OSErr	HandleDragSendData(FlavorType inFlavor,								void *inRefCon, ItemReference inItemRef,								DragReference inDragRef);									static pascal OSErr	HandleDragInput(Point *ioMouse, Int16 *ioModifiers,								void *inRefCon, DragReference inDragRef);									static pascal OSErr	HandleDragDrawing(DragRegionMessage inMessage,								RgnHandle inShowRgn, Point inShowOrigin,								RgnHandle inHideRgn, Point inHideOrigin,								void *inRefCon, DragReference inDragRef);};typedef struct	SDropAreaEntry {	LDropArea	*theDropArea;	WindowPtr	theMacWindow;} SDropAreaEntry, **SDropAreaEntryH;class	LDragAndDrop : public LDropArea {public:					LDragAndDrop(WindowPtr inMacWindow, LPane *inPane);						virtual Boolean	PointInDropArea(Point inGlobalPt);	virtual void	FocusDropArea();	protected:	LPane	*mPane;		virtual void	HiliteDropArea(DragReference inDragRef);};					