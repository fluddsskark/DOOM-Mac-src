// ===========================================================================//	LListener.cp					й1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	A mix-in class that works with LBroadcaster class to implement//	dependencies. A Listener receives messages from its Broadcasters.////	ее Public Interface//	е Construction://		LListener();//			Default constructor. Listener has no Broadcasters////	е Linking to Broadcasters://		Link a Listener to a Broadcaster by sending an AddListener message//		to a Broadcaster. [see LBroadcaster]////	е Responding to Messages://		void	ListenToMessage(MessageT inMessage, void *ioParam);//			Derived classes *must* override this function (it is a//			pure virtual function in LListener).//			LLBroadcaster::BroadcastMessage calls this function.////		Example Implementation:////		{//			switch (inMessage) {////				case msg_NameChanged:	// ioParam is a StringPtr//					DoNameChanged((StringPtr) ioParam);//					break;////				case msg_NewValue:		// ioParam is a long*//					DoNewValue(*(long *) ioParam);//					break;//			}//		}////		The programmer can define message constants and associated//		meanings for the ioParam parameter.////		A Broadcaster always sends an msg_BroadcasterDied message, with//		a pointer to itself as the parameter, before it is deleted.////	е Listening State://		void	StopListening();//		void	StartListening();//		Boolean	IsListening();//			Turn off/on, Inspect listening state. A Listener that is//			not listening does not receive messages from its Broadcasters.//			Use Stop/Start Listening to temporarily alter dependencies.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LListener.h>#include <LBroadcaster.h>#include <LList.h>#include <LListIterator.h>// ---------------------------------------------------------------------------//		е LListener// ---------------------------------------------------------------------------//	Default constructorLListener::LListener(){	mIsListening = true;}// ---------------------------------------------------------------------------//		е LListener(const LListener&)// ---------------------------------------------------------------------------//	Copy constructor////	Makes a shallow copy; Broadcaster links are not copied.LListener::LListener(	const LListener	&inOriginal){	mIsListening = inOriginal.mIsListening;}// ---------------------------------------------------------------------------//		е ~LListener// ---------------------------------------------------------------------------//	DestructorLListener::~LListener(){	LListIterator iterator(mBroadcasters, iterate_FromStart);	LBroadcaster*	theBroadcaster;	while (iterator.Next(&theBroadcaster)) {		theBroadcaster->RemoveListener(this);	}}// ---------------------------------------------------------------------------//		е AddBroadcaster// ---------------------------------------------------------------------------//	Add a Broadcaster to a Listener////	You should not call this function directly. LBroadcaster::AddListener//	will call this function//		Right:	theBroadcaster->AddListener(theListener);//		Wrong:	theListener->AddBroadcaster(theBroadcaster);voidLListener::AddBroadcaster(	LBroadcaster	*inBroadcaster){	mBroadcasters.InsertItemsAt(1, arrayIndex_Last, &inBroadcaster);}// ---------------------------------------------------------------------------//		е RemoveBroadcaster// ---------------------------------------------------------------------------//	Remove a Broadcaster from a Listener////	You should not call this function directly. LBroadcaster::RemoveListener//	will call this function//		Right:	theBroadcaster->RemoveListener(theListener);//		Wrong:	theListener->RemoveBroadcaster(theBroadcaster);voidLListener::RemoveBroadcaster(	LBroadcaster	*inBroadcaster){	mBroadcasters.Remove(&inBroadcaster);}// ---------------------------------------------------------------------------//		е StartListening// ---------------------------------------------------------------------------//	Turn on listeningvoidLListener::StartListening(){	mIsListening = true;}// ---------------------------------------------------------------------------//		е StartListening// ---------------------------------------------------------------------------//	Turn off listening////	Listener will not receive messages from BroadcastersvoidLListener::StopListening(){	mIsListening = false;}// ---------------------------------------------------------------------------//		е IsListening// ---------------------------------------------------------------------------//	Return whether Listener is receiving messagesBooleanLListener::IsListening() const{	return mIsListening;}