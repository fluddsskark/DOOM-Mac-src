// ===========================================================================//	LDragTask.cp					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Class which encapsulates a single drag action initiated using the//	Drag Manager. Normally, you will use this class in conjunction//	with the LDragAndDrop class.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LDragTask.h>// ---------------------------------------------------------------------------//		¥ LDragTask// ---------------------------------------------------------------------------//	Constructor////	A DragTask must be associated with a Toolbox mouse down EventRecordLDragTask::LDragTask(	const EventRecord	&inEventRecord)		: mEventRecord(inEventRecord){	InitDragTask();}// ---------------------------------------------------------------------------//		¥ LDragTask// ---------------------------------------------------------------------------//	Constructor for dragging a single, rectangular item////	The inItemRect is in the local coordinates of the current port, so you//	may need to call SetPort (or FocusDraw) beforehand.LDragTask::LDragTask(	const EventRecord	&inEventRecord,	const Rect			&inItemRect,	ItemReference		inItemRef,	FlavorType			inFlavor,	void				*inDataPtr,	Size				inDataSize,	FlavorFlags			inFlags)		: mEventRecord(inEventRecord){	InitDragTask();	::AddDragItemFlavor(mDragRef, inItemRef, inFlavor, inDataPtr, inDataSize,							inFlags);		Rect	globalRect = inItemRect;	::LocalToGlobal(&topLeft(globalRect));	::LocalToGlobal(&botRight(globalRect));	AddRectDragItem(inItemRef, globalRect);		::TrackDrag(mDragRef, &mEventRecord, mDragRegion);}voidLDragTask::InitDragTask(){	mDragRegion = ::NewRgn();	ThrowIfNil_(mDragRegion);		OSErr	err = ::NewDrag(&mDragRef);	ThrowIfOSErr_(err);}// ---------------------------------------------------------------------------//		¥ ~LDragTask// ---------------------------------------------------------------------------//	DestructorLDragTask::~LDragTask(){	if (mDragRegion != nil) {		::DisposeRgn(mDragRegion);	}	::DisposeDrag(mDragRef);}DragReferenceLDragTask::GetDragReference(){	return mDragRef;}RgnHandleLDragTask::GetDragRegion(){	return mDragRegion;}// ---------------------------------------------------------------------------//		¥ DoDrag// ---------------------------------------------------------------------------//	Perform a DragTask////	This function calls other member functions to add items to the drag//	and build the drag region, then calls the Drag Mananger to track//	the drag. You will not normally override this function.voidLDragTask::DoDrag(){	AddFlavors(mDragRef);	MakeDragRegion(mDragRef, mDragRegion);	::TrackDrag(mDragRef, &mEventRecord, mDragRegion);}// ---------------------------------------------------------------------------//		¥ AddFlavors// ---------------------------------------------------------------------------//	Add flavored items to the DragTask.////	If you use the short form of the Constructor (EventRecord only), you//	must override this function to add items to the DragTaskvoidLDragTask::AddFlavors(	DragReference	inDragRef){}// ---------------------------------------------------------------------------//		¥ MakeDragRegion// ---------------------------------------------------------------------------//	Build the region outlining the items to be dragged////	If you use the short form of the Constructor (EventRecord only), you//	must override this function to specify the drag region for each item//	in the DragTask.voidLDragTask::MakeDragRegion(	DragReference	inDragRef,	RgnHandle		inDragRegion){}// ---------------------------------------------------------------------------//		¥ AddRectDragItem// ---------------------------------------------------------------------------//	Utilitly function for adding a rectangular item to the Drag////	The inItemRect must be in Global coordinatesvoidLDragTask::AddRectDragItem(	ItemReference	inItemRef,	const Rect		&inItemRect){	RgnHandle	outerRgn = ::NewRgn();	// Make region containing item	::RectRgn(outerRgn, &inItemRect);		RgnHandle	innerRgn = ::NewRgn();	// Carve out interior of region so	::CopyRgn(outerRgn, innerRgn);		//   that it's just a one-pixel thick	::InsetRgn(innerRgn, 1, 1);			//   outline of the item rectangle	::DiffRgn(outerRgn, innerRgn, outerRgn);	::DisposeRgn(innerRgn);											// Accumulate this item in our										//   total drag region	::UnionRgn(outerRgn, mDragRegion, mDragRegion);											// Tell Drag Manager about this item	::SetDragItemBounds(mDragRef, inItemRef, &(**outerRgn).rgnBBox);		::DisposeRgn(outerRgn);}