// ===========================================================================//	LCommander.h					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include <LAttachable.h>#include <LList.h>#ifndef __EVENTS__#include <Events.h>#endifclass	LCommander : public virtual LAttachable {public:						LCommander();						LCommander(const LCommander &inOriginal);						LCommander(LCommander *inSuper);	virtual				~LCommander();		virtual void		SetSuperCommander(LCommander *inSuper);	LCommander*			GetSuperCommander();	virtual Boolean		AllowSubRemoval(LCommander *inSub);	virtual Boolean		AttemptQuit(long inSaveOption);		static LCommander*	GetTarget();	static Boolean		SwitchTarget(LCommander *inNewTarget);	virtual void		RestoreTarget();	Boolean				IsTarget() const;	Boolean				IsOnDuty() const;		virtual LCommander*	GetLatentSub();	virtual void		SetLatentSub(LCommander *inSub);		virtual Boolean		ProcessCommand(CommandT inCommand, void *ioParam = nil);	virtual Boolean		ObeyCommand(CommandT inCommand, void *ioParam = nil);	virtual void		ProcessCommandStatus(CommandT inCommand,							Boolean &outEnabled, Boolean &outUsesMark,							Char16 &outMark, Str255 outName);	virtual void		FindCommandStatus(CommandT inCommand,							Boolean &outEnabled, Boolean &outUsesMark,							Char16 &outMark, Str255 outName);		virtual Boolean		ProcessKeyPress(const EventRecord &inKeyEvent);	virtual Boolean		HandleKeyPress(const EventRecord &inKeyEvent);		static LCommander*	GetDefaultCommander();	static void			SetDefaultCommander(LCommander *inCommander);		static Boolean		IsSyntheticCommand(CommandT inCommand,							ResIDT &outMenuID, Int16 &outMenuItem);	protected:	static LCommander	*sTarget;	static LCommander	*sDefaultCommander;		LCommander			*mSuperCommander;	LList				mSubCommanders;	ETriState			mOnDuty;	virtual void		AddSubCommander(LCommander *inSub);	virtual void		RemoveSubCommander(LCommander *inSub);		virtual Boolean		AttemptQuitSelf(Int32 inSaveOption);		static void			SetTarget(LCommander *inNewTarget);		virtual Boolean		AllowTargetSwitch(LCommander *inNewTarget);	virtual void		BeTarget();	virtual void		DontBeTarget();	void				TakeChainOffDuty(const LCommander *inUpToCmdr);	void				PutChainOnDuty();		virtual void		PutOnDuty();	virtual void		TakeOffDuty();	private:	void				InitCommander(LCommander *inSuper);};typedef struct	SCommandStatus {	Boolean			*enabled;	Boolean			*usesMark;	Char16			*mark;	unsigned char	*name;	CommandT		command;} SCommandStatus, *SCommandStatusP;