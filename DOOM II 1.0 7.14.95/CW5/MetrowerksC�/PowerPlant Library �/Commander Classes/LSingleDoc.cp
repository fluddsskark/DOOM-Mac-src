// ===========================================================================//	LSingleDoc.cp					©1994 Metrowerks Inc. All rights reserved.// ===========================================================================#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <LSingleDoc.h>#include <LWindow.h>#include <LFile.h>#include <String_Utils.h>#include <PP_Messages.h>#ifndef __AEREGISTRY__#include <AERegistry.h>#endif#ifndef __AEOBJECTS__#include <AEObjects.h>#endif#ifndef __AEOBJECTPACKING__#include <AEPackObject.h>#endif// ---------------------------------------------------------------------------//		¥ LSingleDoc// ---------------------------------------------------------------------------//	Default constructor//LSingleDoc::LSingleDoc(){	mWindow = nil;	mFile = nil;}// ---------------------------------------------------------------------------//		¥ LSingleDoc(LCommander*)// ---------------------------------------------------------------------------//	Constructor, specifying SuperCommanderLSingleDoc::LSingleDoc(	LCommander	*inSuper)		: LDocument(inSuper){	mWindow = nil;	mFile = nil;}// ---------------------------------------------------------------------------//		¥ ~LSingleDoc// ---------------------------------------------------------------------------//	DestructorLSingleDoc::~LSingleDoc(){	delete mWindow;	delete mFile;}BooleanLSingleDoc::AllowSubRemoval(	LCommander	*inSub){	if (inSub == mWindow) {				// Check if the current AppleEvent is a "close" event			// sent to the Window. If so, we handle it as if the			// "close" event were sent to the Document			 		AppleEvent	currentEvent;		DescType	theType;		DescType	theAttr = typeNull;		Size		theSize;		::AEGetTheCurrentEvent(&currentEvent);		if (currentEvent.descriptorType != typeNull) {			::AEGetAttributePtr(&currentEvent, keyEventClassAttr,				typeType, &theType, &theAttr, sizeof(DescType),				&theSize);			if (theAttr == kAECoreSuite) {				::AEGetAttributePtr(&currentEvent, keyEventIDAttr,					typeType, &theType, &theAttr, sizeof(DescType),					&theSize);				if (theAttr == kAEClose) {					DoAEClose(currentEvent);					return false;				}			}		}				AttemptClose(true);			// A non-AppleEvent close		return false;	} else {		return true;	}}// ---------------------------------------------------------------------------//		¥ GetDescriptor// ---------------------------------------------------------------------------//	Pass back the name of a DocumentStringPtrLSingleDoc::GetDescriptor(	Str255	outDescriptor) const{	if (mFile != nil) {				// Document name is same as its File		FSSpec	fileSpec;		mFile->GetSpecifier(fileSpec);		CopyPStr(fileSpec.name, outDescriptor);		} else if (mWindow != nil) {	// No File, use name of its Window		mWindow->GetDescriptor(outDescriptor);		} else {						// No File and No Window		outDescriptor[0] = 0;		//   Document name is empty string	}		return outDescriptor;}