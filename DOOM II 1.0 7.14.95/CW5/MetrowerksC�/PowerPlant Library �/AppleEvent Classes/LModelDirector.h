// ===========================================================================//	LModelDirector.h				©1993 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include <PP_Prefix.h>#ifndef __APPLEEVENTS__#include <AppleEvents.h>#endifclass LModelObject;class	LModelDirector {public:						LModelDirector();						LModelDirector(LModelObject *inDefaultModel);	virtual				~LModelDirector();		virtual void		InstallCallBacks();						virtual void		HandleAppleEvent(							const AppleEvent	&inAppleEvent,							AppleEvent			&outReply,							Int32				inRefCon);												virtual void		HandleOpenOrPrintEvent(							const AppleEvent	&inAppleEvent,							AppleEvent			&outReply,							Int32				inRefCon);												virtual void		HandleCreateElementEvent(							const AppleEvent	&inAppleEvent,							AppleEvent			&outReply,							Int32				inRefCon);								virtual void		ProcessTokenizedEvent(							const AppleEvent	&inAppleEvent,							AEDesc				&inDirectObjToken,							AEDesc				&outResult,							AppleEvent			&outReply,							Int32				inRefCon);												virtual void		AccessModelObject(							const DescType	inDesiredClass,							const AEDesc	&inContainerToken,							const DescType	inContainerClass,							const DescType	inKeyForm,							const AEDesc	&inKeyData,							AEDesc&			outToken,							long			inRefCon);												virtual void		AccessModelObjectList(							const DescType	inDesiredClass,							const AEDesc	&inContainerToken,							const DescType	inContainerClass,							const DescType	inKeyForm,							const AEDesc	&inKeyData,							AEDesc&			outToken,							long			inRefCon);												virtual void		AccessModelProperty(							const DescType	inDesiredClass,							const AEDesc	&inContainerToken,							const DescType	inContainerClass,							const DescType	inKeyForm,							const AEDesc	&inKeyData,							AEDesc			&outToken,							long			inRefCon);												virtual void		AccessModelPropertyList(							const DescType	inDesiredClass,							const AEDesc	&inContainerToken,							const DescType	inContainerClass,							const DescType	inKeyForm,							const AEDesc	&inKeyData,							AEDesc			&outToken,							long			inRefCon);								virtual void		DisposeToken(							AEDesc& inToken);		virtual void		CompareObjects(							DescType		inComparisonOperator,							const AEDesc	&inBaseObject,							const AEDesc	&inCompareObjectOrDesc,							Boolean			&outResult);								virtual void		CountObjects(							DescType		inDesiredClass,							DescType		inContainerClass,							const AEDesc	&inContainer,							Int32			&outCount);	protected:	static LModelDirector*	sModelDirector;	static pascal OSErr	AppleEventHandler(							const AppleEvent	*inAppleEvent,							AppleEvent			*outAEReply,							Int32				inRefCon);	static pascal OSErr	OpenOrPrintEventHandler(							const AppleEvent	*inAppleEvent,							AppleEvent			*outAEReply,							Int32				inRefCon);	static pascal OSErr	CreateElementEventHandler(							const AppleEvent	*inAppleEvent,							AppleEvent			*outAEReply,							Int32				inRefCon);											static pascal OSErr	ModelObjectAccessor(							DescType		inDesiredClass,							const AEDesc	*inContainerToken,							DescType		inContainerClass,							DescType		inKeyForm,							const AEDesc	*inKeyData,							AEDesc			*outToken,							long			inRefCon);											static pascal OSErr	ModelObjectListAccessor(							DescType		inDesiredClass,							const AEDesc	*inContainerToken,							DescType		inContainerClass,							DescType		inKeyForm,							const AEDesc	*inKeyData,							AEDesc			*outToken,							long			inRefCon);											static pascal OSErr	ModelPropertyAccessor(							DescType		inDesiredClass,							const AEDesc	*inContainerToken,							DescType		inContainerClass,							DescType		inKeyForm,							const AEDesc	*inKeyData,							AEDesc			*outToken,							long			inRefCon);											static pascal OSErr	ModelPropertyListAccessor(							DescType		inDesiredClass,							const AEDesc	*inContainerToken,							DescType		inContainerClass,							DescType		inKeyForm,							const AEDesc	*inKeyData,							AEDesc			*outToken,							long			inRefCon);								static pascal OSErr	OSLDisposeToken(							AEDesc* inToken);		static pascal OSErr	OSLCompareObjects(							DescType		inComparisonOperator,							const AEDesc	&inBaseObject,							const AEDesc	&inCompareObjectOrDesc,							Boolean			&outResult);								static pascal OSErr	OSLCountObjects(							DescType		inDesiredClass,							DescType		inContainerClass,							const AEDesc	&inContainer,							Int32			&outCount);};