// ===========================================================================//	LModelObject.h					©1993 Metrowerks Inc. All rights reserved.// ===========================================================================#pragma once#include <PP_Prefix.h>#ifndef __APPLEEVENTS__#include <AppleEvents.h>#endifclass	LModelProperty;class	LModelObject {public:							LModelObject();	virtual					~LModelObject();														LModelObject(LModelObject *inSuperModel);						LModelObject*			GetSuperModel();	virtual DescType		GetModelKind() const;		virtual Boolean			IsLazy() const;		virtual	void			AddSubModel(LModelObject *inSubModel);	virtual	void			RemoveSubModel(LModelObject *inSubModel);	virtual Int32			CountSubModels(DescType inModelID) const;		virtual void			GetModelToken(									DescType		inModelID,									DescType		inKeyForm,									const AEDesc	&inKeyData,									AEDesc			&outToken) const;										virtual void			GetSubModelByPosition(									DescType		inModelID,									Int32			inPosition,									AEDesc			&outToken) const;										virtual void			GetSubModelByName(									DescType		inModelID,									Str255			inName,									AEDesc			&outToken) const;										virtual void			GetSubModelByUniqueID(									DescType		inModelID,									const AEDesc	&inKeyData,									AEDesc			&outToken) const;										virtual void			GetModelByRelativePosition(									DescType		inModelID,									OSType			inRelativePosition,									AEDesc			&outToken) const;										virtual void			GetSubModelByComplexKey(									DescType		inModelID,									DescType		inKeyForm,									const AEDesc	&inKeyData,									AEDesc			&outToken) const;										virtual void			GetAllSubModels(									DescType		inModelID,									AEDesc			&outToken) const;										virtual Int32			GetPositionOfSubModel(									DescType			inModelID,									const LModelObject	*inSubModel) const;										virtual Boolean			CompareToModel(									DescType		inComparisonOperator,									LModelObject	*inCompareModel) const;										virtual Boolean			CompareToDescriptor(									DescType		inComparisonOperator,									const AEDesc	&inCompareDesc)										const;										virtual LModelProperty*	GetModelProperty(DescType inProperty);		virtual Boolean			CompareProperty(									DescType		inPropertyID,									DescType		inComparisonOperator,									const AEDesc	&inCompareObjectOrDesc)										const;											virtual void			MakeSpecifier(AEDesc &outSpecifier) const;		virtual void			HandleAppleEvent(									const AppleEvent	&inAppleEvent,									AppleEvent			&outAEReply,									AEDesc				&outResult,									Int32				inAENumber);		virtual LModelObject*	HandleCreateElementEvent(									DescType			inElemClass,									DescType			inInsertPosition,									LModelObject*		inTargetObject,									const AppleEvent	&inAppleEvent,									AppleEvent			&outAEReply);										virtual void			Finalize();		virtual void			GetAEProperty(									DescType		inProperty,									const AEDesc	&inRequestedType,									AEDesc			&outPropertyDesc) const;	virtual void			SetAEProperty(									DescType		inProperty,									const AEDesc	&inValue,									AEDesc			&outAEReply);										  	virtual void			SendSelfAE(									AEEventClass	inEventClass,									AEEventID		inEventID,									Boolean			inExecute);										static LModelObject*	GetDefaultModel();	static void				SetDefaultModel(LModelObject *inModel);	static void				PutInToken(									LModelObject	*inModel,									AEDesc			&outToken);								static LModelObject*	GetModelFromToken(const AEDesc &inToken);											protected:	static LModelObject*	sDefaultModel;	LModelObject*			mSuperModel;		virtual void			MakeSelfSpecifier(									AEDesc		&inSuperSpecifier,									AEDesc		&outSelfSpecifier) const;};typedef struct	SModelToken {	LModelObject	*modelObject;} SModelToken, *SModelTokenP, **SModelTokenH;const	Int32		position_AllSubModels	= -1;const	DescType	type_ModelToken			= 'Toke';