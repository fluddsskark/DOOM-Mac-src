// ===========================================================================//	UExtractFromAEDesc.cp			©1993 Metrowerks Inc. All rights reserved.// ===========================================================================////	Functions for extracting data from AppleEvent Descriptor (AEDesc) records////	### Extractor functions have the same basic structure, so they are//	good candidates for Templates.#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include <UExtractFromAEDesc.h>#ifndef __AEREGISTRY__#include <AERegistry.h>#endif#pragma once off// ---------------------------------------------------------------------------#define		Extractor_Name		TheInt16#define		C_DataType			Int16#define		AE_DataType			typeShortInteger#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheInt32#define		C_DataType			Int32#define		AE_DataType			typeLongInteger#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		ThePoint#define		C_DataType			Point#define		AE_DataType			typeQDPoint#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheRect#define		C_DataType			Rect#define		AE_DataType			typeQDRectangle#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheBoolean#define		C_DataType			Boolean#define		AE_DataType			typeBoolean#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheType#define		C_DataType			OSType#define		AE_DataType			typeType#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheEnum#define		C_DataType			OSType#define		AE_DataType			typeEnumerated#include <AEDescExtractor.t>// ---------------------------------------------------------------------------#undef		Extractor_Name#undef		C_DataType#undef		AE_DataType#define		Extractor_Name		TheRGBColor#define		C_DataType			RGBColor#define		AE_DataType			typeRGBColor#include <AEDescExtractor.t>// ---------------------------------------------------------------------------voidUExtractFromAEDesc::ThePString (	const AEDesc	&inDesc,	Str255			outString){	Handle	dataH;	AEDesc	coerceDesc = {typeNull, nil};		if (inDesc.descriptorType == typeChar) {		dataH = inDesc.dataHandle;		// Descriptor is the type we want		} else {							// Try to coerce to the desired type		if (AECoerceDesc(&inDesc, AE_DataType, &coerceDesc) == noErr) {										// Coercion succeeded			dataH = coerceDesc.dataHandle;		} else {						// Coercion failed			ThrowOSErr_(errAETypeError);		}	}		Int32	strLength = GetHandleSize(dataH);	if (strLength > 255) strLength = 255;	BlockMoveData(*dataH, outString+1, strLength);	outString[0] = strLength;		if (coerceDesc.dataHandle != nil) {		AEDisposeDesc(&coerceDesc);	}}