/*	File:		XTNDInterface.h	Copyright:	© 1984-1993 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef __XTNDINTERFACE__#define __XTNDINTERFACE__#include <Types.h>/*	#include <ConditionalMacros.h>								*//*	#include <MixedMode.h>										*//*		#include <Traps.h>										*/#include <StandardFile.h>/*	#include <Dialogs.h>										*//*		#include <Windows.h>									*//*			#include <Quickdraw.h>								*//*				#include <QuickdrawText.h>						*//*					#include <IntlResources.h>					*//*			#include <Events.h>									*//*				#include <OSUtils.h>							*//*			#include <Controls.h>								*//*				#include <Menus.h>								*//*		#include <TextEdit.h>									*//*	#include <Files.h>											*//*		#include <SegLoad.h>									*//* ÑÑÑÑ Prototypes for XTND system calls are at the end of this file (for THINK C) ÑÑÑÑ *//* ÑÑÑÑ Defines for XTND Version ÑÑÑÑ */#define xtndVersion 2/* ÑÑÑÑ Defines for XTND Gestalt Selector  ÑÑÑÑ */#define gestaltXTNDAttr 'XTND'#define gestaltPPCXTNDPresent 1/* ÑÑÑÑ Defines for file types ÑÑÑÑ */#define xtndTranslatorFileType 'Fltr'/* ÑÑÑÑ Defines for resource types ÑÑÑÑ */#define translatorDescription 'FTYP'#define textImportType 'FLTI'#define textExportType 'FLTE'#define pictImportType 'PFLT'/* ÑÑÑÑ Characteristics values for Flags field in TransDescribe and FTYP ÑÑÑÑ */#define ftypIsSpecial 0x0001#define ftypHasPreferences 0x0002#define ftypNeedsResources 0x0004#define ftypWritesResources 0x0008#define ftypOnlyPreferences 0x0010#define ftypIsLocalized 0x0020/* ÑÑÑÑ Type of translators to be included in list ÑÑÑÑ */#define allowTypeMask 0x00FF#define allowText 0x0001#define allowGraphics 0x0002#define allowDataBase 0x0004#define allowPict 0x0008#define allowOtherTypes 0x0080#define allowAllTypes 0x00FF/* ÑÑÑÑ Use of translators to be included in list ÑÑÑÑ */#define allowUseMask 0xFF00#define allowImport 0x0100#define allowExport 0x0200#define allowOtherUses 0x8000#define allowAllUses 0xFF00/* ÑÑÑÑ Error codes which the XTND System can return ÑÑÑÑ */#define badXTNDVersionErr -9991#define noTransMatchErr -9999/* ÑÑÑÑ Error codes which a translator can return ÑÑÑÑ */#define badImportFileErr 12#define translationCanceledErr 32767/* ÑÑÑÑÑÑ  T Y P E   D E F I N I T I O N S  ÑÑÑÑÑÑ */#ifndef __XTND__typedef pascal short (*XTNDDlgHookProcPtr)(short theItem, DialogPtr theDialog, Ptr theSFParams, Boolean *changedFlag, long unused);enum {	uppXTNDDlgHookProcInfo = kPascalStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(short)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(short)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(DialogPtr)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Boolean*)))		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr XTNDDlgHookUPP;#define CallXTNDDlgHookProc(userRoutine, theItem, theDialog, theSFParams, changedFlag, unused)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppXTNDDlgHookProcInfo, (theItem), (theDialog), (theSFParams), (changedFlag), (unused))#define NewXTNDDlgHookProc(userRoutine)		\		(XTNDDlgHookUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppXTNDDlgHookProcInfo, GetCurrentISA())#elsetypedef XTNDDlgHookProcPtr XTNDDlgHookUPP;#define CallXTNDDlgHookProc(userRoutine, theItem, theDialog, theSFParams, changedFlag, unused)		\		(*(userRoutine))((theItem), (theDialog), (theSFParams), (changedFlag), (unused))#define NewXTNDDlgHookProc(userRoutine)		\		(XTNDDlgHookUPP)(userRoutine)#endif/* ÑÑÑÑ Translator procedure pointer.  Used for calling external code resources ÑÑÑÑ */typedef void (*TransProcPtr)(void *paramBlk);enum {	uppTransProcInfo = kCStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr TransUPP;#define CallTransProc(userRoutine, paramBlk)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppTransProcInfo, (paramBlk))#define NewTransProc(userRoutine)		\		(TransUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppTransProcInfo, GetCurrentISA())#elsetypedef TransProcPtr TransUPP;#define CallTransProc(userRoutine, paramBlk)		\		(*(userRoutine))((paramBlk))#define NewTransProc(userRoutine)		\		(TransUPP)(userRoutine)#endif/* ÑÑÑÑÑÑ TransDescribe and Related Structures ÑÑÑÑÑÑ *//* The MatchInfo data stucture defines a single file type (and possibly creator type)	*//* that a translator can recognize.														*/#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct MatchInfo {	ResType						docCreator;						/* Document creator, eg MACA - MacWrite	*/	ResType						docType;						/* Document type, eg WORD - MacWrite	*/	Boolean						exactMatch;						/* If TRUE, Creator MUST match			*/	Byte						creatorAndTypeMask;				/* Flags telling which bytes of creator & file type matter; creator is bits 0 - 3 and file type is bits 4 - 7	*/};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct MatchInfo MatchInfo;/* The TransDescribe data stucture defines an import/export translator.  There is one	*//* of these (corresponds to the 'FTYP' resource) for every import/export translator.	*/#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct TransDescribe {	short						version;						/* Version of this FTYP (currently 2) */	ResType						translatorType;					/* Type of translator (ie, 'PFLT' for pictures) */	short						codeResID;						/* Resource number of translator code resource */	short						FDIFResID;						/* Resource ID of 'FDIF' (or -1 if none) */	short						numVersBytes;					/* Number of bytes for version check (zero if no check) */	long						versBytesOffSet;				/* Offset into file for version check */	unsigned char				versBytes[16];					/* Byte values we are looking for (max 16) */	short						appWDRefNum;					/* Internal XTND use only - WDRefNum of the directory containing the application */	short						unused1;						/* Reserved for future use - must be zero for this version */	short						pathLength;						/* Internal XTND use only - Number of times this file has been translated */	short						flags;							/* Flags for filter characteristics *//*	bit 0 - set if this filter won't work with All Available *//*	bit 1 - reserved for future use - must be zero for this version *//*	bit 2 - set if this filter must be able to read its resources *//*	bit 3 - 4 reserved for future use - must be zero for this version *//*	bit 5 - set if this filter is localized to a particular language *//* 	bit 6 - 13 reserved for future use - must be zero for this version *//*  bit 14 - 15 Used internally - must be zero for this version */	short						transIndex;						/* Internal XTND use only - Index of this translator in the list stored by the FINI */	short						resRefNum;						/* RefNum of resource fork of the translator file when open */	long						directoryID;					/* Directory ID of the folder containing the filter */	short						vRefNum;						/* Volume RefNum of volume which contains filter directory */	unsigned char				fileName[32];					/* Name of file if this is an external filter			*/	short						numMatches;						/* Number of Matches for this translator (0 means all files) */	MatchInfo					matches[10];					/* An array of all file matches for this translator */	unsigned char				name[32];						/* Description of translator - appears in pop-up menus */};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct TransDescribe TransDescribe;typedef TransDescribe *TransDescrPtr, **TransDescrHandle;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct SFParamBlock {/* The following fields must be the same in this structure and MatchTranslatorBlock */	long						allowFlags;						/* --> Flags which indicate Translators to be used */	long						numStandard;					/* --> How many "standard" file types */	TransDescrPtr				standard;						/* --> Native file format information */	OSErr						ioResult;						/* <-- Errors reported through this variable */	short						chosenTranslator;				/* <-> On input, number of translators supplied in theChosenTranslator; on output, chosen Translator number */	TransDescrPtr				theChosenTranslator;			/* <-> On input, Pointer to list of translators to build popup menu from (UseMyTransList must be true if you supply this list); on output, pointer to the Chosen Translator *//* End of common fields */	SFReply						*fileReply;						/* <-- File information is returned through this pointer */	ResType						applicNativeType;				/* --> Application native document file type, for use when library cannot be found */	XTNDDlgHookUPP				XTNDDlogHook;					/* --> Pointer to your SF dialog hook */	short						currentMenuItem;				/* <-- chosen menu item (GetFile) */	short						currentSaveItem;				/* <-- chosen menu item (PutFile) */	Point						where;							/* --> Top left corner of dialog, if zero, center on screen */	StringPtr					prompt;							/* --> Pascal string which is displayed on dialog */	StringPtr					buttonTitle;					/* --> Pascal string which replaces the "Open" or "Save" button */	StringPtr					origName;						/* --> Pascal string which is the original name in a PutFile */	short						dialogID;						/* --> Resource number of your dialog template */	ModalFilterUPP				SFFilterProc;					/* --> Pointer to your modal dialog filter proc */	Boolean						showAllFiles;					/* --> TRUE if you want all files to be shown */	Boolean						useTransList;					/* --> TRUE if you are using chosenTranslator and theChosenTranslator to input a list of translators to be used in creating the popup menu */	FileFilterUPP				myFileFilter;					/* --> Pointer to your SF Filter Proc */	long						unused[1];						/* Reserved for future use, must be zero */};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct SFParamBlock SFParamBlock;typedef SFParamBlock *SFParamPtr;/* This parameter block is used to find a translator to read a file */#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct MatchTranslatorBlock {/* The following fields must be the same in this structure and in ClarisFileParamBlock */	long						allowFlags;						/* --> Flags which indicate Translators to be used */	long						numStandard;					/* --> How many "standard" file types */	TransDescrPtr				standard;						/* --> Array of "Native" file formats */	OSErr						ioResult;						/* <-- IO Result from Claris library */	short						chosenTranslator;				/* <-> On input, number of translators supplied in theChosenTranslator; on output, chosen Translator number */	TransDescrPtr				theChosenTranslator;			/* <-> On input, Pointer to list of translators to build popup menu from (UseMyTransList must be true if you supply this list); on output, pointer to the Chosen Translator *//* End of common fields */	StringPtr					fileName;						/* --> File name */	short						vRefNum;						/* --> Volume Reference Number of file */	long						ioDirID;						/* --> Directory id of file */	Boolean						initFlag;						/* --> TRUE if the list of translators should be rebuilt */	Boolean						useTransList;					/* --> TRUE if you are using chosenTranslator and theChosenTranslator to input a list of translators to be used in creating the popup menu */	TransDescrPtr				oneTrans;						/* --> If this is supplied, it will be tried instead of searching all available translators */	long						unused[4];						/* Reserved for future use, must be zero */};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct MatchTranslatorBlock MatchTranslatorBlock;typedef MatchTranslatorBlock *MatchTranslatorPtr;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct SelectParamBlock {	short						translatorVersion;				/* To select by translator type */	ResType						translatorType;					/* and version */	long						includeFlags;					/* Include any of these translator types */	long						excludeFlags;					/* Exclude all of these translator types */	short						includeTrans;					/* Include translators with any of these flags set */	short						excludeTrans;					/* Excluded translator with any of these flags set */	StringPtr					transName;						/* Include only translators with this name */	long						PBVersion;						/* ¥¥¥ MUST be ONE (1) for this version ¥¥¥ */	Boolean						menuSortFlag;					/* TRUE if you want the list sorted and duplicates removed as when the XTND System creates a menu in ClarisGetFile or ClarisPutFile for you */	Boolean						unused1;						/* Reserved for future use, must be zero */	short						unused2;						/* Reserved for future use, must be zero */	long						unused[4];						/* Reserved for future use, must be zero */};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct SelectParamBlock SelectParamBlock;typedef SelectParamBlock *SelectParamPtr;/* ÑÑÑÑ Prototypes for calls to the XTND system ÑÑÑÑ */extern pascal OSErr XTNDInitTranslators(short transVersion, StringPtr xtndSystemName, StringPtr clarisFolderName);extern pascal Boolean XTNDGetFile(SFParamPtr paramPtr);extern pascal Boolean XTNDPutFile(SFParamPtr paramPtr);extern pascal OSErr XTNDLoadTranslator(TransDescrPtr theTranslator, TransUPP *transResource);extern pascal OSErr XTNDReleaseTranslator(TransDescrPtr theTranslator);extern pascal void XTNDCloseTranslators(void);extern pascal OSErr XTNDRebuildTransList(void);extern pascal OSErr XTNDSelectTranslators(SelectParamPtr selectPtr, TransDescrHandle transHandle);extern pascal Boolean XTNDMatchFile(MatchTranslatorPtr matchPtr);#endif#endif