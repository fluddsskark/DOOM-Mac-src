/*	File:		Messages.h	Copyright:	© 1984-1994 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef __MESSAGEMANAGER__#define __MESSAGEMANAGER__#ifndef __TYPES__#include <Types.h>/*	#include <ConditionalMacros.h>								*//*	#include <MixedMode.h>										*//*		#include <Traps.h>										*/#endifenum  {	gestaltMessageMgrVersion	= 'mess'};enum  {	messageStopLoopingErr		= -5775,	cantDeleteRunningHandlerErr	= -5776,	noMessageTableErr			= -5777,	dupSignatureErr				= -5778,	messageNotReceivedErr		= -5799};enum  {	messageClassNoOptions		= 0x00000000,	messageClassIgnoreResult	= 0x80000000};enum  {	topMessageHandler			= 0};#define messageManagerTrap 0xABFB#define sendObjectMessageSelector 0x702F#define sendObjectMessageToSelector 0x7030#define startObjectMessageAtSelector 0x7031#define sendMessageSelector 0x7032#define sendMessageToSelector 0x7033#define startMessageAtSelector 0x7034#define forwardSelector 0x7035#define forwardThisSelector 0x7036#define SendObjectMessageGlue(table, selector) {	 \	sendObjectMessageSelector, 0x223C, table, selector, messageManagerTrap	 \	}#define SendMessageGlue(table, selector) {	 \	sendMessageSelector, 0x223C, table, selector, messageManagerTrap	 \	}#define ForwardMessageGlue(table, selector) {	 \	forwardSelector, 0x223C, table, selector, messageManagerTrap	 \	}#define ForwardThisMessageGlue { forwardThisSelector, messageManagerTrap }typedef struct PrivateMessageClassRecord *MessageClass;typedef struct PrivateMessageHandlerRecord *MessageHandler;typedef struct PrivateMessageObjectRecord *MessageObject;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct MessageOverride {	short						messageID;	long						dispatch1;	long						dispatch2;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct MessageOverride MessageOverride;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct MessageOverrideTable {	short						numOverrides;	MessageOverride				overrides[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct MessageOverrideTable MessageOverrideTable, *MessageOverrideTablePtr;typedef OSType Signature;typedef void *MessageStackMark[2];#ifdef __cplusplusextern "C" {#endiftypedef void (*MessageHandlerSetupProc)(void *handlerData);typedef OSErr (*MessageClassExceptionProc)(MessageObject, OSErr);typedef OSErr (*MessageObjectLoopProc)(MessageObject, void *refCon);typedef OSErr (*MessageHandlerLoopProc)(MessageHandler, void *refCon);typedef void (*MessageGlobalsInitProc)(void *messageGlobals);extern MessageClass NewMessageClass(long numTables, long classOptions) TWOWORDINLINE(0x7000, 0xABFB);extern void DisposeMessageClass(MessageClass) TWOWORDINLINE(0x7001, 0xABFB);extern MessageClass CloneMessageClass(MessageClass) TWOWORDINLINE(0x7002, 0xABFB);extern long CountMessageClassOwners(MessageClass) TWOWORDINLINE(0x7003, 0xABFB);extern MessageClass NewDerivedMessageClass(MessageClass parentClass) TWOWORDINLINE(0x7004, 0xABFB);extern void *SetMessageClassDispatchProc(MessageClass, void *dispatchProc) TWOWORDINLINE(0x7005, 0xABFB);extern MessageHandlerSetupProc SetMessageClassHandlerSetupProc(MessageClass, MessageHandlerSetupProc) TWOWORDINLINE(0x7006, 0xABFB);extern MessageHandlerSetupProc SetMessageClassHandlerReturnProc(MessageClass, MessageHandlerSetupProc) TWOWORDINLINE(0x7007, 0xABFB);extern MessageClassExceptionProc SetMessageClassExceptionProc(MessageClass, MessageClassExceptionProc) TWOWORDINLINE(0x7008, 0xABFB);extern void *GetMessageClassRefCon(MessageClass) TWOWORDINLINE(0x7009, 0xABFB);extern void *SetMessageClassRefCon(MessageClass, void *refCon) TWOWORDINLINE(0x700A, 0xABFB);extern OSErr NewMessageHandler(MessageClass, long handlerPos, MessageOverrideTablePtr overrideTableList[], void *handlerData, Signature handlerSig, MessageHandler *msgHandler) TWOWORDINLINE(0x700B, 0xABFB);extern OSErr RemoveMessageHandler(MessageClass, MessageHandler) TWOWORDINLINE(0x700C, 0xABFB);extern OSErr InstallMessageHandlerOverride(MessageClass, MessageHandler, long messageSelector, long dispatch1, long dispatch2) TWOWORDINLINE(0x700D, 0xABFB);extern void RemoveMessageHandlerOverride(MessageClass, MessageHandler, long messageSelector) TWOWORDINLINE(0x700E, 0xABFB);extern void *GetMessageHandlerData(MessageClass, MessageHandler) TWOWORDINLINE(0x700F, 0xABFB);extern void *SetMessageHandlerData(MessageClass, MessageHandler, void *handlerData) TWOWORDINLINE(0x7010, 0xABFB);extern void DisableMessageHandler(MessageClass, MessageHandler) TWOWORDINLINE(0x7011, 0xABFB);extern void EnableMessageHandler(MessageClass, MessageHandler) TWOWORDINLINE(0x7012, 0xABFB);extern int MessageHandlerDisabled(MessageClass, MessageHandler) TWOWORDINLINE(0x7013, 0xABFB);extern long CountMessageHandlers(MessageClass) TWOWORDINLINE(0x7014, 0xABFB);extern MessageHandler GetMessageHandlerAt(MessageClass, long handlerPosition) TWOWORDINLINE(0x7015, 0xABFB);extern Signature GetMessageHandlerSignature(MessageClass, MessageHandler) TWOWORDINLINE(0x7016, 0xABFB);extern MessageHandler FindMessageHandler(MessageClass, Signature) TWOWORDINLINE(0x7017, 0xABFB);extern long GetMessageHandlerPosition(MessageClass, MessageHandler) TWOWORDINLINE(0x7018, 0xABFB);extern OSErr ForEachMessageHandlerDo(MessageClass, MessageHandlerLoopProc, void *refCon) TWOWORDINLINE(0x7019, 0xABFB);extern MessageObject NewMessageObject(MessageClass) TWOWORDINLINE(0x701A, 0xABFB);extern void DisposeMessageObject(MessageObject) TWOWORDINLINE(0x701B, 0xABFB);extern MessageObject CloneMessageObject(MessageObject) TWOWORDINLINE(0x701C, 0xABFB);extern long CountMessageObjectOwners(MessageObject) TWOWORDINLINE(0x701D, 0xABFB);extern void *GetMessageObjectRefCon(MessageObject) TWOWORDINLINE(0x701E, 0xABFB);extern void *SetMessageObjectRefCon(MessageObject, void *) TWOWORDINLINE(0x701F, 0xABFB);extern MessageClass GetMessageObjectClass(MessageObject) TWOWORDINLINE(0x7020, 0xABFB);extern long CountMessageObjects(MessageClass) TWOWORDINLINE(0x7021, 0xABFB);extern OSErr ForEachMessageObjectDo(MessageClass, MessageObjectLoopProc, void *refCon) TWOWORDINLINE(0x7022, 0xABFB);extern MessageObject GetMessageTarget(void) TWOWORDINLINE(0x7023, 0xABFB);extern MessageObject SetMessageTarget(MessageObject) TWOWORDINLINE(0x7024, 0xABFB);extern void MarkMessageStack(MessageStackMark) TWOWORDINLINE(0x7025, 0xABFB);extern void UnwindMessageStack(MessageStackMark) TWOWORDINLINE(0x7026, 0xABFB);extern MessageHandler GetMessageHandler(void) TWOWORDINLINE(0x7027, 0xABFB);extern long CountMessageHandlerInstances(void) TWOWORDINLINE(0x7028, 0xABFB);extern void *GetMessageHandlerClassContext(void) TWOWORDINLINE(0x7029, 0xABFB);extern void *SetMessageHandlerClassContext(void *) TWOWORDINLINE(0x702A, 0xABFB);extern void *GetMessageHandlerInstanceContext(void) TWOWORDINLINE(0x702B, 0xABFB);extern void *SetMessageHandlerInstanceContext(void *) TWOWORDINLINE(0x702C, 0xABFB);extern OSErr NewMessageGlobals(long messageGlobalsSize, MessageGlobalsInitProc) TWOWORDINLINE(0x702D, 0xABFB);extern void DisposeMessageGlobals(void) TWOWORDINLINE(0x702E, 0xABFB);#ifndef __powerc#ifdef applec#else#endif#endif#ifdef __cplusplus}#endif#endif