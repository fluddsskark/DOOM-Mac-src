/*	File:		scaler types.h	Copyright:	© 1984-1994 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef scalerTypeIncludes#define scalerTypeIncludes	#ifndef mathTypesIncludes#include "math types.h"/*	#include <Types.h>											*//*		#include <ConditionalMacros.h>							*//*		#include <MixedMode.h>									*//*			#include <Traps.h>									*/	#endif	#ifndef sfntTypesIncludes#include "sfnt types.h"	#endif#define truetypeFontFormatTag 0x74727565#define type1FontFormatTag 0x74797031#define nfntFontFormatTag 0x6e666e74#define scaler_first_error 1#define scaler_first_warning 1024enum scalerErrors {	scaler_no_problem			= 0,	scaler_null_context			= 1,	scaler_null_input,	scaler_invalid_context,	scaler_invalid_input,	scaler_invalid_font_data,	scaler_new_block_failed,	scaler_get_font_table_failed,	scaler_bitmap_alloc_failed,	scaler_outline_alloc_failed,	scaler_required_table_missing,	scaler_unsupported_outline_format,	scaler_unsupported_stream_format,	scaler_unsupported_font_format,	scaler_hinting_error,	scaler_scan_error,	scaler_internal_error,	scaler_invalid_matrix,	scaler_fixed_overflow,	scaler_API_version_mismatch,	scaler_streaming_aborted,	scaler_last_error			= scaler_streaming_aborted,	scaler_no_output			= 1024,	scaler_fake_metrics,	scaler_fake_linespacing,	scaler_glyph_substitution,	scaler_last_warning			= scaler_glyph_substitution};typedef long scalerError;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerInfo {	gxFontFormatTag				format;	Fixed						scalerVersion;	Fixed						APIVersion;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endifenum scalerFontFlags {	requiresLayoutFont			= 1,	hasNormalLayoutFont			= 2,	canReorderFont				= 4,	canRearrangeFont			= 8,	hasOutlinesFont				= 16};typedef long scalerFontFlag;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerFontInfo {	unsigned long				unitsPerEm;	scalerFontFlag				flags;	unsigned long				numGlyphs;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endifenum scalerTransformFlags {	applyHintsTransform			= 1,	exactBitmapTransform		= 2,	useThresholdTransform		= 4,	verticalTransform			= 8,	deviceMetricsTransform		= 16,	allScalerTransformFlags		= applyHintsTransform|exactBitmapTransform|useThresholdTransform|verticalTransform|deviceMetricsTransform};typedef long scalerTransformFlag;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerTransform {	scalerTransformFlag			flags;	Fixed						pointSize;	const gxMapping				*fontMatrix;	gxPoint						resolution;	gxPoint						spotSize;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerTransformInfo {	gxPoint						before;	gxPoint						after;	gxPoint						caretAngle;	gxPoint						caretOffset;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endifenum scalerGlyphFlags {	noImageGlyph				= 1};typedef long scalerGlyphFlag;#define pathOutlineFormat 0x70617468typedef long scalerOutlineFormat;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerGlyph {	long						glyphIndex;	long						bandingTop;	long						bandingBottom;	scalerOutlineFormat			format;	scalerGlyphFlag				flags;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerMetrics {	gxPoint						advance;	gxPoint						sideBearing;	gxPoint						otherSideBearing;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerRectangle {	long						xMin;	long						yMin;	long						xMax;	long						yMax;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerBitmap {	char						*image;	gxPoint						topLeft;	struct scalerRectangle		bounds;	long						rowBytes;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endifenum scalerKerningFlags {	lineStartKerning			= 1,	lineEndKerning				= 2,	noCrossKerning				= 4,	allScalerKerningFlags		= lineStartKerning|lineEndKerning|noCrossKerning};typedef long scalerKerningFlag;enum scalerKerningNotes {	noStakeKerningNote			= 1,	crossStreamResetKerningNote	= 2};typedef unsigned short scalerKerningNote;enum scalerKerningOutputs {	noKerningAppliedOutput		= 0x0001};typedef long scalerKerningOutput;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerKerning {	long						numGlyphs;	fract						scaleFactor;	scalerKerningFlag			flags;	const unsigned short		*glyphs;	scalerKerningOutput			info;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endifenum scalerStreamTypeFlags {	cexec68K					= 0x0001,	truetypeStreamType			= 0x0001,	type1StreamType				= 0x0002,	type3StreamType				= 0x0004,	type42StreamType			= 0x0008,	type42GXStreamType			= 0x0010,	portableStreamType			= 0x0020,	flattenedStreamType			= 0x0040,	evenOddModifierStreamType	= 0x8000};typedef unsigned long scalerStreamTypeFlag;enum scalerStreamActions {	downloadStreamAction,	asciiDownloadStreamAction,	fontSizeQueryStreamAction,	encodingOnlyStreamAction,	prerequisiteQueryStreamAction,	prerequisiteItemStreamAction,	variationQueryStreamAction,	variationPSOperatorStreamAction};typedef long scalerStreamAction;#define selectAllVariations -1#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerPrerequisiteItem {	long						enumeration;	long						size;	unsigned char				name[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerStream {	const void					*streamRefCon;	const char					*targetVersion;	scalerStreamTypeFlag		types;	scalerStreamAction			action;	unsigned long				memorySize;	long						variationCount;	const struct gxFontVariation *variations;	union {		struct {			const unsigned short		*encoding;			long						*glyphBits;			char						*name;		}							font;		struct {			long						size;			void						*list;		}							prerequisiteQuery;		long						prerequisiteItem;		long						variationQueryResult;	}							info;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerStreamData {	long						hexFlag;	long						byteCount;	const void					*data;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endifenum scalerBlockTypes {	scalerScratchBlock			= -1,	scalerOpenBlock,	scalerFontBlock,	scalerVariationBlock,	scalerTransformBlock,	scalerGlyphBlock,	scalerBlockCount,	scalerOutlineBlock			= scalerBlockCount,	scalerBitmapBlock};typedef long scalerBlockType;#define sfntDirectoryTag 0x64697220	#ifdef __cplusplusextern "C" {	#endiftypedef long (*GetFontTableProcPtr)(struct scalerContext *context, gxFontTableTag tableTag, long offset, long length, void *data);enum {	uppGetFontTableProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(struct scalerContext*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxFontTableTag)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GetFontTableUPP;#define CallGetFontTableProc(userRoutine, context, tableTag, offset, length, data)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGetFontTableProcInfo, (context), (tableTag), (offset), (length), (data))#define NewGetFontTableProc(userRoutine)		\		(GetFontTableUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGetFontTableProcInfo, GetCurrentISA())#elsetypedef GetFontTableProcPtr GetFontTableUPP;#define CallGetFontTableProc(userRoutine, context, tableTag, offset, length, data)		\		(*(userRoutine))((context), (tableTag), (offset), (length), (data))#define NewGetFontTableProc(userRoutine)		\		(GetFontTableUPP)(userRoutine)#endiftypedef void (*ReleaseFontTableProcPtr)(struct scalerContext *context, void *fontData);enum {	uppReleaseFontTableProcInfo = kCStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(struct scalerContext*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr ReleaseFontTableUPP;#define CallReleaseFontTableProc(userRoutine, context, fontData)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppReleaseFontTableProcInfo, (context), (fontData))#define NewReleaseFontTableProc(userRoutine)		\		(ReleaseFontTableUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppReleaseFontTableProcInfo, GetCurrentISA())#elsetypedef ReleaseFontTableProcPtr ReleaseFontTableUPP;#define CallReleaseFontTableProc(userRoutine, context, fontData)		\		(*(userRoutine))((context), (fontData))#define NewReleaseFontTableProc(userRoutine)		\		(ReleaseFontTableUPP)(userRoutine)#endiftypedef void *(*NewBlockProcPtr)(struct scalerContext *context, long size, scalerBlockType theType, void *oldBlock);enum {	uppNewBlockProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(void*)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(struct scalerContext*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(scalerBlockType)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr NewBlockUPP;#define CallNewBlockProc(userRoutine, context, size, theType, oldBlock)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppNewBlockProcInfo, (context), (size), (theType), (oldBlock))#define NewNewBlockProc(userRoutine)		\		(NewBlockUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppNewBlockProcInfo, GetCurrentISA())#elsetypedef NewBlockProcPtr NewBlockUPP;#define CallNewBlockProc(userRoutine, context, size, theType, oldBlock)		\		(*(userRoutine))((context), (size), (theType), (oldBlock))#define NewNewBlockProc(userRoutine)		\		(NewBlockUPP)(userRoutine)#endiftypedef void (*DisposeBlockProcPtr)(struct scalerContext *context, void *scratchData, scalerBlockType theType);enum {	uppDisposeBlockProcInfo = kCStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(struct scalerContext*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(void*)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(scalerBlockType)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr DisposeBlockUPP;#define CallDisposeBlockProc(userRoutine, context, scratchData, theType)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppDisposeBlockProcInfo, (context), (scratchData), (theType))#define NewDisposeBlockProc(userRoutine)		\		(DisposeBlockUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppDisposeBlockProcInfo, GetCurrentISA())#elsetypedef DisposeBlockProcPtr DisposeBlockUPP;#define CallDisposeBlockProc(userRoutine, context, scratchData, theType)		\		(*(userRoutine))((context), (scratchData), (theType))#define NewDisposeBlockProc(userRoutine)		\		(DisposeBlockUPP)(userRoutine)#endiftypedef long (*StreamFunctionProcPtr)(struct scalerContext *context, struct scalerStream *streamInfo, const struct scalerStreamData *dataInfo);enum {	uppStreamFunctionProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(struct scalerContext*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(struct scalerStream*)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(struct scalerStreamData*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr StreamFunctionUPP;#define CallStreamFunctionProc(userRoutine, context, streamInfo, dataInfo)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppStreamFunctionProcInfo, (context), (streamInfo), (dataInfo))#define NewStreamFunctionProc(userRoutine)		\		(StreamFunctionUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppStreamFunctionProcInfo, GetCurrentISA())#elsetypedef StreamFunctionProcPtr StreamFunctionUPP;#define CallStreamFunctionProc(userRoutine, context, streamInfo, dataInfo)		\		(*(userRoutine))((context), (streamInfo), (dataInfo))#define NewStreamFunctionProc(userRoutine)		\		(StreamFunctionUPP)(userRoutine)#endiftypedef void (*ScanLineFunctionProcPtr)(struct scalerContext *context, const struct scalerBitmap *scanLine);enum {	uppScanLineFunctionProcInfo = kCStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(struct scalerContext*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(struct scalerBitmap*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr ScanLineFunctionUPP;#define CallScanLineFunctionProc(userRoutine, context, scanLine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppScanLineFunctionProcInfo, (context), (scanLine))#define NewScanLineFunctionProc(userRoutine)		\		(ScanLineFunctionUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppScanLineFunctionProcInfo, GetCurrentISA())#elsetypedef ScanLineFunctionProcPtr ScanLineFunctionUPP;#define CallScanLineFunctionProc(userRoutine, context, scanLine)		\		(*(userRoutine))((context), (scanLine))#define NewScanLineFunctionProc(userRoutine)		\		(ScanLineFunctionUPP)(userRoutine)#endiftypedef void (*PostErrorFunctionProcPtr)(struct scalerContext *context, scalerError theProblem);enum {	uppPostErrorFunctionProcInfo = kCStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(struct scalerContext*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(scalerError)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr PostErrorFunctionUPP;#define CallPostErrorFunctionProc(userRoutine, context, theProblem)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppPostErrorFunctionProcInfo, (context), (theProblem))#define NewPostErrorFunctionProc(userRoutine)		\		(PostErrorFunctionUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppPostErrorFunctionProcInfo, GetCurrentISA())#elsetypedef PostErrorFunctionProcPtr PostErrorFunctionUPP;#define CallPostErrorFunctionProc(userRoutine, context, theProblem)		\		(*(userRoutine))((context), (theProblem))#define NewPostErrorFunctionProc(userRoutine)		\		(PostErrorFunctionUPP)(userRoutine)#endiftypedef void (*ScalerFunctionProcPtr)(struct scalerContext *context, void *data);enum {	uppScalerFunctionProcInfo = kCStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(struct scalerContext*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr ScalerFunctionUPP;#define CallScalerFunctionProc(userRoutine, context, data)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppScalerFunctionProcInfo, (context), (data))#define NewScalerFunctionProc(userRoutine)		\		(ScalerFunctionUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppScalerFunctionProcInfo, GetCurrentISA())#elsetypedef ScalerFunctionProcPtr ScalerFunctionUPP;#define CallScalerFunctionProc(userRoutine, context, data)		\		(*(userRoutine))((context), (data))#define NewScalerFunctionProc(userRoutine)		\		(ScalerFunctionUPP)(userRoutine)#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct scalerContext {	Fixed						version;	void						*theFont;	gxFontFormatTag				format;	GetFontTableUPP				GetFontTable;	ReleaseFontTableUPP			ReleaseFontTable;	NewBlockUPP					NewBlock;	DisposeBlockUPP				DisposeBlock;	StreamFunctionUPP			StreamFunction;	ScanLineFunctionUPP			ScanLineFunction;	PostErrorFunctionUPP		PostErrorFunction;	void						*scalerBlocks[scalerBlockCount];	ScalerFunctionUPP			ScalerFunction;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifdef __cplusplus}	#endif	#ifndef __cplusplustypedef struct scalerInfo scalerInfo;typedef struct scalerFontInfo scalerFontInfo;typedef struct scalerTransform scalerTransform;typedef struct scalerTransformInfo scalerTransformInfo;typedef struct scalerGlyph scalerGlyph;typedef struct scalerMetrics scalerMetrics;typedef struct scalerRectangle scalerRectangle;typedef struct scalerBitmap scalerBitmap;typedef struct scalerKerning scalerKerning;typedef struct scalerPrerequisiteItem scalerPrerequisiteItem;typedef struct scalerStream scalerStream;typedef struct scalerStreamData scalerStreamData;typedef struct scalerContext scalerContext;	#endif#endif