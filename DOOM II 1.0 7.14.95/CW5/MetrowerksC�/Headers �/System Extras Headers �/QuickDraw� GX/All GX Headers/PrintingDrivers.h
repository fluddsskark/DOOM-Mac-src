/*	File:		PrintingDrivers.h	Copyright:	© 1984-1994 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef __PRINTINGDRIVERS__#define __PRINTINGDRIVERS__#ifndef __PRINTINGMESSAGES__#include <PrintingMessages.h>/*	#include <PrintingManager.h>								*//*		#include <Printing.h>									*//*			#include <Quickdraw.h>								*//*				#include <Types.h>								*//*					#include <ConditionalMacros.h>				*//*					#include <MixedMode.h>						*//*						#include <Traps.h>						*//*				#include <QuickdrawText.h>						*//*					#include <IntlResources.h>					*//*			#include <Dialogs.h>								*//*				#include <Windows.h>							*//*					#include <Events.h>							*//*						#include <OSUtils.h>					*//*					#include <Controls.h>						*//*						#include <Menus.h>						*//*				#include <TextEdit.h>							*//*		#include <Files.h>										*//*			#include <SegLoad.h>								*//*		#include <Collections.h>								*//*		#include <PrintingErrors.h>								*//*		#include <graphics types.h>								*//*			#include "math types.h"								*//*		#include <font types.h>									*//*		#include <scaler types.h>								*//*			#include "sfnt types.h"								*//*	#include <PrintingResTypes.h>								*//*	#include <Messages.h>										*//*	#include <Lists.h>											*//*		#include <Memory.h>										*/#endif#ifndef __PRINTING__#endifenum  {	gxInputTraysMenuItem		= -1};enum  {	gxUseCustomIO				= 0x00000001};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxIOPrefsRec {	unsigned long				communicationsOptions;	unsigned long				numBuffers;	unsigned long				bufferSize;	unsigned long				numReqBlocks;	unsigned long				openCloseTimeout;	unsigned long				readWriteTimeout;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxIOPrefsRec gxIOPrefsRec, *gxIOPrefsPtr, **gxIOPrefsHdl;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPrintDestinationRec {	Boolean						printToFile;	FSSpec						fSpec;	char						includeFonts;	Str31						fileFormat;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPrintDestinationRec gxPrintDestinationRec, *gxPrintDestinationPtr, **gxPrintDestinationHdl;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPortListRec {	char						firstMarker, secondMarker;	Handle						iconSuiteHandle;	Handle						outputDriverName;	Handle						inputDriverName;	Str255						iconName;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPortListRec gxPortListRec, *gxPortListPtr;#define gxDeviceCommunicationsID (0)#define gxPostscriptProductInfoType 'prod'#define gxPostscriptProductNameID (0)#define gxPostscriptVersionID (1)#define gxPostscriptRevisionID (2)#define gxPostscriptVMAvailableID (3)#define gxPostscriptFontStreamTypeID (4)#define gxPostscriptLanguageLevelID (5)enum  {	gxAutoFeedButtonId			= 3};enum  {	gxUnivAlertStatusResourceId	= -28508};enum  {	gxUnivManualFeedIndex		= 2,	gxUnivFailToPrintIndex		= 3,	gxUnivPaperJamIndex			= 4,	gxUnivOutOfPaperIndex		= 5,	gxUnivNoPaperTrayIndex		= 6,	gxUnivPrinterReadyIndex		= 7,	gxUnivAlertBeforeIndex		= 9,	gxUnivAlertAfterIndex		= 10};enum  {	gxDefaultStatusBufferSize	= 10,	gxManualFeedStatusBufferSize = 34,	gxOutOfPaperStatusBufferSize = 42};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxManualFeedRecord {	Boolean						canAutoFeed;	Str31						paperTypeName;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxManualFeedRecord gxManualFeedRecord;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxOutOfPaperRecord {	Str31						paperTypeName;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxOutOfPaperRecord gxOutOfPaperRecord;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxCustomizationRec {	short						horizontalResolution;	short						verticalResolution;	short						upDriverType;	Point						patternStretch;	short						translatorSettings;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxCustomizationRec gxCustomizationRec, *gxCustomizationPtr, **gxCustomizationHdl;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxResolutionRec {	short						rangeType;	short						xMinimumResolution;	short						xMaximumResolution;	short						yMinimumResolution;	short						yMaximumResolution;	short						resolutionCount;	Point						resolutions[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxResolutionRec gxResolutionRec, *gxResolutionPtr, **gxResolutionHdl;enum  {	gxPrintRecordVersion		= 8};enum  {	gxAutoFeed					= 0,	gxManualFeed				= 1};enum  {	gxPreciseBitmap				= 0x0001,	gxBiggerPages				= 0x0002,	gxGraphicSmoothing			= 0x0004,	gxTextSmoothing				= 0x0008,	gxFontSubstitution			= 0x0010,	gxInvertPage				= 0x0020,	gxFlipPageHoriz				= 0x0040,	gxFlipPageVert				= 0x0080,	gxColorMode					= 0x0100,	gxBidirectional				= 0x0200,	gxUserFlag0					= 0x0400,	gxUserFlag1					= 0x0800,	gxUserFlag2					= 0x1000,	gxReservedFlag0				= 0x2000,	gxReservedFlag1				= 0x4000,	gxReservedFlag2				= 0x8000};enum  {	gxPortraitOrientation		= 0,	gxLandscapeOrientation		= 1,	gxAltPortraitOrientation	= 2,	gxAltLandscapeOrientation	= 3};enum  {	gxBestQuality				= 0,	gxFasterQuality				= 1,	gxDraftQuality				= 2};enum  {	gxFirstTray					= 0,	gxSecondTray				= 1,	gxThirdTray					= 2};enum  {	gxNoCoverPage				= 0,	gxFirstPageCover			= 1,	gxLastPageCover				= 2};enum  {	gxUnidirectionalMotion		= 0,	gxBidirectionalMotion		= 1};enum  {	gxNoFile					= 0,	gxPostScriptFile			= 1};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxUniversalPrintRecord {	short						prVersion;	short						appDev;	short						appVRes;	short						appHRes;	Rect						appPage;	Rect						appPaper;	short						devType;	short						pageV;	short						pageH;	char						fillByte;	char						feed;	short						devKind;	short						devVRes;	short						devHRes;	Rect						devPage;	short						actualCopies;	short						options;	short						reduction;	char						orientation;	char						qualityMode;	char						coverPage;	char						firstTray;	char						remainingTray;	char						headMotion;	char						saveFile;	char						userCluster1;	char						userCluster2;	char						userCluster3;	short						firstPage;	short						lastPage;	short						copies;	char						reserved1;	char						reserved2;	PrIdleUPP					pIdleProc;	Ptr							pFileName;	short						fileVol;	char						fileVers;	char						reserved3;	short						printX[19];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxUniversalPrintRecord gxUniversalPrintRecord, *gxUniversalPrintRecordPtr, **gxUniversalPrintRecordHdl;#ifdef __cplusplusextern "C" {#endifextern OSErr Forward_GXPrOpenDoc(THPrint, TPPrPort *) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrCloseDoc(TPPrPort) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrOpenPage(TPPrPort, TPRect, Point resolution) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrClosePage(TPPrPort) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrintDefault(THPrint) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrStlDialog(THPrint, Boolean *) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrJobDialog(THPrint, Boolean *) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrStlInit(THPrint, TPPrDlg *) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrJobInit(THPrint, TPPrDlg *) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrDlgMain(THPrint, PDlgInitUPP, Boolean *) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrValidate(THPrint, Boolean *) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrJobMerge(THPrint, THPrint) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrGeneral(Ptr) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXConvertPrintRecordTo(THPrint) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXConvertPrintRecordFrom(THPrint) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Forward_GXPrintRecordToJob(THPrint, gxJob) TWOWORDINLINE(0x7036, 0xABFB);#ifdef __cplusplus}#endiftypedef long gxRasterPlaneOptions;enum  {	gxDefaultOffscreen			= 0x00000000,	gxDontSetHalftone			= 0x00000001,	gxDotTypeIsDitherLevel		= 0x00000002};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPlaneSetupRec {	gxRasterPlaneOptions		planeOptions;	gxHalftone					planeHalftone;	gxColorSpace				planeSpace;	gxColorSet					planeSet;	gxColorProfile				planeProfile;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPlaneSetupRec gxPlaneSetupRec;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxOffscreenSetupRec {	short						width;	short						minHeight;	short						maxHeight;	Fixed						ramPercentage;	long						ramSlop;	short						depth;	gxMapping					vpMapping;	gxMapping					vdMapping;	short						planes;	gxPlaneSetupRec				planeSetup[4];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxOffscreenSetupRec gxOffscreenSetupRec;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxOffscreenPlaneRec {	gxViewPort					theViewPort;	gxViewDevice				theDevice;	gxViewGroup					theViewGroup;	gxShape						theBitmap;	gxBitmap					theBits;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxOffscreenPlaneRec gxOffscreenPlaneRec;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxOffscreenRec {	short						numberOfPlanes;	Handle						offscreenStorage;	gxOffscreenPlaneRec			thePlanes[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxOffscreenRec gxOffscreenRec, *gxOffscreenPtr, **gxOffscreenHdl;typedef long gxRasterRenderOptions;enum  {	gxDefaultRaster				= 0x00000000,	gxDontResolveTransferModes	= 0x00000001,	gxRenderInReverse			= 0x00000002,	gxOnePlaneAtATime			= 0x00000004,	gxSendAllBands				= 0x00000008};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxRasterPrefsRec {	gxRasterRenderOptions		renderOptions;	Fixed						hImageRes;	Fixed						vImageRes;	short						minBandSize;	short						maxBandSize;	Fixed						ramPercentage;	long						ramSlop;	short						depth;	short						numPlanes;	gxPlaneSetupRec				planeSetup[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxRasterPrefsRec gxRasterPrefsRec, *gxRasterPrefsPtr, **gxRasterPrefsHdl;typedef long gxRasterPackageOptions;enum  {	gxSendAllColors				= 0x00000001,	gxInterlaceColor			= 0x00000002,	gxOverlayColor				= 0x00000004,	gxUseColor					= (gxInterlaceColor|gxOverlayColor)};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxRasterPackageRec {	Ptr							bufferSize;	short						colorPasses;	short						headHeight;	short						numberPasses;	short						passOffset;	gxRasterPackageOptions		packageOptions;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxRasterPackageRec gxRasterPackageRec, *gxRasterPackagePtr, **gxRasterPackageHdl;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxRasterPackageBitmapRec {	gxBitmap					*bitmapToPackage;	unsigned short				startRaster;	unsigned short				colorBand;	Boolean						isBandDirty;	Rect						dirtyRect;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxRasterPackageBitmapRec gxRasterPackageBitmapRec;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxStandardNumberRec {	short						numberType;	short						minWidth;	char						padChar;	char						alignment;	Str31						startString;	Str31						endString;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxStandardNumberRec gxStandardNumberRec, *gxStandardNumberPtr;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxRasterPackageControlsRec {	short						startPageStringID;	short						formFeedStringID;	short						forwardMax;	gxStandardNumberRec			forwardLineFeed;	short						reverseMax;	gxStandardNumberRec			reverseLineFeed;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxRasterPackageControlsRec gxRasterPackageControlsRec, *gxRasterPackageControlsPtr, **gxRasterPackageControlsHdl;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxRasterImageDataRec {	gxRasterRenderOptions		renderOptions;	Fixed						hImageRes;	Fixed						vImageRes;	short						minBandSize;	short						maxBandSize;	gxRectangle					pageSize;	short						currentYPos;	gxRasterPackageRec			packagingInfo;	Boolean						optionsValid;	gxRasterPackageControlsRec	packageControls;	gxOffscreenSetupRec			theSetup;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxRasterImageDataRec gxRasterImageDataRec, *gxRasterImageDataPtr, **gxRasterImageDataHdl;#ifdef __cplusplusextern "C" {#endif#define GXRASTERMSGGLUE(selector) SendMessageGlue(0x0001, selector)extern OSErr Send_GXRasterDataIn(gxOffscreenHdl, gxRectangle *bandRectangle, gxRectangle *dirtyRectangle) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 0, 0xABFB);extern OSErr Forward_GXRasterDataIn(gxOffscreenHdl, gxRectangle *bandRectangle, gxRectangle *dirtyRectangle) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXRasterLineFeed(short *lineFeedSize, Ptr buffer, unsigned long *bufferPos, gxRasterImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 1, 0xABFB);extern OSErr Forward_GXRasterLineFeed(short *lineFeedSize, Ptr buffer, unsigned long *bufferPos, gxRasterImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXRasterPackageBitmap(gxRasterPackageBitmapRec *whatToPackage, Ptr buffer, unsigned long *bufferPos, gxRasterImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 2, 0xABFB);extern OSErr Forward_GXRasterPackageBitmap(gxRasterPackageBitmapRec *whatToPackage, Ptr buffer, unsigned long *bufferPos, gxRasterImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);#ifdef __cplusplus}#endiftypedef long gxVectorRenderOptions;enum  {	gxColorSort					= 0x00000001,	gxATransferMode				= 0x00000002,	gxNoOverlap					= 0x00000004,	gxAColorBitmap				= 0x00000008,	gxSortbyPenPos				= 0x00000010,	gxPenLessPlotter			= 0x00000020,	gxCutterPlotter				= 0x00000040,	gxNoBackGround				= 0x00000080};typedef long gxVectorShapeOptions;enum  {	gxUnidirectionalFill		= 0x00000001,	gxAlsoOutlineFilledShape	= 0x00000002};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxVHalftoneCompRec {	Fixed						angle;	long						penIndex;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxVHalftoneCompRec gxVHalftoneCompRec;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxVHalftoneRec {	gxColorSpace				halftoneSpace;	gxVHalftoneCompRec			halftoneComps[4];	long						penIndexForBW;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxVHalftoneRec gxVHalftoneRec;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxVectorShapeDataRec {	gxVectorShapeOptions		shapeOptions;	long						maxPolyPoints;	Fixed						shapeError;	Fixed						textSize;	Fixed						frameSize;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxVectorShapeDataRec gxVectorShapeDataRec;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxVectorImageDataRec {	gxVectorRenderOptions		renderOptions;	Fixed						devRes;	gxTransform					devTransform;	gxColorSet					clrSet;	gxColor						bgColor;	gxVHalftoneRec				halftoneInfo;	gxPenTableHdl				hPenTable;	gxRectangle					pageRect;	gxVectorShapeDataRec		shapeData;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxVectorImageDataRec gxVectorImageDataRec, *gxVectorImageDataPtr, **gxVectorImageDataHdl;#ifdef __cplusplusextern "C" {#endif#define GXVECTORMSGGLUE(selector) SendMessageGlue(0x0001, selector)extern OSErr Send_GXVectorPackageShape(gxShape, long penIndex) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 0, 0xABFB);extern OSErr Forward_GXVectorPackageShape(gxShape, long penIndex) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXVectorLoadPens(gxPenTableHdl, long *shapeCounts, boolean *penTableChanged) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 1, 0xABFB);extern OSErr Forward_GXVectorLoadPens(gxPenTableHdl, long *shapeCounts, boolean *penTableChanged) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXVectorVectorizeShape(gxShape, long penIndex, gxVectorShapeDataRec *) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 2, 0xABFB);extern OSErr Forward_GXVectorVectorizeShape(gxShape, long penIndex, gxVectorShapeDataRec *) TWOWORDINLINE(0x7036, 0xABFB);#ifdef __cplusplus}#endifenum  {	gxPostSynonym				= (long)'post'};typedef long gxPostScriptRenderOptions;enum  {	gxNeedsHexOption			= 0x00000001,	gxNeedsCommentsOption		= 0x00000002,	gxBoundingBoxesOption		= 0x00000004,	gxPortablePostScriptOption	= 0x00000008,	gxTextClipsToPathOption		= 0x00000010,	gxFlattenClipPathOption		= 0x00000020,	gxUseCharpath1Option		= 0x00000040,	gxUseLevel2ColorOption		= 0x00000080};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPrinterGlyphsRec {	gxFont						theFont;	long						nGlyphs;	gxFontPlatform				platform;	gxFontScript				script;	gxFontLanguage				language;	long						vmUsage;	unsigned long				glyphBits[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPrinterGlyphsRec gxPrinterGlyphsRec;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPostScriptImageDataRec {	short						languageLevel;	gxColorSpace				devCSpace;	gxColorProfile				devCProfile;	gxPostScriptRenderOptions	renderOptions;	long						pathLimit;	short						gsaveLimit;	short						opStackLimit;	scalerStreamTypeFlag		fontType;	long						printerVM;	long						reserved0;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPostScriptImageDataRec gxPostScriptImageDataRec, *gxPostScriptImageDataPtr, **gxPostScriptImageDataHdl;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxProcSetListRec {	Signature					clientid;	OSType						controlType;	short						controlid;	OSType						dataType;	long						reserved0;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxProcSetListRec gxProcSetListRec, *gxProcSetListPtr, **gxProcSetListHdl;enum  {	gxPrinterOK					= 0,	gxIntializePrinter			= 1,	gxFilePrinting				= 2,	gxResetPrinter				= 128};#ifdef __cplusplusextern "C" {#endif#define GXPOSTSCRIPTMSGGLUE(selector) SendMessageGlue(0x0001, selector)extern OSErr Send_GXPostScriptQueryPrinter(long *) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 0, 0xABFB);extern OSErr Forward_GXPostScriptQueryPrinter(long *) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptInitializePrinter(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 1, 0xABFB);extern OSErr Forward_GXPostScriptInitializePrinter(void) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptResetPrinter(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 2, 0xABFB);extern OSErr Forward_GXPostScriptResetPrinter(void) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptExitServer(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 3, 0xABFB);extern OSErr Forward_GXPostScriptExitServer(void) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptGetStatusText(Handle) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 4, 0xABFB);extern OSErr Forward_GXPostScriptGetStatusText(Handle) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptGetPrinterText(Handle) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 5, 0xABFB);extern OSErr Forward_GXPostScriptGetPrinterText(Handle) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptScanStatusText(Handle) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 6, 0xABFB);extern OSErr Forward_GXPostScriptScanStatusText(Handle) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptScanPrinterText(Handle) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 7, 0xABFB);extern OSErr Forward_GXPostScriptScanPrinterText(Handle) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptGetDocumentProcSetList(gxProcSetListHdl, gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 8, 0xABFB);extern OSErr Forward_GXPostScriptGetDocumentProcSetList(gxProcSetListHdl, gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptDownloadProcSetList(gxProcSetListHdl, gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 9, 0xABFB);extern OSErr Forward_GXPostScriptDownloadProcSetList(gxProcSetListHdl, gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptGetPrinterGlyphsInformation(gxPrinterGlyphsRec *) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 10, 0xABFB);extern OSErr Forward_GXPostScriptGetPrinterGlyphsInformation(gxPrinterGlyphsRec *) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptStreamFont(gxFont fontref, scalerStream *streamPtr) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 11, 0xABFB);extern OSErr Forward_GXPostScriptPostScriptStreamFont(gxFont fontref, scalerStream *streamPtr) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptDoDocumentHeader(gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 12, 0xABFB);extern OSErr Forward_GXPostScriptDoDocumentHeader(gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptDoDocumentSetup(gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 13, 0xABFB);extern OSErr Forward_GXPostScriptDoDocumentSetup(gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptDoDocumentTrailer(gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 14, 0xABFB);extern OSErr Forward_GXPostScriptDoDocumentTrailer(gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptDoPageSetup(gxFormat, long, gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 15, 0xABFB);extern OSErr Forward_GXPostScriptDoPageSetup(gxFormat, long, gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptSelectPaperType(gxPaperType, long, gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 16, 0xABFB);extern OSErr Forward_GXPostScriptSelectPaperType(gxPaperType, long, gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);extern OSErr Send_GXPostScriptDoPageTrailer(gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 17, 0xABFB);extern OSErr Forward_GXPostScriptDoPageTrailer(gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);#if defined(applec) && !defined(powerc)extern OSErr Send_GXPostScriptEjectPage(gxPaperType, long pagenumber, long copiescount, short erasepage, gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 18, 0xABFB);extern OSErr Forward_GXPostScriptEjectPage(gxPaperType, long pagenumber, long copiescount, short erasepage, gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);#elseextern OSErr Send_GXPostScriptEjectPage(gxPaperType, long pagenumber, long copiescount, long erasepage, gxPostScriptImageDataHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 18, 0xABFB);extern OSErr Forward_GXPostScriptEjectPage(gxPaperType, long pagenumber, long copiescount, long erasepage, gxPostScriptImageDataHdl) TWOWORDINLINE(0x7036, 0xABFB);#endifextern OSErr Send_GXPostScriptProcessShape(gxShape page, long trcount, gxTransform trlist[]) FIVEWORDINLINE(0x7032, 0x223C, 0x0001, 19, 0xABFB);extern OSErr Forward_GXPostScriptProcessShape(gxShape page, long trcount, gxTransform trlist[]) TWOWORDINLINE(0x7036, 0xABFB);#ifdef __cplusplus}#endifenum  {	gxMissingImagePointer		= -4};#define GXDRIVERAPIGLUE(selector) {0x203C, 0x0002, selector, 0xABFE}#ifdef __cplusplusextern "C" {#endifextern OSErr GXAddPrinterViewDevice(gxPrinter, gxViewDevice) FOURWORDINLINE(0x203C, 0x0002, 0, 0xABFE);extern OSErr GXGetAvailableJobFormatModes(gxJobFormatModeTableHdl *) FOURWORDINLINE(0x203C, 0x0002, 1, 0xABFE);extern OSErr GXSetPreferredJobFormatMode(gxJobFormatMode, Boolean directOnly) FOURWORDINLINE(0x203C, 0x0002, 2, 0xABFE);#if defined(applec) && !defined(powerc)extern OSErr GXPrintingAlert(short iconId, short txtSize, short defaultTitleNum, short cancelTitleNum, short textLength, Ptr pAlertMsg, StringPtr actionTitle, StringPtr title2, StringPtr title3, StringPtr msgFont, ModalFilterUPP filterProc, short *itemHit, StringPtr alertTitle) FOURWORDINLINE(0x203C, 0x0002, 3, 0xABFE);extern OSErr GXGetPrintingAlert(short alertResId, ModalFilterUPP, short *itemHit) FOURWORDINLINE(0x203C, 0x0002, 4, 0xABFE);extern OSErr GXFetchDTPData(Str31 dtpName, OSType theType, short theID, Handle *theData) FOURWORDINLINE(0x203C, 0x0002, 5, 0xABFE);extern OSErr GXWriteDTPData(Str31 dtpName, OSType theType, short theID, Handle theData) FOURWORDINLINE(0x203C, 0x0002, 6, 0xABFE);extern OSErr GXHandleChooserMessage(gxJob *aJob, Str31 driverName, short message, short caller, StringPtr objName, StringPtr zoneName, ListHandle theList, long p2) FOURWORDINLINE(0x203C, 0x0002, 7, 0xABFE);#elseextern OSErr GXPrintingAlert(long iconId, long txtSize, long defaultTitleNum, long cancelTitleNum, long textLength, Ptr pAlertMsg, StringPtr actionTitle, StringPtr title2, StringPtr title3, StringPtr msgFont, ModalFilterUPP filterProc, short *itemHit, StringPtr alertTitle) FOURWORDINLINE(0x203C, 0x0002, 3, 0xABFE);extern OSErr GXGetPrintingAlert(long alertResId, ModalFilterUPP, short *itemHit) FOURWORDINLINE(0x203C, 0x0002, 4, 0xABFE);extern OSErr GXFetchDTPData(Str31 dtpName, OSType theType, long theID, Handle *theData) FOURWORDINLINE(0x203C, 0x0002, 5, 0xABFE);extern OSErr GXWriteDTPData(Str31 dtpName, OSType theType, long theID, Handle theData) FOURWORDINLINE(0x203C, 0x0002, 6, 0xABFE);extern OSErr GXHandleChooserMessage(gxJob *aJob, Str31 driverName, long message, long caller, StringPtr objName, StringPtr zoneName, ListHandle theList, long p2) FOURWORDINLINE(0x203C, 0x0002, 7, 0xABFE);#endif#ifdef __cplusplus}#endif#endif