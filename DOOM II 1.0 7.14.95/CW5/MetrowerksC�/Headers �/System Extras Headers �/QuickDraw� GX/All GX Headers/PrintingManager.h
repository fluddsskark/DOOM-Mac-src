/*	File:		PrintingManager.h	Copyright:	© 1984-1994 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef __PRINTINGMANAGER__#define __PRINTINGMANAGER__#ifndef __PRINTING__#include <Printing.h>/*	#include <Quickdraw.h>										*//*		#include <Types.h>										*//*			#include <ConditionalMacros.h>						*//*			#include <MixedMode.h>								*//*				#include <Traps.h>								*//*		#include <QuickdrawText.h>								*//*			#include <IntlResources.h>							*//*	#include <Dialogs.h>										*//*		#include <Windows.h>									*//*			#include <Events.h>									*//*				#include <OSUtils.h>							*//*			#include <Controls.h>								*//*				#include <Menus.h>								*//*		#include <TextEdit.h>									*/#endif#ifndef __FILES__#include <Files.h>/*	#include <SegLoad.h>										*/#endif#ifndef __COLLECTIONMANAGER__#include <Collections.h>#endif#ifndef __PRINTINGERRORS__#include <PrintingErrors.h>#endif#ifndef graphicsTypesIncludes#include <graphics types.h>/*	#include "math types.h"										*/#endif#ifndef fontTypesIncludes#include <font types.h>#endif#ifndef scalerTypeIncludes#include <scaler types.h>/*	#include "sfnt types.h"										*/#endif#define gestaltGXPrintingMgrVersion 'pmgr'#define gestaltGXVersion 'qdgx'typedef struct gxPrivatePrinterRecord *gxPrinter;typedef struct gxPrivateJobRecord *gxJob;typedef struct gxPrivateFormatRecord *gxFormat;typedef struct gxPrivatePaperTypeRecord *gxPaperType;typedef struct gxPrivatePrintFileRecord *gxPrintFile;typedef Boolean gxLoopStatus;enum  {	gxStopLooping				= false,	gxKeepLooping				= true};typedef pascal gxLoopStatus (*gxViewDeviceProc)(gxViewDevice, void *refCon);typedef pascal gxLoopStatus (*gxFormatProc)(gxFormat, void *refCon);typedef pascal gxLoopStatus (*gxPaperTypeProc)(gxPaperType, void *refCon);typedef pascal OSErr (*gxPrintingFlattenProc)(long size, void *data, void *refCon);typedef short gxCollectionCategory;enum  {	gxNoCollectionCategory		= (gxCollectionCategory)0x0000,	gxOutputDriverCategory		= (gxCollectionCategory)0x0001,	gxFormattingDriverCategory	= (gxCollectionCategory)0x0002,	gxDriverVolatileCategory	= (gxCollectionCategory)0x0004,	gxVolatileOutputDriverCategory = gxOutputDriverCategory + gxDriverVolatileCategory,	gxVolatileFormattingDriverCategory = gxFormattingDriverCategory + gxDriverVolatileCategory};enum  {	gxPrintingTagID				= -28672};enum  {	gxJobTag					= 'job '};enum  {	gxPrintJobUrgent			= 0x00000001,	gxPrintJobAtTime			= 0x00000002,	gxPrintJobASAP				= 0x00000003};enum  {	gxPrintJobHoldingBit		= 0x00001000};enum  {	gxPrintJobHolding			= (gxPrintJobHoldingBit + gxPrintJobASAP),	gxPrintJobHoldingAtTime		= (gxPrintJobHoldingBit + gxPrintJobAtTime),	gxPrintJobHoldingUrgent		= (gxPrintJobHoldingBit + gxPrintJobUrgent)};enum  {	gxNoPrintTimeAlert			= 0,	gxAlertBefore				= 1,	gxAlertAfter				= 2,	gxAlertBothTimes			= 3};enum  {	gxThirtySeconds				= 1800,	gxTwoMinutes				= 7200};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxJobInfo {	long						numPages;	long						priority;	long						timeToPrint;	long						jobTimeout;	long						firstPageToPrint;	short						jobAlert;	Str31						appName;	Str31						documentName;	Str31						userName;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxJobInfo gxJobInfo;enum  {	gxCollationTag				= 'sort'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxCollationInfo {	Boolean						collation;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxCollationInfo gxCollationInfo;enum  {	gxCopiesTag					= 'copy'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxCopiesInfo {	long						copies;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxCopiesInfo gxCopiesInfo;enum  {	gxPageRangeTag				= 'rang'};enum  {	gxDefaultPageRange			= (char)0,	gxReplacePageRange			= (char)1,	gxCustomizePageRange		= (char)2};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxSimplePageRangeInfo {	char						optionChosen;	Boolean						printAll;	long						fromPage;	long						toPage;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxSimplePageRangeInfo gxSimplePageRangeInfo;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPageRangeInfo {	gxSimplePageRangeInfo		simpleRange;	Str31						fromString;	Str31						toString;	long						minFromPage;	long						maxToPage;	char						replaceString[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPageRangeInfo gxPageRangeInfo;enum  {	gxQualityTag				= 'qual'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxQualityInfo {	Boolean						disableQuality;	short						defaultQuality;	short						currentQuality;	short						qualityCount;	char						qualityNames[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxQualityInfo gxQualityInfo;enum  {	gxFileDestinationTag		= 'dest'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFileDestinationInfo {	Boolean						toFile;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFileDestinationInfo gxFileDestinationInfo;enum  {	gxFileLocationTag			= 'floc'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFileLocationInfo {	FSSpec						fileSpec;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFileLocationInfo gxFileLocationInfo;enum  {	gxFileFormatTag				= 'ffmt'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFileFormatInfo {	Str31						fileFormatName;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFileFormatInfo gxFileFormatInfo;enum  {	gxFileFontsTag				= 'incf'};enum  {	gxIncludeNoFonts			= (char)1,	gxIncludeAllFonts			= (char)2,	gxIncludeNonStandardFonts	= (char)3};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFileFontsInfo {	char						includeFonts;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFileFontsInfo gxFileFontsInfo;enum  {	gxPaperFeedTag				= 'feed'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPaperFeedInfo {	Boolean						autoFeed;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPaperFeedInfo gxPaperFeedInfo;typedef long gxTrayIndex;enum  {	gxTrayFeedTag				= 'tray'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxTrayFeedInfo {	gxTrayIndex					feedTrayIndex;	Boolean						manualFeedThisPage;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxTrayFeedInfo gxTrayFeedInfo;enum  {	gxManualFeedTag				= 'manf'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxManualFeedInfo {	long						numPaperTypeNames;	Str31						paperTypeNames[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxManualFeedInfo gxManualFeedInfo;enum  {	gxNormalMappingTag			= 'nmap'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxNormalMappingInfo {	Boolean						normalPaperMapping;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxNormalMappingInfo gxNormalMappingInfo;enum  {	gxSpecialMappingTag			= 'smap'};enum  {	gxRedirectPages				= (char)1,	gxScalePages				= (char)2,	gxTilePages					= (char)3};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxSpecialMappingInfo {	char						specialMapping;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxSpecialMappingInfo gxSpecialMappingInfo;enum  {	gxTrayMappingTag			= 'tmap'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxTrayMappingInfo {	gxTrayIndex					mapPaperToTray;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxTrayMappingInfo gxTrayMappingInfo;enum  {	gxPaperMappingTag			= 'pmap'};enum  {	gxPrintPanelTag				= 'ppan'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPrintPanelInfo {	Str31						startPanelName;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPrintPanelInfo gxPrintPanelInfo;enum  {	gxFormatPanelTag			= 'fpan'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFormatPanelInfo {	Str31						startPanelName;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFormatPanelInfo gxFormatPanelInfo;enum  {	gxTranslatedDocumentTag		= 'trns'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxTranslatedDocumentInfo {	long						translatorInfo;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxTranslatedDocumentInfo gxTranslatedDocumentInfo;enum  {	gxPaperTypeLockTag			= 'ptlk'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPaperTypeLockInfo {	Boolean						paperTypeLocked;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPaperTypeLockInfo gxPaperTypeLockInfo;enum  {	gxOrientationTag			= 'layo'};enum  {	gxPortraitLayout			= (char)0,	gxLandscapeLayout			= (char)1,	gxRotatedPortraitLayout		= (char)2,	gxRotatedLandscapeLayout	= (char)3};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxOrientationInfo {	char						orientation;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxOrientationInfo gxOrientationInfo;enum  {	gxScalingTag				= 'scal'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxScalingInfo {	Fixed						horizontalScaleFactor;	Fixed						verticalScaleFactor;	short						minScaling;	short						maxScaling;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxScalingInfo gxScalingInfo;enum  {	gxDirectModeTag				= 'dirm'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxDirectModeInfo {	Boolean						directModeOn;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxDirectModeInfo gxDirectModeInfo;enum  {	gxFormatHalftoneTag			= 'half'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFormatHalftoneInfo {	long						numHalftones;	gxHalftone					halftones[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFormatHalftoneInfo gxFormatHalftoneInfo;enum  {	gxInvertPageTag				= 'invp'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxInvertPageInfo {	Boolean						invert;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxInvertPageInfo gxInvertPageInfo;enum  {	gxFlipPageHorizontalTag		= 'flph'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFlipPageHorizontalInfo {	Boolean						flipHorizontal;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFlipPageHorizontalInfo gxFlipPageHorizontalInfo;enum  {	gxFlipPageVerticalTag		= 'flpv'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFlipPageVerticalInfo {	Boolean						flipVertical;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFlipPageVerticalInfo gxFlipPageVerticalInfo;enum  {	gxPreciseBitmapsTag			= 'pbmp'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPreciseBitmapInfo {	Boolean						preciseBitmaps;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPreciseBitmapInfo gxPreciseBitmapInfo;enum  {	gxBaseTag					= 'base'};enum  {	gxUnknownBase				= 0,	gxUSLetterBase				= 1,	gxUSLegalBase				= 2,	gxA4LetterBase				= 3,	gxB5LetterBase				= 4,	gxTabloidBase				= 5};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxBaseInfo {	long						baseType;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxBaseInfo gxBaseInfo;enum  {	gxCreatorTag				= 'crea'};enum  {	gxSysPaperType				= 'sypt',	gxUserPaperType				= 'uspt'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxCreatorInfo {	OSType						creator;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxCreatorInfo gxCreatorInfo;enum  {	gxUnitsTag					= 'unit'};enum  {	gxPicas						= (char)0,	gxMMs						= (char)1,	gxInches					= (char)2};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxUnitsInfo {	char						units;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxUnitsInfo gxUnitsInfo;enum  {	gxFlagsTag					= 'flag'};enum  {	gxOldPaperTypeFlag			= 0x00800000,	gxNewPaperTypeFlag			= 0x00400000,	gxOldAndNewPaperTypeFlag	= 0x00C00000,	gxDefaultPaperTypeFlag		= 0x00100000};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFlagsInfo {	long						flags;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFlagsInfo gxFlagsInfo;enum  {	gxCommentTag				= 'cmnt'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxCommentInfo {	Str255						comment;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxCommentInfo gxCommentInfo;enum  {	gxPenTableTag				= 'pent'};enum  {	gxDeviceUnits				= 0,	gxMMUnits					= 1,	gxInchesUnits				= 2};enum  {	gxPenNotLoaded				= -1};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPenTableEntry {	Str31						penName;	gxColor						penColor;	Fixed						penThickness;	short						penUnits;	short						penPosition;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPenTableEntry gxPenTableEntry;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPenTable {	long						numPens;	gxPenTableEntry				pens[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPenTable gxPenTable, *gxPenTablePtr, **gxPenTableHdl;typedef long gxDialogResult;enum  {	gxCancelSelected			= (gxDialogResult)0,	gxOKSelected				= (gxDialogResult)1,	gxRevertSelected			= (gxDialogResult)2};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxEditMenuRecord {	short						editMenuID;	short						cutItem;	short						copyItem;	short						pasteItem;	short						clearItem;	short						undoItem;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxEditMenuRecord gxEditMenuRecord;typedef long gxQueryType;enum  {	gxGetJobFormatLineConstraintQuery = (gxQueryType)0,	gxGetJobFormatFontsQuery	= (gxQueryType)1,	gxGetJobFormatFontCommonStylesQuery = (gxQueryType)2,	gxGetJobFormatFontConstraintQuery = (gxQueryType)3,	gxSetStyleJobFormatCommonStyleQuery = (gxQueryType)4};typedef OSType gxJobFormatMode;enum  {	gxGraphicsJobFormatMode		= (gxJobFormatMode)'grph',	gxTextJobFormatMode			= (gxJobFormatMode)'text',	gxPostScriptJobFormatMode	= (gxJobFormatMode)'post'};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxJobFormatModeTable {	long						numModes;	gxJobFormatMode				modes[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxJobFormatModeTable gxJobFormatModeTable, *gxJobFormatModeTablePtr, **gxJobFormatModeTableHdl;enum  {	gxConstraintRange			= -1};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPositionConstraintTable {	gxPoint						phase;	gxPoint						offset;	long						numSizes;	Fixed						sizes[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPositionConstraintTable gxPositionConstraintTable, *gxPositionConstraintTablePtr, **gxPositionConstraintTableHdl;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxStyleNameTable {	long						numStyleNames;	Str255						styleNames[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxStyleNameTable gxStyleNameTable, *gxStyleNameTablePtr, **gxStyleNameTableHdl;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFontTable {	long						numFonts;	gxFont						fonts[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxFontTable gxFontTable, *gxFontTablePtr, **gxFontTableHdl;#define GXPUBLICAPIGLUE(selector) {0x203C, 0x0000, selector, 0xABFE}#ifdef __cplusplusextern "C" {#endifextern pascal OSErr GXInitPrinting(void) FOURWORDINLINE(0x203C, 0x0000, 0, 0xABFE);extern pascal OSErr GXExitPrinting(void) FOURWORDINLINE(0x203C, 0x0000, 1, 0xABFE);extern pascal OSErr GXNewJob(gxJob *) FOURWORDINLINE(0x203C, 0x0000, 2, 0xABFE);extern pascal OSErr GXDisposeJob(gxJob) FOURWORDINLINE(0x203C, 0x0000, 3, 0xABFE);extern pascal void GXFlattenJob(gxJob, gxPrintingFlattenProc, void *) FOURWORDINLINE(0x203C, 0x0000, 4, 0xABFE);extern pascal gxJob GXUnflattenJob(gxJob, gxPrintingFlattenProc, void *) FOURWORDINLINE(0x203C, 0x0000, 5, 0xABFE);extern pascal Handle GXFlattenJobToHdl(gxJob, Handle) FOURWORDINLINE(0x203C, 0x0000, 6, 0xABFE);extern pascal gxJob GXUnflattenJobFromHdl(gxJob, Handle) FOURWORDINLINE(0x203C, 0x0000, 7, 0xABFE);extern pascal void GXInstallApplicationOverride(gxJob, short messageID, void *override) FOURWORDINLINE(0x203C, 0x0000, 8, 0xABFE);extern pascal gxFormat GXNewFormat(gxJob) FOURWORDINLINE(0x203C, 0x0000, 9, 0xABFE);extern pascal void GXDisposeFormat(gxFormat) FOURWORDINLINE(0x203C, 0x0000, 10, 0xABFE);extern pascal gxPaperType GXNewPaperType(gxJob, Str31 name, gxRectangle *pageSize, gxRectangle *paperSize) FOURWORDINLINE(0x203C, 0x0000, 11, 0xABFE);extern pascal void GXDisposePaperType(gxPaperType) FOURWORDINLINE(0x203C, 0x0000, 12, 0xABFE);extern pascal gxPaperType GXGetNewPaperType(gxJob, short resID) FOURWORDINLINE(0x203C, 0x0000, 13, 0xABFE);extern pascal OSErr GXGetJobError(gxJob) FOURWORDINLINE(0x203C, 0x0000, 14, 0xABFE);extern pascal void GXSetJobError(gxJob, OSErr) FOURWORDINLINE(0x203C, 0x0000, 15, 0xABFE);extern pascal gxDialogResult GXJobDefaultFormatDialog(gxJob, gxEditMenuRecord *) FOURWORDINLINE(0x203C, 0x0000, 16, 0xABFE);extern pascal gxDialogResult GXJobPrintDialog(gxJob, gxEditMenuRecord *) FOURWORDINLINE(0x203C, 0x0000, 17, 0xABFE);extern pascal gxDialogResult GXFormatDialog(gxFormat, gxEditMenuRecord *, StringPtr title) FOURWORDINLINE(0x203C, 0x0000, 18, 0xABFE);extern pascal gxFormat GXGetJobFormat(gxJob, long whichFormat) FOURWORDINLINE(0x203C, 0x0000, 19, 0xABFE);extern pascal gxJob GXGetFormatJob(gxFormat) FOURWORDINLINE(0x203C, 0x0000, 20, 0xABFE);extern pascal gxPaperType GXGetFormatPaperType(gxFormat) FOURWORDINLINE(0x203C, 0x0000, 21, 0xABFE);extern pascal void GXGetFormatDimensions(gxFormat, gxRectangle *pageSize, gxRectangle *paperSize) FOURWORDINLINE(0x203C, 0x0000, 22, 0xABFE);extern pascal void GXGetJobPageRange(gxJob theJob, long *firstPage, long *lastPage) FOURWORDINLINE(0x203C, 0x0000, 23, 0xABFE);extern pascal void GXStartJob(gxJob, StringPtr docName, long pageCount) FOURWORDINLINE(0x203C, 0x0000, 24, 0xABFE);extern pascal void GXPrintPage(gxJob, long pageNumber, gxFormat, gxShape thePage) FOURWORDINLINE(0x203C, 0x0000, 25, 0xABFE);extern pascal Boolean GXStartPage(gxJob, long pageNumber, gxFormat, long numViewPorts, gxViewPort *viewPortList) FOURWORDINLINE(0x203C, 0x0000, 26, 0xABFE);extern pascal void GXFinishPage(gxJob) FOURWORDINLINE(0x203C, 0x0000, 27, 0xABFE);extern pascal void GXFinishJob(gxJob) FOURWORDINLINE(0x203C, 0x0000, 28, 0xABFE);extern pascal Collection GXGetJobCollection(gxJob) FOURWORDINLINE(0x203C, 0x0000, 29, 0xABFE);extern pascal void *GXGetJobRefCon(gxJob) FOURWORDINLINE(0x203C, 0x0000, 30, 0xABFE);extern pascal void GXSetJobRefCon(gxJob, void *refCon) FOURWORDINLINE(0x203C, 0x0000, 31, 0xABFE);extern pascal gxJob GXCopyJob(gxJob srcJob, gxJob dstJob) FOURWORDINLINE(0x203C, 0x0000, 32, 0xABFE);extern pascal void GXSelectJobFormattingPrinter(gxJob, Str31 printerName) FOURWORDINLINE(0x203C, 0x0000, 33, 0xABFE);extern pascal void GXSelectJobOutputPrinter(gxJob, Str31 printerName) FOURWORDINLINE(0x203C, 0x0000, 34, 0xABFE);extern pascal void GXForEachJobFormatDo(gxJob, gxFormatProc, void *refCon) FOURWORDINLINE(0x203C, 0x0000, 35, 0xABFE);extern pascal long GXCountJobFormats(gxJob) FOURWORDINLINE(0x203C, 0x0000, 36, 0xABFE);extern pascal Boolean GXUpdateJob(gxJob) FOURWORDINLINE(0x203C, 0x0000, 37, 0xABFE);extern pascal void GXConvertPrintRecord(gxJob, THPrint) FOURWORDINLINE(0x203C, 0x0000, 38, 0xABFE);extern pascal gxPrinter GXGetJobFormattingPrinter(gxJob) FOURWORDINLINE(0x203C, 0x0000, 39, 0xABFE);extern pascal gxPrinter GXGetJobOutputPrinter(gxJob) FOURWORDINLINE(0x203C, 0x0000, 40, 0xABFE);extern pascal gxPrinter GXGetJobPrinter(gxJob) FOURWORDINLINE(0x203C, 0x0000, 41, 0xABFE);extern pascal gxJob GXGetPrinterJob(gxPrinter) FOURWORDINLINE(0x203C, 0x0000, 42, 0xABFE);extern pascal void GXForEachPrinterViewDeviceDo(gxPrinter, gxViewDeviceProc, void *refCon) FOURWORDINLINE(0x203C, 0x0000, 43, 0xABFE);extern pascal long GXCountPrinterViewDevices(gxPrinter) FOURWORDINLINE(0x203C, 0x0000, 44, 0xABFE);extern pascal gxViewDevice GXGetPrinterViewDevice(gxPrinter, long whichViewDevice) FOURWORDINLINE(0x203C, 0x0000, 45, 0xABFE);extern pascal void GXSelectPrinterViewDevice(gxPrinter, long whichViewDevice) FOURWORDINLINE(0x203C, 0x0000, 46, 0xABFE);extern pascal void GXGetPrinterName(gxPrinter, Str31) FOURWORDINLINE(0x203C, 0x0000, 47, 0xABFE);extern pascal OSType GXGetPrinterType(gxPrinter) FOURWORDINLINE(0x203C, 0x0000, 48, 0xABFE);extern pascal void GXGetPrinterDriverName(gxPrinter, Str31) FOURWORDINLINE(0x203C, 0x0000, 49, 0xABFE);extern pascal OSType GXGetPrinterDriverType(gxPrinter) FOURWORDINLINE(0x203C, 0x0000, 50, 0xABFE);extern pascal Collection GXGetFormatCollection(gxFormat) FOURWORDINLINE(0x203C, 0x0000, 51, 0xABFE);extern pascal void GXChangedFormat(gxFormat) FOURWORDINLINE(0x203C, 0x0000, 52, 0xABFE);extern pascal gxFormat GXCopyFormat(gxFormat srcFormat, gxFormat dstFormat) FOURWORDINLINE(0x203C, 0x0000, 53, 0xABFE);extern pascal gxFormat GXCloneFormat(gxFormat) FOURWORDINLINE(0x203C, 0x0000, 54, 0xABFE);extern pascal long GXCountFormatOwners(gxFormat) FOURWORDINLINE(0x203C, 0x0000, 55, 0xABFE);extern pascal void GXGetFormatMapping(gxFormat, gxMapping *) FOURWORDINLINE(0x203C, 0x0000, 56, 0xABFE);extern pascal gxShape GXGetFormatForm(gxFormat, gxShape *mask) FOURWORDINLINE(0x203C, 0x0000, 57, 0xABFE);extern pascal void GXSetFormatForm(gxFormat, gxShape form, gxShape mask) FOURWORDINLINE(0x203C, 0x0000, 58, 0xABFE);extern pascal void GXSetAvailableJobFormatModes(gxJob, gxJobFormatModeTableHdl) FOURWORDINLINE(0x203C, 0x0000, 59, 0xABFE);extern pascal gxJobFormatMode GXGetPreferredJobFormatMode(gxJob, Boolean *directOnly) FOURWORDINLINE(0x203C, 0x0000, 60, 0xABFE);extern pascal gxJobFormatMode GXGetJobFormatMode(gxJob) FOURWORDINLINE(0x203C, 0x0000, 61, 0xABFE);extern pascal void GXSetJobFormatMode(gxJob, gxJobFormatMode) FOURWORDINLINE(0x203C, 0x0000, 62, 0xABFE);extern pascal void GXJobFormatModeQuery(gxJob, gxQueryType, void *srcData, void *dstData) FOURWORDINLINE(0x203C, 0x0000, 63, 0xABFE);extern pascal void GXEnableJobScalingPanel(gxJob, Boolean enabled) FOURWORDINLINE(0x203C, 0x0000, 64, 0xABFE);extern pascal void GXGetJobPanelDimensions(gxJob, Rect *) FOURWORDINLINE(0x203C, 0x0000, 65, 0xABFE);extern pascal long GXCountJobPaperTypes(gxJob, Boolean forFormatDevice) FOURWORDINLINE(0x203C, 0x0000, 66, 0xABFE);extern pascal gxPaperType GXGetJobPaperType(gxJob, long whichPaperType, Boolean forFormatDevice, gxPaperType) FOURWORDINLINE(0x203C, 0x0000, 67, 0xABFE);extern pascal void GXForEachJobPaperTypeDo(gxJob, gxPaperTypeProc, void *refCon, Boolean forFormattingPrinter) FOURWORDINLINE(0x203C, 0x0000, 68, 0xABFE);extern pascal gxPaperType GXCopyPaperType(gxPaperType srcPaperType, gxPaperType dstPaperType) FOURWORDINLINE(0x203C, 0x0000, 69, 0xABFE);extern pascal void GXGetPaperTypeName(gxPaperType, Str31) FOURWORDINLINE(0x203C, 0x0000, 70, 0xABFE);extern pascal void GXGetPaperTypeDimensions(gxPaperType, gxRectangle *pageSize, gxRectangle *paperSize) FOURWORDINLINE(0x203C, 0x0000, 71, 0xABFE);extern pascal gxJob GXGetPaperTypeJob(gxPaperType) FOURWORDINLINE(0x203C, 0x0000, 72, 0xABFE);extern pascal Collection GXGetPaperTypeCollection(gxPaperType) FOURWORDINLINE(0x203C, 0x0000, 73, 0xABFE);extern pascal gxPrintFile GXOpenPrintFile(gxJob, FSSpecPtr, char permission) FOURWORDINLINE(0x203C, 0x0000, 74, 0xABFE);extern pascal void GXClosePrintFile(gxPrintFile) FOURWORDINLINE(0x203C, 0x0000, 75, 0xABFE);extern pascal gxJob GXGetPrintFileJob(gxPrintFile) FOURWORDINLINE(0x203C, 0x0000, 76, 0xABFE);extern pascal long GXCountPrintFilePages(gxPrintFile) FOURWORDINLINE(0x203C, 0x0000, 77, 0xABFE);extern pascal void GXReadPrintFilePage(gxPrintFile, long pageNumber, long numViewPorts, gxViewPort *viewPortList, gxFormat *, gxShape *) FOURWORDINLINE(0x203C, 0x0000, 78, 0xABFE);extern pascal void GXReplacePrintFilePage(gxPrintFile, long pageNumber, gxFormat, gxShape) FOURWORDINLINE(0x203C, 0x0000, 79, 0xABFE);extern pascal void GXInsertPrintFilePage(gxPrintFile, long atPageNumber, gxFormat, gxShape) FOURWORDINLINE(0x203C, 0x0000, 80, 0xABFE);extern pascal void GXDeletePrintFilePageRange(gxPrintFile, long fromPageNumber, long toPageNumber) FOURWORDINLINE(0x203C, 0x0000, 81, 0xABFE);extern pascal void GXSavePrintFile(gxPrintFile, FSSpec *) FOURWORDINLINE(0x203C, 0x0000, 82, 0xABFE);extern pascal long GXFindPrinterProfile(gxPrinter, void *searchData, long index, gxColorProfile *returnedProfile) FOURWORDINLINE(0x203C, 0x0000, 83, 0xABFE);extern pascal long GXFindFormatProfile(gxFormat, void *searchData, long index, gxColorProfile *returnedProfile) FOURWORDINLINE(0x203C, 0x0000, 84, 0xABFE);extern pascal void GXSetPrinterProfile(gxPrinter, gxColorProfile oldProfile, gxColorProfile newProfile) FOURWORDINLINE(0x203C, 0x0000, 85, 0xABFE);extern pascal void GXSetFormatProfile(gxFormat, gxColorProfile oldProfile, gxColorProfile newProfile) FOURWORDINLINE(0x203C, 0x0000, 86, 0xABFE);extern pascal void GXIdleJob(gxJob) FOURWORDINLINE(0x203C, 0x0000, 87, 0xABFE);#ifdef __cplusplus}#endif#endif