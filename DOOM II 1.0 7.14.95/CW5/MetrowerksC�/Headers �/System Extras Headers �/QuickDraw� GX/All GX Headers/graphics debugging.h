/*	File:		graphics debugging.h	Copyright:	© 1984-1994 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef graphicsDebuggingIncludes#define graphicsDebuggingIncludes	#ifndef graphicsTypesIncludes#include "graphics types.h"/*	#include "math types.h"										*//*		#include <Types.h>										*//*			#include <ConditionalMacros.h>						*//*			#include <MixedMode.h>								*//*				#include <Traps.h>								*/	#endif	#ifndef graphicsLinkageIncludes#include "graphics linkage.h"	#endifenum gxValidationLevels {	gxNoValidation				= 0x00,	gxPublicValidation			= 0x01,	gxInternalValidation		= 0x02,	gxTypeValidation			= 0x00,	gxStructureValidation		= 0x10,	gxAllObjectValidation		= 0x20,	gxNoMemoryManagerValidation	= 0x0000,	gxApBlockValidation			= 0x0100,	gxFontBlockValidation		= 0x0200,	gxApHeapValidation			= 0x0400,	gxFontHeapValidation		= 0x0800,	gxCheckApHeapValidation		= 0x1000,	gxCheckFontHeapValidation	= 0x2000};typedef long gxValidationLevel;enum gxDrawErrors {	no_draw_error,	shape_emptyType,	shape_inverse_fullType,	rectangle_zero_width,	rectangle_zero_height,	polygon_empty,	path_empty,	bitmap_zero_width,	bitmap_zero_height,	text_empty,	glyph_empty,	layout_empty,	picture_empty,	shape_no_fill,	shape_no_enclosed_area,	shape_no_enclosed_pixels,	shape_very_small,	shape_very_large,	shape_contours_cancel,	pen_too_small,	text_size_too_small,	dash_empty,	start_cap_empty,	pattern_empty,	textFace_empty,	shape_primitive_empty,	shape_primitive_very_small,	transfer_equals_noMode,	transfer_matrix_ignores_source,	transfer_matrix_ignores_device,	transfer_source_reject,	transfer_mode_ineffective,	colorSet_no_entries,	bitmap_colorSet_one_entry,	transform_scale_too_small,	transform_map_too_large,	transform_move_too_large,	transform_scale_too_large,	transform_rotate_too_large,	transform_perspective_too_large,	transform_skew_too_large,	transform_clip_no_intersection,	transform_clip_empty,	transform_no_viewPorts,	viewPort_disposed,	viewPort_clip_empty,	viewPort_clip_no_intersection,	viewPort_scale_too_small,	viewPort_map_too_large,	viewPort_move_too_large,	viewPort_scale_too_large,	viewPort_rotate_too_large,	viewPort_perspective_too_large,	viewPort_skew_too_large,	viewPort_viewGroup_offscreen,	viewDevice_clip_no_intersection,	viewDevice_scale_too_small,	viewDevice_map_too_large,	viewDevice_move_too_large,	viewDevice_scale_too_large,	viewDevice_rotate_too_large,	viewDevice_perspective_too_large,	viewDevice_skew_too_large};typedef long gxDrawError;typedef boolean (*gxUserDebugFunction)(const char *str, long message, long reference);	#ifdef __cplusplusextern "C" {	#endifextern gxDrawError GXGetShapeDrawError(gxShape source) THREEWORDINLINE(0x303C, 0x1ee, 0xA832);extern void GXValidateAll(void) THREEWORDINLINE(0x303C, 0x1ef, 0xA832);extern void GXValidateColorSet(gxColorSet) THREEWORDINLINE(0x303C, 0x1f0, 0xA832);extern void GXValidateColorProfile(gxColorProfile) THREEWORDINLINE(0x303C, 0x1f1, 0xA832);extern void GXValidateGraphicsClient(gxGraphicsClient) THREEWORDINLINE(0x303C, 0x1f2, 0xA832);extern void GXValidateInk(gxInk) THREEWORDINLINE(0x303C, 0x1f3, 0xA832);extern void GXValidateShape(gxShape) THREEWORDINLINE(0x303C, 0x1f4, 0xA832);extern void GXValidateStyle(gxStyle) THREEWORDINLINE(0x303C, 0x1f5, 0xA832);extern void GXValidateTag(gxTag) THREEWORDINLINE(0x303C, 0x1f6, 0xA832);extern void GXValidateTransform(gxTransform) THREEWORDINLINE(0x303C, 0x1f7, 0xA832);extern void GXValidateViewDevice(gxViewDevice) THREEWORDINLINE(0x303C, 0x1f8, 0xA832);extern void GXValidateViewPort(gxViewPort) THREEWORDINLINE(0x303C, 0x1f9, 0xA832);extern void GXValidateViewGroup(gxViewGroup) THREEWORDINLINE(0x303C, 0x1fa, 0xA832);extern gxValidationLevel GXGetValidation(void) THREEWORDINLINE(0x303C, 0x1fb, 0xA832);extern void GXSetValidation(gxValidationLevel) THREEWORDINLINE(0x303C, 0x1fc, 0xA832);extern long GXGetValidationError(char *procedureName, void **argument, long *argumentNumber) THREEWORDINLINE(0x303C, 0x1fd, 0xA832);extern boolean GXGetGraphicsBugParametersPointer(struct graphicsBugParameters **blockPointer) THREEWORDINLINE(0x303C, 0x1fe, 0xA832);extern gxUserDebugFunction GXGetUserGraphicsDebug(long *reference) THREEWORDINLINE(0x303C, 0x1ff, 0xA832);extern void GXSetUserGraphicsDebug(gxUserDebugFunction userFunction, long reference) THREEWORDINLINE(0x303C, 0x200, 0xA832);	#ifdef __cplusplus}	#endif#endif