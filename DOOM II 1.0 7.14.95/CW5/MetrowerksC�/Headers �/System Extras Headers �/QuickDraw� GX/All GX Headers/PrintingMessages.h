/*	File:		PrintingMessages.h	Copyright:	© 1984-1994 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef __PRINTINGMESSAGES__#define __PRINTINGMESSAGES__#ifndef __PRINTINGMANAGER__#include <PrintingManager.h>/*	#include <Printing.h>										*//*		#include <Quickdraw.h>									*//*			#include <Types.h>									*//*				#include <ConditionalMacros.h>					*//*				#include <MixedMode.h>							*//*					#include <Traps.h>							*//*			#include <QuickdrawText.h>							*//*				#include <IntlResources.h>						*//*		#include <Dialogs.h>									*//*			#include <Windows.h>								*//*				#include <Events.h>								*//*					#include <OSUtils.h>						*//*				#include <Controls.h>							*//*					#include <Menus.h>							*//*			#include <TextEdit.h>								*//*	#include <Files.h>											*//*		#include <SegLoad.h>									*//*	#include <Collections.h>									*//*	#include <PrintingErrors.h>									*//*	#include <graphics types.h>									*//*		#include "math types.h"									*//*	#include <font types.h>										*//*	#include <scaler types.h>									*//*		#include "sfnt types.h"									*/#endif#ifndef __PRINTINGRESTYPES__#include <PrintingResTypes.h>#endif#ifndef __MESSAGEMANAGER__#include <Messages.h>#endif#ifndef __MENUS__#endif#ifndef __LISTS__#include <Lists.h>/*	#include <Memory.h>											*/#endif#ifndef __DIALOGS__#endiftypedef struct gxPrivateFileRecord *gxSpoolFile;typedef long gxPanelEvent;enum  {	gxPanelNoEvt				= (gxPanelEvent)0,	gxPanelOpenEvt				= (gxPanelEvent)1,	gxPanelCloseEvt				= (gxPanelEvent)2,	gxPanelHitEvt				= (gxPanelEvent)3,	gxPanelActivateEvt			= (gxPanelEvent)4,	gxPanelDeactivateEvt		= (gxPanelEvent)5,	gxPanelIconFocusEvt			= (gxPanelEvent)6,	gxPanelPanelFocusEvt		= (gxPanelEvent)7,	gxPanelFilterEvt			= (gxPanelEvent)8,	gxPanelCancelEvt			= (gxPanelEvent)9,	gxPanelConfirmEvt			= (gxPanelEvent)10,	gxPanelDialogEvt			= (gxPanelEvent)11,	gxPanelOtherEvt				= (gxPanelEvent)12,	gxPanelUserWillConfirmEvt	= (gxPanelEvent)13};typedef long gxPanelResult;enum  {	gxPanelNoResult				= 0,	gxPanelCancelConfirmation	= 1};enum  {	gxOtherAction				= 0,	gxClosePanelAction			= 1,	gxCancelDialogAction		= 2,	gxConfirmDialogAction		= 3};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPanelInfoRecord {	gxPanelEvent				panelEvt;	short						panelResId;	DialogPtr					pDlg;	EventRecord					*theEvent;	short						itemHit;	short						itemCount;	short						evtAction;	short						errorStringId;	gxFormat					theFormat;	void						*refCon;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPanelInfoRecord gxPanelInfoRecord;typedef long gxPrintingPanelKind;enum  {	gxApplicationPanel			= (gxPrintingPanelKind)0,	gxExtensionPanel			= (gxPrintingPanelKind)1,	gxDriverPanel				= (gxPrintingPanelKind)2};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPanelSetupRecord {	gxPrintingPanelKind			panelKind;	short						panelResId;	short						resourceRefNum;	void						*refCon;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPanelSetupRecord gxPanelSetupRecord;typedef long gxParsePageRangeResult;enum  {	gxRangeNotParsed			= (gxParsePageRangeResult)0,	gxRangeParsed				= (gxParsePageRangeResult)1,	gxRangeBadFromValue			= (gxParsePageRangeResult)2,	gxRangeBadToValue			= (gxParsePageRangeResult)3};enum  {	gxNonFatalError				= 1,	gxFatalError				= 2,	gxPrinterReady				= 3,	gxUserAttention				= 4,	gxUserAlert					= 5,	gxPageTransmission			= 6,	gxOpenConnectionStatus		= 7,	gxInformationalStatus		= 8,	gxSpoolingPageStatus		= 9,	gxEndStatus					= 10,	gxPercentageStatus			= 11};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxStatusRecord {	unsigned short				statusType;	unsigned short				statusId;	unsigned short				statusAlertId;	Signature					statusOwner;	short						statResId;	short						statResIndex;	short						dialogResult;	unsigned short				bufferLen;	char						statusBuffer[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxStatusRecord gxStatusRecord;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxDisplayRecord {	Boolean						useText;	Handle						hPicture;	Str255						theText;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxDisplayRecord gxDisplayRecord;typedef long gxTrayMapping;enum  {	gxDefaultTrayMapping		= (gxTrayMapping)0,	gxConfiguredTrayMapping		= (gxTrayMapping)1};#define GXPROTECTEDAPIGLUE(selector) {0x203C, 0x0001, selector, 0xABFE}#define GXPRINTINGDISPATCH(segID, selector) {0x203C, 0x0001, 0, 0x223C, (segID & 0x0FFF), selector << 2, 0xABFE}#ifdef __cplusplusextern "C" {#endif#ifndef __powerc#ifdef applec#else#endif#endifextern gxJob GXGetJob(void) FOURWORDINLINE(0x203C, 0x0001, 1, 0xABFE);extern short GXGetMessageHandlerResFile(void) FOURWORDINLINE(0x203C, 0x0001, 2, 0xABFE);extern Boolean GXSpoolingAborted(void) FOURWORDINLINE(0x203C, 0x0001, 3, 0xABFE);extern OSErr GXJobIdle(void) FOURWORDINLINE(0x203C, 0x0001, 4, 0xABFE);#if defined(applec) && !defined(powerc)extern OSErr GXReportStatus(short statusID, unsigned short statusIndex) FOURWORDINLINE(0x203C, 0x0001, 5, 0xABFE);#elseextern OSErr GXReportStatus(long statusID, unsigned long statusIndex) FOURWORDINLINE(0x203C, 0x0001, 5, 0xABFE);#endifextern OSErr GXAlertTheUser(gxStatusRecord *) FOURWORDINLINE(0x203C, 0x0001, 6, 0xABFE);extern OSErr GXSetupDialogPanel(gxPanelSetupRecord *) FOURWORDINLINE(0x203C, 0x0001, 7, 0xABFE);extern OSErr GXCountTrays(gxTrayIndex *numTrays) FOURWORDINLINE(0x203C, 0x0001, 8, 0xABFE);extern OSErr GXGetTrayName(gxTrayIndex trayNumber, Str31 trayName) FOURWORDINLINE(0x203C, 0x0001, 9, 0xABFE);extern OSErr GXSetTrayPaperType(gxTrayIndex whichTray, gxPaperType) FOURWORDINLINE(0x203C, 0x0001, 10, 0xABFE);extern OSErr GXGetTrayPaperType(gxTrayIndex whichTray, gxPaperType) FOURWORDINLINE(0x203C, 0x0001, 11, 0xABFE);extern OSErr GXGetTrayMapping(gxTrayMapping *trayMapping) FOURWORDINLINE(0x203C, 0x0001, 12, 0xABFE);extern void GXCleanupStartJob(void) FOURWORDINLINE(0x203C, 0x0001, 13, 0xABFE);extern void GXCleanupStartPage(void) FOURWORDINLINE(0x203C, 0x0001, 14, 0xABFE);extern void GXCleanupOpenConnection(void) FOURWORDINLINE(0x203C, 0x0001, 15, 0xABFE);extern void GXCleanupStartSendPage(void) FOURWORDINLINE(0x203C, 0x0001, 16, 0xABFE);enum  {	gxNoCreateOptions			= 0x00000000,	gxInhibitAlias				= 0x00000001,	gxInhibitUniqueName			= 0x00000002,	gxResolveBitmapAlias		= 0x00000004};enum  {	gxNoCloseOptions			= 0x00000000,	gxDeleteOnClose				= 0x00000001,	gxUpdateJobData				= 0x00000002,	gxMakeRemoteFile			= 0x00000004};enum  {	gxNoImageFile				= 0x00000000,	gxMakeImageFile				= 0x00000001,	gxEachPlane					= 0x00000002,	gxEachPage					= 0x00000004,	gxEntireFile				= gxEachPlane + gxEachPage};enum  {	gxNoBufferOptions			= 0x00000000,	gxMakeBufferHex				= 0x00000001,	gxDontSplitBuffer			= 0x00000002};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPrintingBuffer {	long						size;	long						userData;	char						data[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPrintingBuffer gxPrintingBuffer;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPageInfoRecord {	long						docPageNum;	long						copyNum;	Boolean						formatChanged;	Boolean						pageChanged;	long						internalUse;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef struct gxPageInfoRecord gxPageInfoRecord;#define GXUNIVSENDGLUE(selector) SendMessageGlue(0x0000, selector)#define GXFORWARDGLUE ForwardThisMessageGlue#define Send_GXFetchTaggedDriverData(tag, id, pHandle) Send_GXFetchTaggedData(tag, id, pHandle, 'drvr')#define Forward_GXFetchTaggedDriverData(tag, id, pHandle) Forward_GXFetchTaggedData(tag, id, pHandle, 'drvr')typedef OSErr (*GXJobIdleProcPtr)(void);enum {	uppGXJobIdleProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXJobIdleUPP;#define CallGXJobIdleProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXJobIdleProcInfo)#define NewGXJobIdleProc(userRoutine)		\		(GXJobIdleUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXJobIdleProcInfo, GetCurrentISA())#elsetypedef GXJobIdleProcPtr GXJobIdleUPP;#define CallGXJobIdleProc(userRoutine)		\		(*(userRoutine))()#define NewGXJobIdleProc(userRoutine)		\		(GXJobIdleUPP)(userRoutine)#endifextern OSErr Send_GXJobIdle(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 2, 0xABFB);extern OSErr Forward_GXJobIdle(void) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXJobStatusProcPtr)(gxStatusRecord *pStatus);enum {	uppGXJobStatusProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxStatusRecord*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXJobStatusUPP;#define CallGXJobStatusProc(userRoutine, pStatus)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXJobStatusProcInfo, (pStatus))#define NewGXJobStatusProc(userRoutine)		\		(GXJobStatusUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXJobStatusProcInfo, GetCurrentISA())#elsetypedef GXJobStatusProcPtr GXJobStatusUPP;#define CallGXJobStatusProc(userRoutine, pStatus)		\		(*(userRoutine))((pStatus))#define NewGXJobStatusProc(userRoutine)		\		(GXJobStatusUPP)(userRoutine)#endifextern OSErr Send_GXJobStatus(gxStatusRecord *pStatus) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 3, 0xABFB);extern OSErr Forward_GXJobStatus(gxStatusRecord *pStatus) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXPrintingEventProcPtr)(EventRecord *eventPtr, Boolean filterEvent);enum {	uppGXPrintingEventProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(EventRecord*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Boolean)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXPrintingEventUPP;#define CallGXPrintingEventProc(userRoutine, eventPtr, filterEvent)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXPrintingEventProcInfo, (eventPtr), (filterEvent))#define NewGXPrintingEventProc(userRoutine)		\		(GXPrintingEventUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXPrintingEventProcInfo, GetCurrentISA())#elsetypedef GXPrintingEventProcPtr GXPrintingEventUPP;#define CallGXPrintingEventProc(userRoutine, eventPtr, filterEvent)		\		(*(userRoutine))((eventPtr), (filterEvent))#define NewGXPrintingEventProc(userRoutine)		\		(GXPrintingEventUPP)(userRoutine)#endifextern OSErr Send_GXPrintingEvent(EventRecord *, Boolean filterEvent) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 4, 0xABFB);extern OSErr Forward_GXPrintingEvent(EventRecord *, Boolean filterEvent) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXJobDefaultFormatDialogProcPtr)(gxDialogResult *dlgResult);enum {	uppGXJobDefaultFormatDialogProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxDialogResult*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXJobDefaultFormatDialogUPP;#define CallGXJobDefaultFormatDialogProc(userRoutine, dlgResult)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXJobDefaultFormatDialogProcInfo, (dlgResult))#define NewGXJobDefaultFormatDialogProc(userRoutine)		\		(GXJobDefaultFormatDialogUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXJobDefaultFormatDialogProcInfo, GetCurrentISA())#elsetypedef GXJobDefaultFormatDialogProcPtr GXJobDefaultFormatDialogUPP;#define CallGXJobDefaultFormatDialogProc(userRoutine, dlgResult)		\		(*(userRoutine))((dlgResult))#define NewGXJobDefaultFormatDialogProc(userRoutine)		\		(GXJobDefaultFormatDialogUPP)(userRoutine)#endifextern OSErr Send_GXJobDefaultFormatDialog(gxDialogResult *dlgResult) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 5, 0xABFB);extern OSErr Forward_GXJobDefaultFormatDialog(gxDialogResult *dlgResult) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXFormatDialogProcPtr)(gxFormat theFormat, StringPtr title, gxDialogResult *dlgResult);enum {	uppGXFormatDialogProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxFormat)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(StringPtr)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxDialogResult*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFormatDialogUPP;#define CallGXFormatDialogProc(userRoutine, theFormat, title, dlgResult)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFormatDialogProcInfo, (theFormat), (title), (dlgResult))#define NewGXFormatDialogProc(userRoutine)		\		(GXFormatDialogUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFormatDialogProcInfo, GetCurrentISA())#elsetypedef GXFormatDialogProcPtr GXFormatDialogUPP;#define CallGXFormatDialogProc(userRoutine, theFormat, title, dlgResult)		\		(*(userRoutine))((theFormat), (title), (dlgResult))#define NewGXFormatDialogProc(userRoutine)		\		(GXFormatDialogUPP)(userRoutine)#endifextern OSErr Send_GXFormatDialog(gxFormat theFormat, StringPtr title, gxDialogResult *dlgResult) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 6, 0xABFB);extern OSErr Forward_GXFormatDialog(gxFormat theFormat, StringPtr title, gxDialogResult *dlgResult) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXJobPrintDialogProcPtr)(gxDialogResult *dlgResult);enum {	uppGXJobPrintDialogProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxDialogResult*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXJobPrintDialogUPP;#define CallGXJobPrintDialogProc(userRoutine, dlgResult)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXJobPrintDialogProcInfo, (dlgResult))#define NewGXJobPrintDialogProc(userRoutine)		\		(GXJobPrintDialogUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXJobPrintDialogProcInfo, GetCurrentISA())#elsetypedef GXJobPrintDialogProcPtr GXJobPrintDialogUPP;#define CallGXJobPrintDialogProc(userRoutine, dlgResult)		\		(*(userRoutine))((dlgResult))#define NewGXJobPrintDialogProc(userRoutine)		\		(GXJobPrintDialogUPP)(userRoutine)#endifextern OSErr Send_GXJobPrintDialog(gxDialogResult *dlgResult) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 7, 0xABFB);extern OSErr Forward_GXJobPrintDialog(gxDialogResult *dlgResult) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXFilterPanelEventProcPtr)(gxPanelInfoRecord *pHitInfo, Boolean *returnImmed);enum {	uppGXFilterPanelEventProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxPanelInfoRecord*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Boolean*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFilterPanelEventUPP;#define CallGXFilterPanelEventProc(userRoutine, pHitInfo, returnImmed)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFilterPanelEventProcInfo, (pHitInfo), (returnImmed))#define NewGXFilterPanelEventProc(userRoutine)		\		(GXFilterPanelEventUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFilterPanelEventProcInfo, GetCurrentISA())#elsetypedef GXFilterPanelEventProcPtr GXFilterPanelEventUPP;#define CallGXFilterPanelEventProc(userRoutine, pHitInfo, returnImmed)		\		(*(userRoutine))((pHitInfo), (returnImmed))#define NewGXFilterPanelEventProc(userRoutine)		\		(GXFilterPanelEventUPP)(userRoutine)#endifextern OSErr Send_GXFilterPanelEvent(gxPanelInfoRecord *pHitInfo, Boolean *returnImmed) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 8, 0xABFB);typedef OSErr (*GXHandlePanelEventProcPtr)(gxPanelInfoRecord *pHitInfo, gxPanelResult *panelResponse);enum {	uppGXHandlePanelEventProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxPanelInfoRecord*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxPanelResult*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXHandlePanelEventUPP;#define CallGXHandlePanelEventProc(userRoutine, pHitInfo, panelResponse)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXHandlePanelEventProcInfo, (pHitInfo), (panelResponse))#define NewGXHandlePanelEventProc(userRoutine)		\		(GXHandlePanelEventUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXHandlePanelEventProcInfo, GetCurrentISA())#elsetypedef GXHandlePanelEventProcPtr GXHandlePanelEventUPP;#define CallGXHandlePanelEventProc(userRoutine, pHitInfo, panelResponse)		\		(*(userRoutine))((pHitInfo), (panelResponse))#define NewGXHandlePanelEventProc(userRoutine)		\		(GXHandlePanelEventUPP)(userRoutine)#endifextern OSErr Send_GXHandlePanelEvent(gxPanelInfoRecord *pHitInfo, gxPanelResult *panelResponse) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 9, 0xABFB);typedef OSErr (*GXParsePageRangeProcPtr)(StringPtr fromString, StringPtr toString, gxParsePageRangeResult *result);enum {	uppGXParsePageRangeProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(StringPtr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(StringPtr)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxParsePageRangeResult*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXParsePageRangeUPP;#define CallGXParsePageRangeProc(userRoutine, fromString, toString, result)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXParsePageRangeProcInfo, (fromString), (toString), (result))#define NewGXParsePageRangeProc(userRoutine)		\		(GXParsePageRangeUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXParsePageRangeProcInfo, GetCurrentISA())#elsetypedef GXParsePageRangeProcPtr GXParsePageRangeUPP;#define CallGXParsePageRangeProc(userRoutine, fromString, toString, result)		\		(*(userRoutine))((fromString), (toString), (result))#define NewGXParsePageRangeProc(userRoutine)		\		(GXParsePageRangeUPP)(userRoutine)#endifextern OSErr Send_GXParsePageRange(StringPtr fromString, StringPtr toString, gxParsePageRangeResult *result) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 10, 0xABFB);extern OSErr Forward_GXParsePageRange(StringPtr fromString, StringPtr toString, gxParsePageRangeResult *result) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXDefaultJobProcPtr)(void);enum {	uppGXDefaultJobProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDefaultJobUPP;#define CallGXDefaultJobProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDefaultJobProcInfo)#define NewGXDefaultJobProc(userRoutine)		\		(GXDefaultJobUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDefaultJobProcInfo, GetCurrentISA())#elsetypedef GXDefaultJobProcPtr GXDefaultJobUPP;#define CallGXDefaultJobProc(userRoutine)		\		(*(userRoutine))()#define NewGXDefaultJobProc(userRoutine)		\		(GXDefaultJobUPP)(userRoutine)#endifextern OSErr Send_GXDefaultJob(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 11, 0xABFB);extern OSErr Forward_GXDefaultJob(void) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXDefaultFormatProcPtr)(gxFormat theFormat);enum {	uppGXDefaultFormatProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxFormat)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDefaultFormatUPP;#define CallGXDefaultFormatProc(userRoutine, theFormat)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDefaultFormatProcInfo, (theFormat))#define NewGXDefaultFormatProc(userRoutine)		\		(GXDefaultFormatUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDefaultFormatProcInfo, GetCurrentISA())#elsetypedef GXDefaultFormatProcPtr GXDefaultFormatUPP;#define CallGXDefaultFormatProc(userRoutine, theFormat)		\		(*(userRoutine))((theFormat))#define NewGXDefaultFormatProc(userRoutine)		\		(GXDefaultFormatUPP)(userRoutine)#endifextern OSErr Send_GXDefaultFormat(gxFormat theFormat) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 12, 0xABFB);extern OSErr Forward_GXDefaultFormat(gxFormat theFormat) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXDefaultPaperTypeProcPtr)(gxPaperType thePaperType);enum {	uppGXDefaultPaperTypeProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxPaperType)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDefaultPaperTypeUPP;#define CallGXDefaultPaperTypeProc(userRoutine, thePaperType)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDefaultPaperTypeProcInfo, (thePaperType))#define NewGXDefaultPaperTypeProc(userRoutine)		\		(GXDefaultPaperTypeUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDefaultPaperTypeProcInfo, GetCurrentISA())#elsetypedef GXDefaultPaperTypeProcPtr GXDefaultPaperTypeUPP;#define CallGXDefaultPaperTypeProc(userRoutine, thePaperType)		\		(*(userRoutine))((thePaperType))#define NewGXDefaultPaperTypeProc(userRoutine)		\		(GXDefaultPaperTypeUPP)(userRoutine)#endifextern OSErr Send_GXDefaultPaperType(gxPaperType thePaperType) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 13, 0xABFB);extern OSErr Forward_GXDefaultPaperType(gxPaperType thePaperType) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXDefaultPrinterProcPtr)(gxPrinter thePrinter);enum {	uppGXDefaultPrinterProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxPrinter)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDefaultPrinterUPP;#define CallGXDefaultPrinterProc(userRoutine, thePrinter)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDefaultPrinterProcInfo, (thePrinter))#define NewGXDefaultPrinterProc(userRoutine)		\		(GXDefaultPrinterUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDefaultPrinterProcInfo, GetCurrentISA())#elsetypedef GXDefaultPrinterProcPtr GXDefaultPrinterUPP;#define CallGXDefaultPrinterProc(userRoutine, thePrinter)		\		(*(userRoutine))((thePrinter))#define NewGXDefaultPrinterProc(userRoutine)		\		(GXDefaultPrinterUPP)(userRoutine)#endifextern OSErr Send_GXDefaultPrinter(gxPrinter thePrinter) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 14, 0xABFB);extern OSErr Forward_GXDefaultPrinter(gxPrinter thePrinter) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXCreateSpoolFileProcPtr)(FSSpecPtr pFileSpec, long createOptions, gxSpoolFile *theSpoolFile);enum {	uppGXCreateSpoolFileProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(FSSpecPtr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxSpoolFile*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCreateSpoolFileUPP;#define CallGXCreateSpoolFileProc(userRoutine, pFileSpec, createOptions, theSpoolFile)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCreateSpoolFileProcInfo, (pFileSpec), (createOptions), (theSpoolFile))#define NewGXCreateSpoolFileProc(userRoutine)		\		(GXCreateSpoolFileUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCreateSpoolFileProcInfo, GetCurrentISA())#elsetypedef GXCreateSpoolFileProcPtr GXCreateSpoolFileUPP;#define CallGXCreateSpoolFileProc(userRoutine, pFileSpec, createOptions, theSpoolFile)		\		(*(userRoutine))((pFileSpec), (createOptions), (theSpoolFile))#define NewGXCreateSpoolFileProc(userRoutine)		\		(GXCreateSpoolFileUPP)(userRoutine)#endifextern OSErr Send_GXCreateSpoolFile(FSSpecPtr pFileSpec, long createOptions, gxSpoolFile *theSpoolFile) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 15, 0xABFB);extern OSErr Forward_GXCreateSpoolFile(FSSpecPtr pFileSpec, long createOptions, gxSpoolFile *theSpoolFile) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXSpoolPageProcPtr)(gxSpoolFile theSpoolFile, gxFormat theFormat, gxShape thePage);enum {	uppGXSpoolPageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxFormat)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxShape)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXSpoolPageUPP;#define CallGXSpoolPageProc(userRoutine, theSpoolFile, theFormat, thePage)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXSpoolPageProcInfo, (theSpoolFile), (theFormat), (thePage))#define NewGXSpoolPageProc(userRoutine)		\		(GXSpoolPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXSpoolPageProcInfo, GetCurrentISA())#elsetypedef GXSpoolPageProcPtr GXSpoolPageUPP;#define CallGXSpoolPageProc(userRoutine, theSpoolFile, theFormat, thePage)		\		(*(userRoutine))((theSpoolFile), (theFormat), (thePage))#define NewGXSpoolPageProc(userRoutine)		\		(GXSpoolPageUPP)(userRoutine)#endifextern OSErr Send_GXSpoolPage(gxSpoolFile theSpoolFile, gxFormat theFormat, gxShape thePage) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 16, 0xABFB);extern OSErr Forward_GXSpoolPage(gxSpoolFile theSpoolFile, gxFormat theFormat, gxShape thePage) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXSpoolDataProcPtr)(gxSpoolFile theSpoolFile, Ptr data, long *length);enum {	uppGXSpoolDataProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXSpoolDataUPP;#define CallGXSpoolDataProc(userRoutine, theSpoolFile, data, length)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXSpoolDataProcInfo, (theSpoolFile), (data), (length))#define NewGXSpoolDataProc(userRoutine)		\		(GXSpoolDataUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXSpoolDataProcInfo, GetCurrentISA())#elsetypedef GXSpoolDataProcPtr GXSpoolDataUPP;#define CallGXSpoolDataProc(userRoutine, theSpoolFile, data, length)		\		(*(userRoutine))((theSpoolFile), (data), (length))#define NewGXSpoolDataProc(userRoutine)		\		(GXSpoolDataUPP)(userRoutine)#endifextern OSErr Send_GXSpoolData(gxSpoolFile theSpoolFile, Ptr data, long *length) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 17, 0xABFB);extern OSErr Forward_GXSpoolData(gxSpoolFile theSpoolFile, Ptr data, long *length) TWOWORDINLINE(0x7036, 0xABFB);#if defined(applec) && !defined(powerc)typedef OSErr (*GXSpoolResourceProcPtr)(gxSpoolFile theSpoolFile, Handle theResource, ResType theType, short id);enum {	uppGXSpoolResourceProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Handle)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(ResType)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(short)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXSpoolResourceUPP;#define CallGXSpoolResourceProc(userRoutine, theSpoolFile, theResource, theType, id)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXSpoolResourceProcInfo, (theSpoolFile), (theResource), (theType), (id))#define NewGXSpoolResourceProc(userRoutine)		\		(GXSpoolResourceUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXSpoolResourceProcInfo, GetCurrentISA())#elsetypedef GXSpoolResourceProcPtr GXSpoolResourceUPP;#define CallGXSpoolResourceProc(userRoutine, theSpoolFile, theResource, theType, id)		\		(*(userRoutine))((theSpoolFile), (theResource), (theType), (id))#define NewGXSpoolResourceProc(userRoutine)		\		(GXSpoolResourceUPP)(userRoutine)#endifextern OSErr Send_GXSpoolResource(gxSpoolFile theSpoolFile, Handle theResource, ResType theType, short id) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 18, 0xABFB);extern OSErr Forward_GXSpoolResource(gxSpoolFile theSpoolFile, Handle theResource, ResType theType, short id) TWOWORDINLINE(0x7036, 0xABFB);#elsetypedef OSErr (*GXSpoolResourceProcPtr)(gxSpoolFile theSpoolFile, Handle theResource, ResType theType, long id);enum {	uppGXSpoolResourceProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Handle)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(ResType)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXSpoolResourceUPP;#define CallGXSpoolResourceProc(userRoutine, theSpoolFile, theResource, theType, id)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXSpoolResourceProcInfo, (theSpoolFile), (theResource), (theType), (id))#define NewGXSpoolResourceProc(userRoutine)		\		(GXSpoolResourceUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXSpoolResourceProcInfo, GetCurrentISA())#elsetypedef GXSpoolResourceProcPtr GXSpoolResourceUPP;#define CallGXSpoolResourceProc(userRoutine, theSpoolFile, theResource, theType, id)		\		(*(userRoutine))((theSpoolFile), (theResource), (theType), (id))#define NewGXSpoolResourceProc(userRoutine)		\		(GXSpoolResourceUPP)(userRoutine)#endifextern OSErr Send_GXSpoolResource(gxSpoolFile theSpoolFile, Handle theResource, ResType theType, long id) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 18, 0xABFB);extern OSErr Forward_GXSpoolResource(gxSpoolFile theSpoolFile, Handle theResource, ResType theType, long id) TWOWORDINLINE(0x7036, 0xABFB);#endiftypedef OSErr (*GXCompleteSpoolFileProcPtr)(gxSpoolFile theSpoolFile);enum {	uppGXCompleteSpoolFileProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCompleteSpoolFileUPP;#define CallGXCompleteSpoolFileProc(userRoutine, theSpoolFile)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCompleteSpoolFileProcInfo, (theSpoolFile))#define NewGXCompleteSpoolFileProc(userRoutine)		\		(GXCompleteSpoolFileUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCompleteSpoolFileProcInfo, GetCurrentISA())#elsetypedef GXCompleteSpoolFileProcPtr GXCompleteSpoolFileUPP;#define CallGXCompleteSpoolFileProc(userRoutine, theSpoolFile)		\		(*(userRoutine))((theSpoolFile))#define NewGXCompleteSpoolFileProc(userRoutine)		\		(GXCompleteSpoolFileUPP)(userRoutine)#endifextern OSErr Send_GXCompleteSpoolFile(gxSpoolFile theSpoolFile) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 19, 0xABFB);extern OSErr Forward_GXCompleteSpoolFile(gxSpoolFile theSpoolFile) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXCountPagesProcPtr)(gxSpoolFile theSpoolFile, long *numPages);enum {	uppGXCountPagesProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCountPagesUPP;#define CallGXCountPagesProc(userRoutine, theSpoolFile, numPages)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCountPagesProcInfo, (theSpoolFile), (numPages))#define NewGXCountPagesProc(userRoutine)		\		(GXCountPagesUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCountPagesProcInfo, GetCurrentISA())#elsetypedef GXCountPagesProcPtr GXCountPagesUPP;#define CallGXCountPagesProc(userRoutine, theSpoolFile, numPages)		\		(*(userRoutine))((theSpoolFile), (numPages))#define NewGXCountPagesProc(userRoutine)		\		(GXCountPagesUPP)(userRoutine)#endifextern OSErr Send_GXCountPages(gxSpoolFile theSpoolFile, long *numPages) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 20, 0xABFB);extern OSErr Forward_GXCountPages(gxSpoolFile theSpoolFile, long *numPages) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXDespoolPageProcPtr)(gxSpoolFile theSpoolFile, long numPages, gxFormat theFormat, gxShape *thePage, Boolean *formatChanged);enum {	uppGXDespoolPageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxFormat)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(gxShape*)))		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(Boolean*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDespoolPageUPP;#define CallGXDespoolPageProc(userRoutine, theSpoolFile, numPages, theFormat, thePage, formatChanged)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDespoolPageProcInfo, (theSpoolFile), (numPages), (theFormat), (thePage), (formatChanged))#define NewGXDespoolPageProc(userRoutine)		\		(GXDespoolPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDespoolPageProcInfo, GetCurrentISA())#elsetypedef GXDespoolPageProcPtr GXDespoolPageUPP;#define CallGXDespoolPageProc(userRoutine, theSpoolFile, numPages, theFormat, thePage, formatChanged)		\		(*(userRoutine))((theSpoolFile), (numPages), (theFormat), (thePage), (formatChanged))#define NewGXDespoolPageProc(userRoutine)		\		(GXDespoolPageUPP)(userRoutine)#endifextern OSErr Send_GXDespoolPage(gxSpoolFile theSpoolFile, long numPages, gxFormat theFormat, gxShape *thePage, Boolean *formatChanged) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 21, 0xABFB);extern OSErr Forward_GXDespoolPage(gxSpoolFile theSpoolFile, long numPages, gxFormat theFormat, gxShape *thePage, Boolean *formatChanged) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXDespoolDataProcPtr)(gxSpoolFile theSpoolFile, Ptr data, long *length);enum {	uppGXDespoolDataProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDespoolDataUPP;#define CallGXDespoolDataProc(userRoutine, theSpoolFile, data, length)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDespoolDataProcInfo, (theSpoolFile), (data), (length))#define NewGXDespoolDataProc(userRoutine)		\		(GXDespoolDataUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDespoolDataProcInfo, GetCurrentISA())#elsetypedef GXDespoolDataProcPtr GXDespoolDataUPP;#define CallGXDespoolDataProc(userRoutine, theSpoolFile, data, length)		\		(*(userRoutine))((theSpoolFile), (data), (length))#define NewGXDespoolDataProc(userRoutine)		\		(GXDespoolDataUPP)(userRoutine)#endifextern OSErr Send_GXDespoolData(gxSpoolFile theSpoolFile, Ptr data, long *length) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 22, 0xABFB);extern OSErr Forward_GXDespoolData(gxSpoolFile theSpoolFile, Ptr data, long *length) TWOWORDINLINE(0x7036, 0xABFB);#if defined(applec) && !defined(powerc)typedef OSErr (*GXDespoolResourceProcPtr)(gxSpoolFile theSpoolFile, ResType theType, short id, Handle *theResource);enum {	uppGXDespoolResourceProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(ResType)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(short)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Handle*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDespoolResourceUPP;#define CallGXDespoolResourceProc(userRoutine, theSpoolFile, theType, id, theResource)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDespoolResourceProcInfo, (theSpoolFile), (theType), (id), (theResource))#define NewGXDespoolResourceProc(userRoutine)		\		(GXDespoolResourceUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDespoolResourceProcInfo, GetCurrentISA())#elsetypedef GXDespoolResourceProcPtr GXDespoolResourceUPP;#define CallGXDespoolResourceProc(userRoutine, theSpoolFile, theType, id, theResource)		\		(*(userRoutine))((theSpoolFile), (theType), (id), (theResource))#define NewGXDespoolResourceProc(userRoutine)		\		(GXDespoolResourceUPP)(userRoutine)#endifextern OSErr Send_GXDespoolResource(gxSpoolFile theSpoolFile, ResType theType, short id, Handle *theResource) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 23, 0xABFB);extern OSErr Forward_GXDespoolResource(gxSpoolFile theSpoolFile, ResType theType, short id, Handle *theResource) TWOWORDINLINE(0x7036, 0xABFB);#elsetypedef OSErr (*GXDespoolResourceProcPtr)(gxSpoolFile theSpoolFile, ResType theType, long id, Handle *theResource);enum {	uppGXDespoolResourceProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(ResType)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Handle*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDespoolResourceUPP;#define CallGXDespoolResourceProc(userRoutine, theSpoolFile, theType, id, theResource)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDespoolResourceProcInfo, (theSpoolFile), (theType), (id), (theResource))#define NewGXDespoolResourceProc(userRoutine)		\		(GXDespoolResourceUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDespoolResourceProcInfo, GetCurrentISA())#elsetypedef GXDespoolResourceProcPtr GXDespoolResourceUPP;#define CallGXDespoolResourceProc(userRoutine, theSpoolFile, theType, id, theResource)		\		(*(userRoutine))((theSpoolFile), (theType), (id), (theResource))#define NewGXDespoolResourceProc(userRoutine)		\		(GXDespoolResourceUPP)(userRoutine)#endifextern OSErr Send_GXDespoolResource(gxSpoolFile theSpoolFile, ResType theType, long id, Handle *theResource) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 23, 0xABFB);extern OSErr Forward_GXDespoolResource(gxSpoolFile theSpoolFile, ResType theType, long id, Handle *theResource) TWOWORDINLINE(0x7036, 0xABFB);#endiftypedef OSErr (*GXCloseSpoolFileProcPtr)(gxSpoolFile theSpoolFile, long closeOptions);enum {	uppGXCloseSpoolFileProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCloseSpoolFileUPP;#define CallGXCloseSpoolFileProc(userRoutine, theSpoolFile, closeOptions)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCloseSpoolFileProcInfo, (theSpoolFile), (closeOptions))#define NewGXCloseSpoolFileProc(userRoutine)		\		(GXCloseSpoolFileUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCloseSpoolFileProcInfo, GetCurrentISA())#elsetypedef GXCloseSpoolFileProcPtr GXCloseSpoolFileUPP;#define CallGXCloseSpoolFileProc(userRoutine, theSpoolFile, closeOptions)		\		(*(userRoutine))((theSpoolFile), (closeOptions))#define NewGXCloseSpoolFileProc(userRoutine)		\		(GXCloseSpoolFileUPP)(userRoutine)#endifextern OSErr Send_GXCloseSpoolFile(gxSpoolFile theSpoolFile, long closeOptions) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 24, 0xABFB);extern OSErr Forward_GXCloseSpoolFile(gxSpoolFile theSpoolFile, long closeOptions) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXStartJobProcPtr)(StringPtr docName, long pageCount);enum {	uppGXStartJobProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(StringPtr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXStartJobUPP;#define CallGXStartJobProc(userRoutine, docName, pageCount)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXStartJobProcInfo, (docName), (pageCount))#define NewGXStartJobProc(userRoutine)		\		(GXStartJobUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXStartJobProcInfo, GetCurrentISA())#elsetypedef GXStartJobProcPtr GXStartJobUPP;#define CallGXStartJobProc(userRoutine, docName, pageCount)		\		(*(userRoutine))((docName), (pageCount))#define NewGXStartJobProc(userRoutine)		\		(GXStartJobUPP)(userRoutine)#endifextern OSErr Send_GXStartJob(StringPtr docName, long pageCount) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 25, 0xABFB);extern OSErr Forward_GXStartJob(StringPtr docName, long pageCount) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXFinishJobProcPtr)(void);enum {	uppGXFinishJobProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFinishJobUPP;#define CallGXFinishJobProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFinishJobProcInfo)#define NewGXFinishJobProc(userRoutine)		\		(GXFinishJobUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFinishJobProcInfo, GetCurrentISA())#elsetypedef GXFinishJobProcPtr GXFinishJobUPP;#define CallGXFinishJobProc(userRoutine)		\		(*(userRoutine))()#define NewGXFinishJobProc(userRoutine)		\		(GXFinishJobUPP)(userRoutine)#endifextern OSErr Send_GXFinishJob(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 26, 0xABFB);extern OSErr Forward_GXFinishJob(void) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXStartPageProcPtr)(gxFormat theFormat, long numViewPorts, gxViewPort *viewPortList);enum {	uppGXStartPageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxFormat)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxViewPort*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXStartPageUPP;#define CallGXStartPageProc(userRoutine, theFormat, numViewPorts, viewPortList)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXStartPageProcInfo, (theFormat), (numViewPorts), (viewPortList))#define NewGXStartPageProc(userRoutine)		\		(GXStartPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXStartPageProcInfo, GetCurrentISA())#elsetypedef GXStartPageProcPtr GXStartPageUPP;#define CallGXStartPageProc(userRoutine, theFormat, numViewPorts, viewPortList)		\		(*(userRoutine))((theFormat), (numViewPorts), (viewPortList))#define NewGXStartPageProc(userRoutine)		\		(GXStartPageUPP)(userRoutine)#endifextern OSErr Send_GXStartPage(gxFormat theFormat, long numViewPorts, gxViewPort *viewPortList) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 27, 0xABFB);extern OSErr Forward_GXStartPage(gxFormat theFormat, long numViewPorts, gxViewPort *viewPortList) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXFinishPageProcPtr)(void);enum {	uppGXFinishPageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFinishPageUPP;#define CallGXFinishPageProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFinishPageProcInfo)#define NewGXFinishPageProc(userRoutine)		\		(GXFinishPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFinishPageProcInfo, GetCurrentISA())#elsetypedef GXFinishPageProcPtr GXFinishPageUPP;#define CallGXFinishPageProc(userRoutine)		\		(*(userRoutine))()#define NewGXFinishPageProc(userRoutine)		\		(GXFinishPageUPP)(userRoutine)#endifextern OSErr Send_GXFinishPage(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 28, 0xABFB);extern OSErr Forward_GXFinishPage(void) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXPrintPageProcPtr)(gxFormat theFormat, gxShape thePage);enum {	uppGXPrintPageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxFormat)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxShape)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXPrintPageUPP;#define CallGXPrintPageProc(userRoutine, theFormat, thePage)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXPrintPageProcInfo, (theFormat), (thePage))#define NewGXPrintPageProc(userRoutine)		\		(GXPrintPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXPrintPageProcInfo, GetCurrentISA())#elsetypedef GXPrintPageProcPtr GXPrintPageUPP;#define CallGXPrintPageProc(userRoutine, theFormat, thePage)		\		(*(userRoutine))((theFormat), (thePage))#define NewGXPrintPageProc(userRoutine)		\		(GXPrintPageUPP)(userRoutine)#endifextern OSErr Send_GXPrintPage(gxFormat theFormat, gxShape thePage) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 29, 0xABFB);extern OSErr Forward_GXPrintPage(gxFormat theFormat, gxShape thePage) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXSetupImageDataProcPtr)(void *imageData);enum {	uppGXSetupImageDataProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXSetupImageDataUPP;#define CallGXSetupImageDataProc(userRoutine, imageData)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXSetupImageDataProcInfo, (imageData))#define NewGXSetupImageDataProc(userRoutine)		\		(GXSetupImageDataUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXSetupImageDataProcInfo, GetCurrentISA())#elsetypedef GXSetupImageDataProcPtr GXSetupImageDataUPP;#define CallGXSetupImageDataProc(userRoutine, imageData)		\		(*(userRoutine))((imageData))#define NewGXSetupImageDataProc(userRoutine)		\		(GXSetupImageDataUPP)(userRoutine)#endifextern OSErr Send_GXSetupImageData(void *imageData) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 30, 0xABFB);extern OSErr Forward_GXSetupImageData(void *imageData) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXImageJobProcPtr)(gxSpoolFile, long *closeOptions);enum {	uppGXImageJobProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXImageJobUPP;#define CallGXImageJobProc(userRoutine, parameter0, closeOptions)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXImageJobProcInfo, (parameter0), (closeOptions))#define NewGXImageJobProc(userRoutine)		\		(GXImageJobUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXImageJobProcInfo, GetCurrentISA())#elsetypedef GXImageJobProcPtr GXImageJobUPP;#define CallGXImageJobProc(userRoutine, parameter0, closeOptions)		\		(*(userRoutine))((parameter0), (closeOptions))#define NewGXImageJobProc(userRoutine)		\		(GXImageJobUPP)(userRoutine)#endifextern OSErr Send_GXImageJob(gxSpoolFile, long *closeOptions) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 31, 0xABFB);extern OSErr Forward_GXImageJob(gxSpoolFile, long *closeOptions) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXImageDocumentProcPtr)(gxSpoolFile theSpoolFile, void *imageData);enum {	uppGXImageDocumentProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXImageDocumentUPP;#define CallGXImageDocumentProc(userRoutine, theSpoolFile, imageData)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXImageDocumentProcInfo, (theSpoolFile), (imageData))#define NewGXImageDocumentProc(userRoutine)		\		(GXImageDocumentUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXImageDocumentProcInfo, GetCurrentISA())#elsetypedef GXImageDocumentProcPtr GXImageDocumentUPP;#define CallGXImageDocumentProc(userRoutine, theSpoolFile, imageData)		\		(*(userRoutine))((theSpoolFile), (imageData))#define NewGXImageDocumentProc(userRoutine)		\		(GXImageDocumentUPP)(userRoutine)#endifextern OSErr Send_GXImageDocument(gxSpoolFile theSpoolFile, void *imageData) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 32, 0xABFB);extern OSErr Forward_GXImageDocument(gxSpoolFile theSpoolFile, void *imageData) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXImagePageProcPtr)(gxSpoolFile theSpoolFile, long pageNumber, gxFormat theFormat, void *imageData);enum {	uppGXImagePageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxFormat)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXImagePageUPP;#define CallGXImagePageProc(userRoutine, theSpoolFile, pageNumber, theFormat, imageData)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXImagePageProcInfo, (theSpoolFile), (pageNumber), (theFormat), (imageData))#define NewGXImagePageProc(userRoutine)		\		(GXImagePageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXImagePageProcInfo, GetCurrentISA())#elsetypedef GXImagePageProcPtr GXImagePageUPP;#define CallGXImagePageProc(userRoutine, theSpoolFile, pageNumber, theFormat, imageData)		\		(*(userRoutine))((theSpoolFile), (pageNumber), (theFormat), (imageData))#define NewGXImagePageProc(userRoutine)		\		(GXImagePageUPP)(userRoutine)#endifextern OSErr Send_GXImagePage(gxSpoolFile theSpoolFile, long pageNumber, gxFormat theFormat, void *imageData) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 33, 0xABFB);extern OSErr Forward_GXImagePage(gxSpoolFile theSpoolFile, long pageNumber, gxFormat theFormat, void *imageData) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXRenderPageProcPtr)(gxFormat theFormat, gxShape thePage, gxPageInfoRecord *, void *imageData);enum {	uppGXRenderPageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxFormat)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxShape)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxPageInfoRecord*)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXRenderPageUPP;#define CallGXRenderPageProc(userRoutine, theFormat, thePage, parameter2, imageData)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXRenderPageProcInfo, (theFormat), (thePage), (parameter2), (imageData))#define NewGXRenderPageProc(userRoutine)		\		(GXRenderPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXRenderPageProcInfo, GetCurrentISA())#elsetypedef GXRenderPageProcPtr GXRenderPageUPP;#define CallGXRenderPageProc(userRoutine, theFormat, thePage, parameter2, imageData)		\		(*(userRoutine))((theFormat), (thePage), (parameter2), (imageData))#define NewGXRenderPageProc(userRoutine)		\		(GXRenderPageUPP)(userRoutine)#endifextern OSErr Send_GXRenderPage(gxFormat theFormat, gxShape thePage, gxPageInfoRecord *, void *imageData) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 34, 0xABFB);extern OSErr Forward_GXRenderPage(gxFormat theFormat, gxShape thePage, gxPageInfoRecord *, void *imageData) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXCreateImageFileProcPtr)(FSSpecPtr pFileSpec, long imageFileOptions, long *theImageFile);enum {	uppGXCreateImageFileProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(FSSpecPtr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCreateImageFileUPP;#define CallGXCreateImageFileProc(userRoutine, pFileSpec, imageFileOptions, theImageFile)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCreateImageFileProcInfo, (pFileSpec), (imageFileOptions), (theImageFile))#define NewGXCreateImageFileProc(userRoutine)		\		(GXCreateImageFileUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCreateImageFileProcInfo, GetCurrentISA())#elsetypedef GXCreateImageFileProcPtr GXCreateImageFileUPP;#define CallGXCreateImageFileProc(userRoutine, pFileSpec, imageFileOptions, theImageFile)		\		(*(userRoutine))((pFileSpec), (imageFileOptions), (theImageFile))#define NewGXCreateImageFileProc(userRoutine)		\		(GXCreateImageFileUPP)(userRoutine)#endifextern OSErr Send_GXCreateImageFile(FSSpecPtr pFileSpec, long imageFileOptions, long *theImageFile) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 35, 0xABFB);extern OSErr Forward_GXCreateImageFile(FSSpecPtr pFileSpec, long imageFileOptions, long *theImageFile) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXOpenConnectionProcPtr)(void);enum {	uppGXOpenConnectionProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXOpenConnectionUPP;#define CallGXOpenConnectionProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXOpenConnectionProcInfo)#define NewGXOpenConnectionProc(userRoutine)		\		(GXOpenConnectionUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXOpenConnectionProcInfo, GetCurrentISA())#elsetypedef GXOpenConnectionProcPtr GXOpenConnectionUPP;#define CallGXOpenConnectionProc(userRoutine)		\		(*(userRoutine))()#define NewGXOpenConnectionProc(userRoutine)		\		(GXOpenConnectionUPP)(userRoutine)#endifextern OSErr Send_GXOpenConnection(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 36, 0xABFB);extern OSErr Forward_GXOpenConnection(void) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXCloseConnectionProcPtr)(void);enum {	uppGXCloseConnectionProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCloseConnectionUPP;#define CallGXCloseConnectionProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCloseConnectionProcInfo)#define NewGXCloseConnectionProc(userRoutine)		\		(GXCloseConnectionUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCloseConnectionProcInfo, GetCurrentISA())#elsetypedef GXCloseConnectionProcPtr GXCloseConnectionUPP;#define CallGXCloseConnectionProc(userRoutine)		\		(*(userRoutine))()#define NewGXCloseConnectionProc(userRoutine)		\		(GXCloseConnectionUPP)(userRoutine)#endifextern OSErr Send_GXCloseConnection(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 37, 0xABFB);extern OSErr Forward_GXCloseConnection(void) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXStartSendPageProcPtr)(gxFormat theFormat);enum {	uppGXStartSendPageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxFormat)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXStartSendPageUPP;#define CallGXStartSendPageProc(userRoutine, theFormat)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXStartSendPageProcInfo, (theFormat))#define NewGXStartSendPageProc(userRoutine)		\		(GXStartSendPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXStartSendPageProcInfo, GetCurrentISA())#elsetypedef GXStartSendPageProcPtr GXStartSendPageUPP;#define CallGXStartSendPageProc(userRoutine, theFormat)		\		(*(userRoutine))((theFormat))#define NewGXStartSendPageProc(userRoutine)		\		(GXStartSendPageUPP)(userRoutine)#endifextern OSErr Send_GXStartSendPage(gxFormat theFormat) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 38, 0xABFB);extern OSErr Forward_GXStartSendPage(gxFormat theFormat) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXFinishSendPageProcPtr)(void);enum {	uppGXFinishSendPageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFinishSendPageUPP;#define CallGXFinishSendPageProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFinishSendPageProcInfo)#define NewGXFinishSendPageProc(userRoutine)		\		(GXFinishSendPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFinishSendPageProcInfo, GetCurrentISA())#elsetypedef GXFinishSendPageProcPtr GXFinishSendPageUPP;#define CallGXFinishSendPageProc(userRoutine)		\		(*(userRoutine))()#define NewGXFinishSendPageProc(userRoutine)		\		(GXFinishSendPageUPP)(userRoutine)#endifextern OSErr Send_GXFinishSendPage(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 39, 0xABFB);extern OSErr Forward_GXFinishSendPage(void) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXWriteDataProcPtr)(Ptr data, long length);enum {	uppGXWriteDataProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXWriteDataUPP;#define CallGXWriteDataProc(userRoutine, data, length)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXWriteDataProcInfo, (data), (length))#define NewGXWriteDataProc(userRoutine)		\		(GXWriteDataUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXWriteDataProcInfo, GetCurrentISA())#elsetypedef GXWriteDataProcPtr GXWriteDataUPP;#define CallGXWriteDataProc(userRoutine, data, length)		\		(*(userRoutine))((data), (length))#define NewGXWriteDataProc(userRoutine)		\		(GXWriteDataUPP)(userRoutine)#endifextern OSErr Send_GXWriteData(Ptr data, long length) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 40, 0xABFB);extern OSErr Forward_GXWriteData(Ptr data, long length) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXBufferDataProcPtr)(Ptr data, long length, long bufferOptions);enum {	uppGXBufferDataProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXBufferDataUPP;#define CallGXBufferDataProc(userRoutine, data, length, bufferOptions)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXBufferDataProcInfo, (data), (length), (bufferOptions))#define NewGXBufferDataProc(userRoutine)		\		(GXBufferDataUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXBufferDataProcInfo, GetCurrentISA())#elsetypedef GXBufferDataProcPtr GXBufferDataUPP;#define CallGXBufferDataProc(userRoutine, data, length, bufferOptions)		\		(*(userRoutine))((data), (length), (bufferOptions))#define NewGXBufferDataProc(userRoutine)		\		(GXBufferDataUPP)(userRoutine)#endifextern OSErr Send_GXBufferData(Ptr data, long length, long bufferOptions) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 41, 0xABFB);extern OSErr Forward_GXBufferData(Ptr data, long length, long bufferOptions) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXDumpBufferProcPtr)(gxPrintingBuffer *theBuffer);enum {	uppGXDumpBufferProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxPrintingBuffer*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDumpBufferUPP;#define CallGXDumpBufferProc(userRoutine, theBuffer)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDumpBufferProcInfo, (theBuffer))#define NewGXDumpBufferProc(userRoutine)		\		(GXDumpBufferUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDumpBufferProcInfo, GetCurrentISA())#elsetypedef GXDumpBufferProcPtr GXDumpBufferUPP;#define CallGXDumpBufferProc(userRoutine, theBuffer)		\		(*(userRoutine))((theBuffer))#define NewGXDumpBufferProc(userRoutine)		\		(GXDumpBufferUPP)(userRoutine)#endifextern OSErr Send_GXDumpBuffer(gxPrintingBuffer *theBuffer) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 42, 0xABFB);extern OSErr Forward_GXDumpBuffer(gxPrintingBuffer *theBuffer) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXFreeBufferProcPtr)(gxPrintingBuffer *theBuffer);enum {	uppGXFreeBufferProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxPrintingBuffer*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFreeBufferUPP;#define CallGXFreeBufferProc(userRoutine, theBuffer)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFreeBufferProcInfo, (theBuffer))#define NewGXFreeBufferProc(userRoutine)		\		(GXFreeBufferUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFreeBufferProcInfo, GetCurrentISA())#elsetypedef GXFreeBufferProcPtr GXFreeBufferUPP;#define CallGXFreeBufferProc(userRoutine, theBuffer)		\		(*(userRoutine))((theBuffer))#define NewGXFreeBufferProc(userRoutine)		\		(GXFreeBufferUPP)(userRoutine)#endifextern OSErr Send_GXFreeBuffer(gxPrintingBuffer *theBuffer) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 43, 0xABFB);extern OSErr Forward_GXFreeBuffer(gxPrintingBuffer *theBuffer) TWOWORDINLINE(0x7036, 0xABFB);#if defined(applec) && !defined(powerc)typedef OSErr (*GXCheckStatusProcPtr)(Ptr data, long length, short statusType, Signature owner);enum {	uppGXCheckStatusProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(short)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Signature)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCheckStatusUPP;#define CallGXCheckStatusProc(userRoutine, data, length, statusType, owner)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCheckStatusProcInfo, (data), (length), (statusType), (owner))#define NewGXCheckStatusProc(userRoutine)		\		(GXCheckStatusUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCheckStatusProcInfo, GetCurrentISA())#elsetypedef GXCheckStatusProcPtr GXCheckStatusUPP;#define CallGXCheckStatusProc(userRoutine, data, length, statusType, owner)		\		(*(userRoutine))((data), (length), (statusType), (owner))#define NewGXCheckStatusProc(userRoutine)		\		(GXCheckStatusUPP)(userRoutine)#endifextern OSErr Send_GXCheckStatus(Ptr data, long length, short statusType, Signature owner) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 44, 0xABFB);extern OSErr Forward_GXCheckStatus(Ptr data, long length, short statusType, Signature owner) TWOWORDINLINE(0x7036, 0xABFB);#elsetypedef OSErr (*GXCheckStatusProcPtr)(Ptr data, long length, long statusType, Signature owner);enum {	uppGXCheckStatusProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Signature)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCheckStatusUPP;#define CallGXCheckStatusProc(userRoutine, data, length, statusType, owner)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCheckStatusProcInfo, (data), (length), (statusType), (owner))#define NewGXCheckStatusProc(userRoutine)		\		(GXCheckStatusUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCheckStatusProcInfo, GetCurrentISA())#elsetypedef GXCheckStatusProcPtr GXCheckStatusUPP;#define CallGXCheckStatusProc(userRoutine, data, length, statusType, owner)		\		(*(userRoutine))((data), (length), (statusType), (owner))#define NewGXCheckStatusProc(userRoutine)		\		(GXCheckStatusUPP)(userRoutine)#endifextern OSErr Send_GXCheckStatus(Ptr data, long length, long statusType, Signature owner) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 44, 0xABFB);extern OSErr Forward_GXCheckStatus(Ptr data, long length, long statusType, Signature owner) TWOWORDINLINE(0x7036, 0xABFB);#endiftypedef OSErr (*GXGetDeviceStatusProcPtr)(Ptr cmdData, long cmdSize, Ptr responseData, long *responseSize, Str255 termination);enum {	uppGXGetDeviceStatusProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Ptr)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(long*)))		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(void* /* is array */)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXGetDeviceStatusUPP;#define CallGXGetDeviceStatusProc(userRoutine, cmdData, cmdSize, responseData, responseSize, termination)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXGetDeviceStatusProcInfo, (cmdData), (cmdSize), (responseData), (responseSize), (termination))#define NewGXGetDeviceStatusProc(userRoutine)		\		(GXGetDeviceStatusUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXGetDeviceStatusProcInfo, GetCurrentISA())#elsetypedef GXGetDeviceStatusProcPtr GXGetDeviceStatusUPP;#define CallGXGetDeviceStatusProc(userRoutine, cmdData, cmdSize, responseData, responseSize, termination)		\		(*(userRoutine))((cmdData), (cmdSize), (responseData), (responseSize), (termination))#define NewGXGetDeviceStatusProc(userRoutine)		\		(GXGetDeviceStatusUPP)(userRoutine)#endifextern OSErr Send_GXGetDeviceStatus(Ptr cmdData, long cmdSize, Ptr responseData, long *responseSize, Str255 termination) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 45, 0xABFB);extern OSErr Forward_GXGetDeviceStatus(Ptr cmdData, long cmdSize, Ptr responseData, long *responseSize, Str255 termination) TWOWORDINLINE(0x7036, 0xABFB);#if defined(applec) && !defined(powerc)typedef OSErr (*GXFetchTaggedDataProcPtr)(ResType theType, short id, Handle *, Signature owner);enum {	uppGXFetchTaggedDataProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(ResType)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(short)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Handle*)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Signature)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFetchTaggedDataUPP;#define CallGXFetchTaggedDataProc(userRoutine, theType, id, parameter2, owner)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFetchTaggedDataProcInfo, (theType), (id), (parameter2), (owner))#define NewGXFetchTaggedDataProc(userRoutine)		\		(GXFetchTaggedDataUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFetchTaggedDataProcInfo, GetCurrentISA())#elsetypedef GXFetchTaggedDataProcPtr GXFetchTaggedDataUPP;#define CallGXFetchTaggedDataProc(userRoutine, theType, id, parameter2, owner)		\		(*(userRoutine))((theType), (id), (parameter2), (owner))#define NewGXFetchTaggedDataProc(userRoutine)		\		(GXFetchTaggedDataUPP)(userRoutine)#endifextern OSErr Send_GXFetchTaggedData(ResType theType, short id, Handle *, Signature owner) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 46, 0xABFB);extern OSErr Forward_GXFetchTaggedData(ResType theType, short id, Handle *, Signature owner) TWOWORDINLINE(0x7036, 0xABFB);#elsetypedef OSErr (*GXFetchTaggedDataProcPtr)(ResType theType, long id, Handle *, Signature owner);enum {	uppGXFetchTaggedDataProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(ResType)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Handle*)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Signature)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFetchTaggedDataUPP;#define CallGXFetchTaggedDataProc(userRoutine, theType, id, parameter2, owner)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFetchTaggedDataProcInfo, (theType), (id), (parameter2), (owner))#define NewGXFetchTaggedDataProc(userRoutine)		\		(GXFetchTaggedDataUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFetchTaggedDataProcInfo, GetCurrentISA())#elsetypedef GXFetchTaggedDataProcPtr GXFetchTaggedDataUPP;#define CallGXFetchTaggedDataProc(userRoutine, theType, id, parameter2, owner)		\		(*(userRoutine))((theType), (id), (parameter2), (owner))#define NewGXFetchTaggedDataProc(userRoutine)		\		(GXFetchTaggedDataUPP)(userRoutine)#endifextern OSErr Send_GXFetchTaggedData(ResType theType, long id, Handle *, Signature owner) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 46, 0xABFB);extern OSErr Forward_GXFetchTaggedData(ResType theType, long id, Handle *, Signature owner) TWOWORDINLINE(0x7036, 0xABFB);#endiftypedef OSErr (*GXGetDTPMenuListProcPtr)(MenuHandle menuHdl);enum {	uppGXGetDTPMenuListProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(MenuHandle)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXGetDTPMenuListUPP;#define CallGXGetDTPMenuListProc(userRoutine, menuHdl)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXGetDTPMenuListProcInfo, (menuHdl))#define NewGXGetDTPMenuListProc(userRoutine)		\		(GXGetDTPMenuListUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXGetDTPMenuListProcInfo, GetCurrentISA())#elsetypedef GXGetDTPMenuListProcPtr GXGetDTPMenuListUPP;#define CallGXGetDTPMenuListProc(userRoutine, menuHdl)		\		(*(userRoutine))((menuHdl))#define NewGXGetDTPMenuListProc(userRoutine)		\		(GXGetDTPMenuListUPP)(userRoutine)#endifextern OSErr Send_GXGetDTPMenuList(MenuHandle menuHdl) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 47, 0xABFB);extern OSErr Forward_GXGetDTPMenuList(MenuHandle menuHdl) TWOWORDINLINE(0x7036, 0xABFB);#if defined(applec) && !defined(powerc)typedef OSErr (*GXDTPMenuSelectProcPtr)(short id);enum {	uppGXDTPMenuSelectProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(short)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDTPMenuSelectUPP;#define CallGXDTPMenuSelectProc(userRoutine, id)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDTPMenuSelectProcInfo, (id))#define NewGXDTPMenuSelectProc(userRoutine)		\		(GXDTPMenuSelectUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDTPMenuSelectProcInfo, GetCurrentISA())#elsetypedef GXDTPMenuSelectProcPtr GXDTPMenuSelectUPP;#define CallGXDTPMenuSelectProc(userRoutine, id)		\		(*(userRoutine))((id))#define NewGXDTPMenuSelectProc(userRoutine)		\		(GXDTPMenuSelectUPP)(userRoutine)#endifextern OSErr Send_GXDTPMenuSelect(short id) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 48, 0xABFB);extern OSErr Forward_GXDTPMenuSelect(short id) TWOWORDINLINE(0x7036, 0xABFB);#elsetypedef OSErr (*GXDTPMenuSelectProcPtr)(long id);enum {	uppGXDTPMenuSelectProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDTPMenuSelectUPP;#define CallGXDTPMenuSelectProc(userRoutine, id)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDTPMenuSelectProcInfo, (id))#define NewGXDTPMenuSelectProc(userRoutine)		\		(GXDTPMenuSelectUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDTPMenuSelectProcInfo, GetCurrentISA())#elsetypedef GXDTPMenuSelectProcPtr GXDTPMenuSelectUPP;#define CallGXDTPMenuSelectProc(userRoutine, id)		\		(*(userRoutine))((id))#define NewGXDTPMenuSelectProc(userRoutine)		\		(GXDTPMenuSelectUPP)(userRoutine)#endifextern OSErr Send_GXDTPMenuSelect(long id) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 48, 0xABFB);extern OSErr Forward_GXDTPMenuSelect(long id) TWOWORDINLINE(0x7036, 0xABFB);#endiftypedef OSErr (*GXHandleAlertFilterProcPtr)(gxJob theJob, gxStatusRecord *pStatusRec, DialogPtr pDialog, EventRecord *theEvent, short *itemHit, Boolean *returnImmed);enum {	uppGXHandleAlertFilterProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxJob)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxStatusRecord*)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(DialogPtr)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(EventRecord*)))		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(short*)))		 | STACK_ROUTINE_PARAMETER(6, SIZE_CODE(sizeof(Boolean*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXHandleAlertFilterUPP;#define CallGXHandleAlertFilterProc(userRoutine, theJob, pStatusRec, pDialog, theEvent, itemHit, returnImmed)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXHandleAlertFilterProcInfo, (theJob), (pStatusRec), (pDialog), (theEvent), (itemHit), (returnImmed))#define NewGXHandleAlertFilterProc(userRoutine)		\		(GXHandleAlertFilterUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXHandleAlertFilterProcInfo, GetCurrentISA())#elsetypedef GXHandleAlertFilterProcPtr GXHandleAlertFilterUPP;#define CallGXHandleAlertFilterProc(userRoutine, theJob, pStatusRec, pDialog, theEvent, itemHit, returnImmed)		\		(*(userRoutine))((theJob), (pStatusRec), (pDialog), (theEvent), (itemHit), (returnImmed))#define NewGXHandleAlertFilterProc(userRoutine)		\		(GXHandleAlertFilterUPP)(userRoutine)#endifextern OSErr Send_GXHandleAlertFilter(gxJob theJob, gxStatusRecord *pStatusRec, DialogPtr pDialog, EventRecord *theEvent, short *itemHit, Boolean *returnImmed) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 49, 0xABFB);extern OSErr Forward_GXHandleAlertFilter(gxJob theJob, gxStatusRecord *pStatusRec, DialogPtr pDialog, EventRecord *theEvent, short *itemHit, Boolean *returnImmed) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXJobFormatModeQueryProcPtr)(gxQueryType theQuery, void *srcData, void *dstData);enum {	uppGXJobFormatModeQueryProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxQueryType)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(void*)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(void*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXJobFormatModeQueryUPP;#define CallGXJobFormatModeQueryProc(userRoutine, theQuery, srcData, dstData)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXJobFormatModeQueryProcInfo, (theQuery), (srcData), (dstData))#define NewGXJobFormatModeQueryProc(userRoutine)		\		(GXJobFormatModeQueryUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXJobFormatModeQueryProcInfo, GetCurrentISA())#elsetypedef GXJobFormatModeQueryProcPtr GXJobFormatModeQueryUPP;#define CallGXJobFormatModeQueryProc(userRoutine, theQuery, srcData, dstData)		\		(*(userRoutine))((theQuery), (srcData), (dstData))#define NewGXJobFormatModeQueryProc(userRoutine)		\		(GXJobFormatModeQueryUPP)(userRoutine)#endifextern OSErr Send_GXJobFormatModeQuery(gxQueryType theQuery, void *srcData, void *dstData) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 50, 0xABFB);extern OSErr Forward_GXJobFormatModeQuery(gxQueryType theQuery, void *srcData, void *dstData) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXWriteStatusToDTPWindowProcPtr)(gxStatusRecord *pStatusRec, gxDisplayRecord *pDisplay);enum {	uppGXWriteStatusToDTPWindowProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxStatusRecord*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxDisplayRecord*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXWriteStatusToDTPWindowUPP;#define CallGXWriteStatusToDTPWindowProc(userRoutine, pStatusRec, pDisplay)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXWriteStatusToDTPWindowProcInfo, (pStatusRec), (pDisplay))#define NewGXWriteStatusToDTPWindowProc(userRoutine)		\		(GXWriteStatusToDTPWindowUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXWriteStatusToDTPWindowProcInfo, GetCurrentISA())#elsetypedef GXWriteStatusToDTPWindowProcPtr GXWriteStatusToDTPWindowUPP;#define CallGXWriteStatusToDTPWindowProc(userRoutine, pStatusRec, pDisplay)		\		(*(userRoutine))((pStatusRec), (pDisplay))#define NewGXWriteStatusToDTPWindowProc(userRoutine)		\		(GXWriteStatusToDTPWindowUPP)(userRoutine)#endifextern OSErr Send_GXWriteStatusToDTPWindow(gxStatusRecord *pStatusRec, gxDisplayRecord *pDisplay) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 51, 0xABFB);extern OSErr Forward_GXWriteStatusToDTPWindow(gxStatusRecord *pStatusRec, gxDisplayRecord *pDisplay) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXInitializeStatusAlertProcPtr)(gxStatusRecord *pStatusRec, DialogPtr *pDialog);enum {	uppGXInitializeStatusAlertProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxStatusRecord*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(DialogPtr*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXInitializeStatusAlertUPP;#define CallGXInitializeStatusAlertProc(userRoutine, pStatusRec, pDialog)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXInitializeStatusAlertProcInfo, (pStatusRec), (pDialog))#define NewGXInitializeStatusAlertProc(userRoutine)		\		(GXInitializeStatusAlertUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXInitializeStatusAlertProcInfo, GetCurrentISA())#elsetypedef GXInitializeStatusAlertProcPtr GXInitializeStatusAlertUPP;#define CallGXInitializeStatusAlertProc(userRoutine, pStatusRec, pDialog)		\		(*(userRoutine))((pStatusRec), (pDialog))#define NewGXInitializeStatusAlertProc(userRoutine)		\		(GXInitializeStatusAlertUPP)(userRoutine)#endifextern OSErr Send_GXInitializeStatusAlert(gxStatusRecord *pStatusRec, DialogPtr *pDialog) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 52, 0xABFB);extern OSErr Forward_GXInitializeStatusAlert(gxStatusRecord *pStatusRec, DialogPtr *pDialog) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXHandleAlertStatusProcPtr)(gxStatusRecord *pStatusRec);enum {	uppGXHandleAlertStatusProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxStatusRecord*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXHandleAlertStatusUPP;#define CallGXHandleAlertStatusProc(userRoutine, pStatusRec)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXHandleAlertStatusProcInfo, (pStatusRec))#define NewGXHandleAlertStatusProc(userRoutine)		\		(GXHandleAlertStatusUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXHandleAlertStatusProcInfo, GetCurrentISA())#elsetypedef GXHandleAlertStatusProcPtr GXHandleAlertStatusUPP;#define CallGXHandleAlertStatusProc(userRoutine, pStatusRec)		\		(*(userRoutine))((pStatusRec))#define NewGXHandleAlertStatusProc(userRoutine)		\		(GXHandleAlertStatusUPP)(userRoutine)#endifextern OSErr Send_GXHandleAlertStatus(gxStatusRecord *pStatusRec) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 53, 0xABFB);extern OSErr Forward_GXHandleAlertStatus(gxStatusRecord *pStatusRec) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXHandleAlertEventProcPtr)(gxStatusRecord *pStatusRec, DialogPtr pDialog, EventRecord *theEvent, short *response);enum {	uppGXHandleAlertEventProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxStatusRecord*)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(DialogPtr)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(EventRecord*)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(short*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXHandleAlertEventUPP;#define CallGXHandleAlertEventProc(userRoutine, pStatusRec, pDialog, theEvent, response)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXHandleAlertEventProcInfo, (pStatusRec), (pDialog), (theEvent), (response))#define NewGXHandleAlertEventProc(userRoutine)		\		(GXHandleAlertEventUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXHandleAlertEventProcInfo, GetCurrentISA())#elsetypedef GXHandleAlertEventProcPtr GXHandleAlertEventUPP;#define CallGXHandleAlertEventProc(userRoutine, pStatusRec, pDialog, theEvent, response)		\		(*(userRoutine))((pStatusRec), (pDialog), (theEvent), (response))#define NewGXHandleAlertEventProc(userRoutine)		\		(GXHandleAlertEventUPP)(userRoutine)#endifextern OSErr Send_GXHandleAlertEvent(gxStatusRecord *pStatusRec, DialogPtr pDialog, EventRecord *theEvent, short *response) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 54, 0xABFB);extern OSErr Forward_GXHandleAlertEvent(gxStatusRecord *pStatusRec, DialogPtr pDialog, EventRecord *theEvent, short *response) TWOWORDINLINE(0x7036, 0xABFB);typedef void (*GXCleanupStartJobProcPtr)(void);enum {	uppGXCleanupStartJobProcInfo = kCStackBased};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCleanupStartJobUPP;#define CallGXCleanupStartJobProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCleanupStartJobProcInfo)#define NewGXCleanupStartJobProc(userRoutine)		\		(GXCleanupStartJobUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCleanupStartJobProcInfo, GetCurrentISA())#elsetypedef GXCleanupStartJobProcPtr GXCleanupStartJobUPP;#define CallGXCleanupStartJobProc(userRoutine)		\		(*(userRoutine))()#define NewGXCleanupStartJobProc(userRoutine)		\		(GXCleanupStartJobUPP)(userRoutine)#endifextern void Send_GXCleanupStartJob(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 55, 0xABFB);extern void Forward_GXCleanupStartJob(void) TWOWORDINLINE(0x7036, 0xABFB);typedef void (*GXCleanupStartPageProcPtr)(void);enum {	uppGXCleanupStartPageProcInfo = kCStackBased};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCleanupStartPageUPP;#define CallGXCleanupStartPageProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCleanupStartPageProcInfo)#define NewGXCleanupStartPageProc(userRoutine)		\		(GXCleanupStartPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCleanupStartPageProcInfo, GetCurrentISA())#elsetypedef GXCleanupStartPageProcPtr GXCleanupStartPageUPP;#define CallGXCleanupStartPageProc(userRoutine)		\		(*(userRoutine))()#define NewGXCleanupStartPageProc(userRoutine)		\		(GXCleanupStartPageUPP)(userRoutine)#endifextern void Send_GXCleanupStartPage(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 56, 0xABFB);extern void Forward_GXCleanupStartPage(void) TWOWORDINLINE(0x7036, 0xABFB);typedef void (*GXCleanupOpenConnectionProcPtr)(void);enum {	uppGXCleanupOpenConnectionProcInfo = kCStackBased};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCleanupOpenConnectionUPP;#define CallGXCleanupOpenConnectionProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCleanupOpenConnectionProcInfo)#define NewGXCleanupOpenConnectionProc(userRoutine)		\		(GXCleanupOpenConnectionUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCleanupOpenConnectionProcInfo, GetCurrentISA())#elsetypedef GXCleanupOpenConnectionProcPtr GXCleanupOpenConnectionUPP;#define CallGXCleanupOpenConnectionProc(userRoutine)		\		(*(userRoutine))()#define NewGXCleanupOpenConnectionProc(userRoutine)		\		(GXCleanupOpenConnectionUPP)(userRoutine)#endifextern void Send_GXCleanupOpenConnection(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 57, 0xABFB);extern void Forward_GXCleanupOpenConnection(void) TWOWORDINLINE(0x7036, 0xABFB);typedef void (*GXCleanupStartSendPageProcPtr)(void);enum {	uppGXCleanupStartSendPageProcInfo = kCStackBased};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCleanupStartSendPageUPP;#define CallGXCleanupStartSendPageProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCleanupStartSendPageProcInfo)#define NewGXCleanupStartSendPageProc(userRoutine)		\		(GXCleanupStartSendPageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCleanupStartSendPageProcInfo, GetCurrentISA())#elsetypedef GXCleanupStartSendPageProcPtr GXCleanupStartSendPageUPP;#define CallGXCleanupStartSendPageProc(userRoutine)		\		(*(userRoutine))()#define NewGXCleanupStartSendPageProc(userRoutine)		\		(GXCleanupStartSendPageUPP)(userRoutine)#endifextern void Send_GXCleanupStartSendPage(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 58, 0xABFB);extern void Forward_GXCleanupStartSendPage(void) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXDefaultDesktopPrinterProcPtr)(Str31);enum {	uppGXDefaultDesktopPrinterProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(void* /* is array */)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDefaultDesktopPrinterUPP;#define CallGXDefaultDesktopPrinterProc(userRoutine, parameter0)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDefaultDesktopPrinterProcInfo, (parameter0))#define NewGXDefaultDesktopPrinterProc(userRoutine)		\		(GXDefaultDesktopPrinterUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDefaultDesktopPrinterProcInfo, GetCurrentISA())#elsetypedef GXDefaultDesktopPrinterProcPtr GXDefaultDesktopPrinterUPP;#define CallGXDefaultDesktopPrinterProc(userRoutine, parameter0)		\		(*(userRoutine))((parameter0))#define NewGXDefaultDesktopPrinterProc(userRoutine)		\		(GXDefaultDesktopPrinterUPP)(userRoutine)#endifextern OSErr Send_GXDefaultDesktopPrinter(Str31 dtpName) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 59, 0xABFB);extern OSErr Forward_GXDefaultDesktopPrinter(Str31 dtpName) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXCaptureOutputDeviceProcPtr)(Boolean capture);enum {	uppGXCaptureOutputDeviceProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(Boolean)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXCaptureOutputDeviceUPP;#define CallGXCaptureOutputDeviceProc(userRoutine, capture)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXCaptureOutputDeviceProcInfo, (capture))#define NewGXCaptureOutputDeviceProc(userRoutine)		\		(GXCaptureOutputDeviceUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXCaptureOutputDeviceProcInfo, GetCurrentISA())#elsetypedef GXCaptureOutputDeviceProcPtr GXCaptureOutputDeviceUPP;#define CallGXCaptureOutputDeviceProc(userRoutine, capture)		\		(*(userRoutine))((capture))#define NewGXCaptureOutputDeviceProc(userRoutine)		\		(GXCaptureOutputDeviceUPP)(userRoutine)#endifextern OSErr Send_GXCaptureOutputDevice(Boolean capture) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 60, 0xABFB);extern OSErr Forward_GXCaptureOutputDevice(Boolean capture) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXOpenConnectionRetryProcPtr)(ResType theType, void *, Boolean *retryopenPtr, OSErr anErr);enum {	uppGXOpenConnectionRetryProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(ResType)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(void*)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Boolean*)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(OSErr)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXOpenConnectionRetryUPP;#define CallGXOpenConnectionRetryProc(userRoutine, theType, parameter1, retryopenPtr, anErr)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXOpenConnectionRetryProcInfo, (theType), (parameter1), (retryopenPtr), (anErr))#define NewGXOpenConnectionRetryProc(userRoutine)		\		(GXOpenConnectionRetryUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXOpenConnectionRetryProcInfo, GetCurrentISA())#elsetypedef GXOpenConnectionRetryProcPtr GXOpenConnectionRetryUPP;#define CallGXOpenConnectionRetryProc(userRoutine, theType, parameter1, retryopenPtr, anErr)		\		(*(userRoutine))((theType), (parameter1), (retryopenPtr), (anErr))#define NewGXOpenConnectionRetryProc(userRoutine)		\		(GXOpenConnectionRetryUPP)(userRoutine)#endifextern OSErr Send_GXOpenConnectionRetry(ResType theType, void *, Boolean *retryopenPtr, OSErr anErr) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 61, 0xABFB);extern OSErr Forward_GXOpenConnectionRetry(ResType theType, void *, Boolean *retryopenPtr, OSErr anErr) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXExamineSpoolFileProcPtr)(gxSpoolFile theSpoolFile);enum {	uppGXExamineSpoolFileProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolFile)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXExamineSpoolFileUPP;#define CallGXExamineSpoolFileProc(userRoutine, theSpoolFile)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXExamineSpoolFileProcInfo, (theSpoolFile))#define NewGXExamineSpoolFileProc(userRoutine)		\		(GXExamineSpoolFileUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXExamineSpoolFileProcInfo, GetCurrentISA())#elsetypedef GXExamineSpoolFileProcPtr GXExamineSpoolFileUPP;#define CallGXExamineSpoolFileProc(userRoutine, theSpoolFile)		\		(*(userRoutine))((theSpoolFile))#define NewGXExamineSpoolFileProc(userRoutine)		\		(GXExamineSpoolFileUPP)(userRoutine)#endifextern OSErr Send_GXExamineSpoolFile(gxSpoolFile theSpoolFile) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 62, 0xABFB);extern OSErr Forward_GXExamineSpoolFile(gxSpoolFile theSpoolFile) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXFinishSendPlaneProcPtr)(void);enum {	uppGXFinishSendPlaneProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFinishSendPlaneUPP;#define CallGXFinishSendPlaneProc(userRoutine)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFinishSendPlaneProcInfo)#define NewGXFinishSendPlaneProc(userRoutine)		\		(GXFinishSendPlaneUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFinishSendPlaneProcInfo, GetCurrentISA())#elsetypedef GXFinishSendPlaneProcPtr GXFinishSendPlaneUPP;#define CallGXFinishSendPlaneProc(userRoutine)		\		(*(userRoutine))()#define NewGXFinishSendPlaneProc(userRoutine)		\		(GXFinishSendPlaneUPP)(userRoutine)#endifextern OSErr Send_GXFinishSendPlane(void) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 63, 0xABFB);extern OSErr Forward_GXFinishSendPlane(void) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXDoesPaperFitProcPtr)(gxTrayIndex whichTray, gxPaperType paper, Boolean *fits);enum {	uppGXDoesPaperFitProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxTrayIndex)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxPaperType)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Boolean*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXDoesPaperFitUPP;#define CallGXDoesPaperFitProc(userRoutine, whichTray, paper, fits)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXDoesPaperFitProcInfo, (whichTray), (paper), (fits))#define NewGXDoesPaperFitProc(userRoutine)		\		(GXDoesPaperFitUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXDoesPaperFitProcInfo, GetCurrentISA())#elsetypedef GXDoesPaperFitProcPtr GXDoesPaperFitUPP;#define CallGXDoesPaperFitProc(userRoutine, whichTray, paper, fits)		\		(*(userRoutine))((whichTray), (paper), (fits))#define NewGXDoesPaperFitProc(userRoutine)		\		(GXDoesPaperFitUPP)(userRoutine)#endifextern OSErr Send_GXDoesPaperFit(gxTrayIndex whichTray, gxPaperType paper, Boolean *fits) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 64, 0xABFB);extern OSErr Forward_GXDoesPaperFit(gxTrayIndex whichTray, gxPaperType paper, Boolean *fits) TWOWORDINLINE(0x7036, 0xABFB);#if defined(applec) && !defined(powerc)typedef OSErr (*GXChooserMessageProcPtr)(short message, short caller, StringPtr objName, StringPtr zoneName, ListHandle theList, long p2);enum {	uppGXChooserMessageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(short)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(short)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(StringPtr)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(StringPtr)))		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(ListHandle)))		 | STACK_ROUTINE_PARAMETER(6, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXChooserMessageUPP;#define CallGXChooserMessageProc(userRoutine, message, caller, objName, zoneName, theList, p2)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXChooserMessageProcInfo, (message), (caller), (objName), (zoneName), (theList), (p2))#define NewGXChooserMessageProc(userRoutine)		\		(GXChooserMessageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXChooserMessageProcInfo, GetCurrentISA())#elsetypedef GXChooserMessageProcPtr GXChooserMessageUPP;#define CallGXChooserMessageProc(userRoutine, message, caller, objName, zoneName, theList, p2)		\		(*(userRoutine))((message), (caller), (objName), (zoneName), (theList), (p2))#define NewGXChooserMessageProc(userRoutine)		\		(GXChooserMessageUPP)(userRoutine)#endifextern OSErr Send_GXChooserMessage(short message, short caller, StringPtr objName, StringPtr zoneName, ListHandle theList, long p2) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 65, 0xABFB);extern OSErr Forward_GXChooserMessage(short message, short caller, StringPtr objName, StringPtr zoneName, ListHandle theList, long p2) TWOWORDINLINE(0x7036, 0xABFB);#elsetypedef OSErr (*GXChooserMessageProcPtr)(long message, long caller, StringPtr objName, StringPtr zoneName, ListHandle theList, long p2);enum {	uppGXChooserMessageProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(StringPtr)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(StringPtr)))		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(ListHandle)))		 | STACK_ROUTINE_PARAMETER(6, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXChooserMessageUPP;#define CallGXChooserMessageProc(userRoutine, message, caller, objName, zoneName, theList, p2)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXChooserMessageProcInfo, (message), (caller), (objName), (zoneName), (theList), (p2))#define NewGXChooserMessageProc(userRoutine)		\		(GXChooserMessageUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXChooserMessageProcInfo, GetCurrentISA())#elsetypedef GXChooserMessageProcPtr GXChooserMessageUPP;#define CallGXChooserMessageProc(userRoutine, message, caller, objName, zoneName, theList, p2)		\		(*(userRoutine))((message), (caller), (objName), (zoneName), (theList), (p2))#define NewGXChooserMessageProc(userRoutine)		\		(GXChooserMessageUPP)(userRoutine)#endifextern OSErr Send_GXChooserMessage(long message, long caller, StringPtr objName, StringPtr zoneName, ListHandle theList, long p2) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 65, 0xABFB);extern OSErr Forward_GXChooserMessage(long message, long caller, StringPtr objName, StringPtr zoneName, ListHandle theList, long p2) TWOWORDINLINE(0x7036, 0xABFB);#endiftypedef OSErr (*GXFindPrinterProfileProcPtr)(gxPrinter thePrinter, void *searchData, long index, gxColorProfile *returnedProfile, long *numProfiles);enum {	uppGXFindPrinterProfileProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxPrinter)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(void*)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(gxColorProfile*)))		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(long*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFindPrinterProfileUPP;#define CallGXFindPrinterProfileProc(userRoutine, thePrinter, searchData, index, returnedProfile, numProfiles)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFindPrinterProfileProcInfo, (thePrinter), (searchData), (index), (returnedProfile), (numProfiles))#define NewGXFindPrinterProfileProc(userRoutine)		\		(GXFindPrinterProfileUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFindPrinterProfileProcInfo, GetCurrentISA())#elsetypedef GXFindPrinterProfileProcPtr GXFindPrinterProfileUPP;#define CallGXFindPrinterProfileProc(userRoutine, thePrinter, searchData, index, returnedProfile, numProfiles)		\		(*(userRoutine))((thePrinter), (searchData), (index), (returnedProfile), (numProfiles))#define NewGXFindPrinterProfileProc(userRoutine)		\		(GXFindPrinterProfileUPP)(userRoutine)#endifextern OSErr Send_GXFindPrinterProfile(gxPrinter thePrinter, void *searchData, long index, gxColorProfile *returnedProfile, long *numProfiles) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 66, 0xABFB);extern OSErr Forward_GXFindPrinterProfile(gxPrinter thePrinter, void *searchData, long index, gxColorProfile *returnedProfile, long *numProfiles) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXFindFormatProfileProcPtr)(gxFormat theFormat, void *searchData, long index, gxColorProfile *returnedProfile, long *numProfiles);enum {	uppGXFindFormatProfileProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxFormat)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(void*)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(gxColorProfile*)))		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(long*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXFindFormatProfileUPP;#define CallGXFindFormatProfileProc(userRoutine, theFormat, searchData, index, returnedProfile, numProfiles)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXFindFormatProfileProcInfo, (theFormat), (searchData), (index), (returnedProfile), (numProfiles))#define NewGXFindFormatProfileProc(userRoutine)		\		(GXFindFormatProfileUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXFindFormatProfileProcInfo, GetCurrentISA())#elsetypedef GXFindFormatProfileProcPtr GXFindFormatProfileUPP;#define CallGXFindFormatProfileProc(userRoutine, theFormat, searchData, index, returnedProfile, numProfiles)		\		(*(userRoutine))((theFormat), (searchData), (index), (returnedProfile), (numProfiles))#define NewGXFindFormatProfileProc(userRoutine)		\		(GXFindFormatProfileUPP)(userRoutine)#endifextern OSErr Send_GXFindFormatProfile(gxFormat theFormat, void *searchData, long index, gxColorProfile *returnedProfile, long *numProfiles) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 67, 0xABFB);extern OSErr Forward_GXFindFormatProfile(gxFormat theFormat, void *searchData, long index, gxColorProfile *returnedProfile, long *numProfiles) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXSetPrinterProfileProcPtr)(gxPrinter thePrinter, gxColorProfile oldProfile, gxColorProfile newProfile);enum {	uppGXSetPrinterProfileProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxPrinter)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxColorProfile)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxColorProfile)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXSetPrinterProfileUPP;#define CallGXSetPrinterProfileProc(userRoutine, thePrinter, oldProfile, newProfile)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXSetPrinterProfileProcInfo, (thePrinter), (oldProfile), (newProfile))#define NewGXSetPrinterProfileProc(userRoutine)		\		(GXSetPrinterProfileUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXSetPrinterProfileProcInfo, GetCurrentISA())#elsetypedef GXSetPrinterProfileProcPtr GXSetPrinterProfileUPP;#define CallGXSetPrinterProfileProc(userRoutine, thePrinter, oldProfile, newProfile)		\		(*(userRoutine))((thePrinter), (oldProfile), (newProfile))#define NewGXSetPrinterProfileProc(userRoutine)		\		(GXSetPrinterProfileUPP)(userRoutine)#endifextern OSErr Send_GXSetPrinterProfile(gxPrinter thePrinter, gxColorProfile oldProfile, gxColorProfile newProfile) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 68, 0xABFB);extern OSErr Forward_GXSetPrinterProfile(gxPrinter thePrinter, gxColorProfile oldProfile, gxColorProfile newProfile) TWOWORDINLINE(0x7036, 0xABFB);typedef OSErr (*GXSetFormatProfileProcPtr)(gxFormat theFormat, gxColorProfile oldProfile, gxColorProfile newProfile);enum {	uppGXSetFormatProfileProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxFormat)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxColorProfile)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(gxColorProfile)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr GXSetFormatProfileUPP;#define CallGXSetFormatProfileProc(userRoutine, theFormat, oldProfile, newProfile)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppGXSetFormatProfileProcInfo, (theFormat), (oldProfile), (newProfile))#define NewGXSetFormatProfileProc(userRoutine)		\		(GXSetFormatProfileUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppGXSetFormatProfileProcInfo, GetCurrentISA())#elsetypedef GXSetFormatProfileProcPtr GXSetFormatProfileUPP;#define CallGXSetFormatProfileProc(userRoutine, theFormat, oldProfile, newProfile)		\		(*(userRoutine))((theFormat), (oldProfile), (newProfile))#define NewGXSetFormatProfileProc(userRoutine)		\		(GXSetFormatProfileUPP)(userRoutine)#endifextern OSErr Send_GXSetFormatProfile(gxFormat theFormat, gxColorProfile oldProfile, gxColorProfile newProfile) FIVEWORDINLINE(0x7032, 0x223C, 0x0000, 69, 0xABFB);extern OSErr Forward_GXSetFormatProfile(gxFormat theFormat, gxColorProfile oldProfile, gxColorProfile newProfile) TWOWORDINLINE(0x7036, 0xABFB);#ifdef __cplusplus}#endif#endif