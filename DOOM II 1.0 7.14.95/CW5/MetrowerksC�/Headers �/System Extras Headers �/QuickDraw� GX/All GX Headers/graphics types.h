/*	File:		graphics types.h	Copyright:	© 1984-1994 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef graphicsTypesIncludes#define graphicsTypesIncludes	#ifndef mathTypesIncludes#include "math types.h"/*	#include <Types.h>											*//*		#include <ConditionalMacros.h>							*//*		#include <MixedMode.h>									*//*			#include <Traps.h>									*/	#endif	#ifndef gxAnyNumber#define gxAnyNumber 1	#endif	#ifndef nil#define nil 0L	#endiftypedef struct gxPrivateShapeRecord *gxShape;typedef struct gxPrivateStyleRecord *gxStyle;typedef struct gxPrivateInkRecord *gxInk;typedef struct gxPrivateTransformRecord *gxTransform;typedef struct gxPrivateTagRecord *gxTag;typedef struct gxPrivateColorSetRecord *gxColorSet;typedef struct gxPrivateProfileRecord *gxColorProfile;typedef struct gxPrivateGraphicsClientRecord *gxGraphicsClient;typedef struct gxPrivateViewGroupRecord *gxViewGroup;typedef struct gxPrivateViewPortRecord *gxViewPort;typedef struct gxPrivateViewDeviceRecord *gxViewDevice;typedef long gxColorSpace;enum gxShapeTypes {	gxEmptyType					= 1,	gxPointType,	gxLineType,	gxCurveType,	gxRectangleType,	gxPolygonType,	gxPathType,	gxBitmapType,	gxTextType,	gxGlyphType,	gxLayoutType,	gxFullType,	gxPictureType};typedef long gxShapeType;enum gxShapeFills {	gxNoFill,	gxOpenFrameFill,	gxFrameFill					= gxOpenFrameFill,	gxClosedFrameFill,	gxHollowFill				= gxClosedFrameFill,	gxEvenOddFill,	gxSolidFill					= gxEvenOddFill,	gxWindingFill,	gxInverseEvenOddFill,	gxInverseSolidFill			= gxInverseEvenOddFill,	gxInverseFill				= gxInverseEvenOddFill,	gxInverseWindingFill};typedef long gxShapeFill;enum gxShapeAttributes {	gxNoAttributes,	gxDirectShape				= 0x0001,	gxRemoteShape				= 0x0002,	gxCachedShape				= 0x0004,	gxLockedShape				= 0x0008,	gxGroupShape				= 0x0010,	gxMapTransformShape			= 0x0020,	gxUniqueItemsShape			= 0x0040,	gxIgnorePlatformShape		= 0x0080,	gxNoMetricsGridShape		= 0x0100,	gxDiskShape					= 0x0200,	gxMemoryShape				= 0x0400};typedef long gxShapeAttribute;enum gxEditShapeFlags {	gxBreakNeitherEdit			= 0,	gxBreakLeftEdit				= 0x0001,	gxBreakRightEdit			= 0x0002,	gxRemoveDuplicatePointsEdit	= 0x0004};typedef long gxEditShapeFlag;#define gxSelectToEnd -1#define gxSetToNil (void *)(-1)enum gxContourDirections {	gxCounterclockwiseDirection,	gxClockwiseDirection};typedef long gxContourDirection;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxLine {	struct gxPoint				first;	struct gxPoint				last;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxCurve {	struct gxPoint				first;	struct gxPoint				control;	struct gxPoint				last;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxRectangle {	Fixed						left;	Fixed						top;	Fixed						right;	Fixed						bottom;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPolygon {	long						vectors;	struct gxPoint				vector[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPolygons {	long						contours;	struct gxPolygon			contour[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPath {	long						vectors;	long						controlBits[1];	struct gxPoint				vector[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPaths {	long						contours;	struct gxPath				contour[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxBitmap {	char						*image;	long						width;	long						height;	long						rowBytes;	long						pixelSize;	gxColorSpace				space;	gxColorSet					set;	gxColorProfile				profile;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxLongRectangle {	long						left;	long						top;	long						right;	long						bottom;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifndef __cplusplustypedef struct gxLine gxLine;typedef struct gxCurve gxCurve;typedef struct gxRectangle gxRectangle;typedef struct gxPolygon gxPolygon;typedef struct gxPolygons gxPolygons;typedef struct gxPath gxPath;typedef struct gxPaths gxPaths;typedef struct gxBitmap gxBitmap;typedef struct gxLongRectangle gxLongRectangle;	#endifenum gxStyleAttributes {	gxCenterFrameStyle			= 0,	gxSourceGridStyle			= 0x0001,	gxDeviceGridStyle			= 0x0002,	gxInsideFrameStyle			= 0x0004,	gxOutsideFrameStyle			= 0x0008,	gxAutoInsetStyle			= 0x0010};typedef long gxStyleAttribute;enum gxDashAttributes {	gxBendDash					= 0x0001,	gxBreakDash					= 0x0002,	gxClipDash					= 0x0004,	gxLevelDash					= 0x0008,	gxAutoAdvanceDash			= 0x0010};typedef long gxDashAttribute;enum gxPatternAttributes {	gxPortAlignPattern			= 0x0001,	gxPortMapPattern			= 0x0002};typedef long gxPatternAttribute;enum gxJoinAttributes {	gxSharpJoin					= 0x0000,	gxCurveJoin					= 0x0001,	gxLevelJoin					= 0x0002};typedef long gxJoinAttribute;enum gxCapAttributes {	gxLevelStartCap				= 0x0001,	gxLevelEndCap				= 0x0002};typedef long gxCapAttribute;enum gxTextAttributes {	gxAutoAdvanceText			= 0x0001,	gxNoContourGridText			= 0x0002,	gxNoMetricsGridText			= 0x0004,	gxAnchorPointsText			= 0x0008,	gxVerticalText				= 0x0010,	gxNoOpticalScaleText		= 0x0020};typedef long gxTextAttribute;#define gxLeftJustify 0#define gxCenterJustify (fract1/2)#define gxRightJustify fract1#define gxFillJustify -1enum gxLayerFlags {	gxUnderlineAdvanceLayer		= 0x0001,	gxSkipWhiteSpaceLayer		= 0x0002,	gxUnderlineIntervalLayer	= 0x0004,	gxUnderlineContinuationLayer = 0x0008,	gxWhiteLayer				= 0x0010,	gxClipLayer					= 0x0020,	gxStringLayer				= 0x0040};typedef long gxLayerFlag;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxFaceLayer {	gxShapeFill					outlineFill;	gxLayerFlag					flags;	gxStyle						outlineStyle;	gxTransform					outlineTransform;	gxPoint						boldOutset;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxTextFace {	long						faceLayers;	gxMapping					advanceMapping;	struct gxFaceLayer			faceLayer[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxJoinRecord {	gxJoinAttribute				attributes;	gxShape						join;	Fixed						miter;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxDashRecord {	gxDashAttribute				attributes;	gxShape						dash;	Fixed						advance;	fract						phase;	Fixed						scale;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxPatternRecord {	gxPatternAttribute			attributes;	gxShape						pattern;	gxPoint						u;	gxPoint						v;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxCapRecord {	gxCapAttribute				attributes;	gxShape						startCap;	gxShape						endCap;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifndef __cplusplustypedef struct gxFaceLayer gxFaceLayer;typedef struct gxTextFace gxTextFace;typedef struct gxJoinRecord gxJoinRecord;typedef struct gxDashRecord gxDashRecord;typedef struct gxPatternRecord gxPatternRecord;typedef struct gxCapRecord gxCapRecord;	#endifenum gxInkAttributes {	gxPortAlignDitherInk		= 0x0001,	gxForceDitherInk			= 0x0002,	gxSuppressDitherInk			= 0x0004,	gxSuppressHalftoneInk		= 0x0008};typedef long gxInkAttribute;enum gxComponentModes {	gxNoMode					= 0,	gxCopyMode,	gxAddMode,	gxBlendMode,	gxMigrateMode,	gxMinimumMode,	gxMaximumMode,	gxHighlightMode,	gxAndMode,	gxOrMode,	gxXorMode,	gxRampAndMode,	gxRampOrMode,	gxRampXorMode,	gxOverMode,	gxAtopMode,	gxExcludeMode,	gxFadeMode};typedef unsigned char gxComponentMode;enum gxTransferFlags {	gxRejectSourceTransfer		= 0x0001,	gxRejectDeviceTransfer		= 0x0002,	gxSingleComponentTransfer	= 0x0004};typedef long gxTransferFlag;enum gxComponentFlags {	gxOverResultComponent		= 0x01,	gxReverseComponent			= 0x02};typedef unsigned char gxComponentFlag;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxTransferComponent {	gxComponentMode				mode;	gxComponentFlag				flags;	gxColorValue				sourceMinimum;	gxColorValue				sourceMaximum;	gxColorValue				deviceMinimum;	gxColorValue				deviceMaximum;	gxColorValue				clampMinimum;	gxColorValue				clampMaximum;	gxColorValue				operand;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxTransferMode {	gxColorSpace				space;	gxColorSet					set;	gxColorProfile				profile;	Fixed						sourceMatrix[5][4];	Fixed						deviceMatrix[5][4];	Fixed						resultMatrix[5][4];	gxTransferFlag				flags;	struct gxTransferComponent	component[4];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifndef __cplusplustypedef struct gxTransferComponent gxTransferComponent;typedef struct gxTransferMode gxTransferMode;	#endifenum gxColorPackingTypes {	gxNoColorPacking			= 0x0000,	gxAlphaSpace				= 0x0080,	gxWord5ColorPacking			= 0x0500,	gxLong8ColorPacking			= 0x0800,	gxLong10ColorPacking		= 0x0a00,	gxAlphaFirstPacking			= 0x1000};enum gxColorSpaces {	gxNoSpace					= 0,	gxRGBSpace,	gxCMYKSpace,	gxHSVSpace,	gxHLSSpace,	gxYXYSpace,	gxXYZSpace,	gxLUVSpace,	gxLABSpace,	gxYIQSpace,	gxNTSCSpace					= gxYIQSpace,	gxPALSpace					= gxYIQSpace,	gxGraySpace,	gxIndexedSpace,	gxRGBASpace					= gxRGBSpace + gxAlphaSpace,	gxGrayASpace				= gxGraySpace + gxAlphaSpace,	gxRGB16Space				= gxWord5ColorPacking + gxRGBSpace,	gxRGB32Space				= gxLong8ColorPacking + gxRGBSpace,	gxARGB32Space				= gxLong8ColorPacking + gxAlphaFirstPacking + gxRGBASpace,	gxCMYK32Space				= gxLong8ColorPacking + gxCMYKSpace,	gxHSV32Space				= gxLong10ColorPacking + gxHSVSpace,	gxHLS32Space				= gxLong10ColorPacking + gxHLSSpace,	gxYXY32Space				= gxLong10ColorPacking + gxYXYSpace,	gxXYZ32Space				= gxLong10ColorPacking + gxXYZSpace,	gxLUV32Space				= gxLong10ColorPacking + gxLUVSpace,	gxLAB32Space				= gxLong10ColorPacking + gxLABSpace,	gxYIQ32Space				= gxLong10ColorPacking + gxYIQSpace,	gxNTSC32Space				= gxYIQ32Space,	gxPAL32Space				= gxYIQ32Space};#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxRGBColor {	gxColorValue				red;	gxColorValue				green;	gxColorValue				blue;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxRGBAColor {	gxColorValue				red;	gxColorValue				green;	gxColorValue				blue;	gxColorValue				alpha;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxHSVColor {	gxColorValue				hue;	gxColorValue				saturation;	gxColorValue				value;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxHLSColor {	gxColorValue				hue;	gxColorValue				lightness;	gxColorValue				saturation;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxCMYKColor {	gxColorValue				cyan;	gxColorValue				magenta;	gxColorValue				yellow;	gxColorValue				black;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxXYZColor {	gxColorValue				x;	gxColorValue				y;	gxColorValue				z;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxYXYColor {	gxColorValue				capY;	gxColorValue				x;	gxColorValue				y;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxLUVColor {	gxColorValue				l;	gxColorValue				u;	gxColorValue				v;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxLABColor {	gxColorValue				l;	gxColorValue				a;	gxColorValue				b;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxYIQColor {	gxColorValue				y;	gxColorValue				i;	gxColorValue				q;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxGrayAColor {	gxColorValue				gray;	gxColorValue				alpha;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endiftypedef long gxColorIndex;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxIndexedColor {	gxColorIndex				index;	gxColorSet					set;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxColor {	gxColorSpace				space;	gxColorProfile				profile;	union {		struct gxCMYKColor			cmyk;		struct gxRGBColor			rgb;		struct gxRGBAColor			rgba;		struct gxHSVColor			hsv;		struct gxHLSColor			hls;		struct gxXYZColor			xyz;		struct gxYXYColor			yxy;		struct gxLUVColor			luv;		struct gxLABColor			lab;		struct gxYIQColor			yiq;		gxColorValue				gray;		struct gxGrayAColor			graya;		unsigned short				pixel16;		unsigned long				pixel32;		struct gxIndexedColor		indexed;		gxColorValue				component[4];	}							element;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifndef __cplusplustypedef struct gxRGBColor gxRGBColor;typedef struct gxRGBAColor gxRGBAColor;typedef struct gxHSVColor gxHSVColor;typedef struct gxHLSColor gxHLSColor;typedef struct gxCMYKColor gxCMYKColor;typedef struct gxXYZColor gxXYZColor;typedef struct gxYXYColor gxYXYColor;typedef struct gxLUVColor gxLUVColor;typedef struct gxLABColor gxLABColor;typedef struct gxYIQColor gxYIQColor;typedef struct gxGrayAColor gxGrayAColor;typedef struct gxIndexedColor gxIndexedColor;typedef struct gxColor gxColor;	#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifunion gxSetColor {	gxCMYKColor					cmyk;	gxRGBColor					rgb;	gxRGBAColor					rgba;	gxHSVColor					hsv;	gxHLSColor					hls;	gxXYZColor					xyz;	gxYXYColor					yxy;	gxLUVColor					luv;	gxLABColor					lab;	gxYIQColor					yiq;	gxColorValue				gray;	gxGrayAColor				graya;	unsigned short				pixel16;	unsigned long				pixel32;	gxColorValue				component[4];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifndef __cplusplustypedef union gxSetColor gxSetColor;	#endifenum gxShapeParts {	gxNoPart					= 0,	gxBoundsPart				= 0x0001,	gxGeometryPart				= 0x0002,	gxPenPart					= 0x0004,	gxCornerPointPart			= 0x0008,	gxControlPointPart			= 0x0010,	gxEdgePart					= 0x0020,	gxJoinPart					= 0x0040,	gxStartCapPart				= 0x0080,	gxEndCapPart				= 0x0100,	gxDashPart					= 0x0200,	gxPatternPart				= 0x0400,	gxGlyphBoundsPart			= gxJoinPart,	gxGlyphFirstPart			= gxStartCapPart,	gxGlyphLastPart				= gxEndCapPart,	gxSideBearingPart			= gxDashPart,	gxAnyPart					= gxBoundsPart|gxGeometryPart|gxPenPart|gxCornerPointPart|gxControlPointPart|gxEdgePart|gxJoinPart|gxStartCapPart|gxEndCapPart|gxDashPart|gxPatternPart};typedef long gxShapePart;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxHitTestInfo {	gxShapePart					what;	long						index;	Fixed						distance;	gxShape						which;	gxShape						containerPicture;	long						containerIndex;	long						totalIndex;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifndef __cplusplustypedef struct gxHitTestInfo gxHitTestInfo;	#endifenum gxPortAttributes {	gxGrayPort					= 0x0001,	gxAlwaysGridPort			= 0x0002,	gxEnableMatchPort			= 0x0004};typedef long gxPortAttribute;enum gxDeviceAttributes {	gxDirectDevice				= 0x01,	gxRemoteDevice				= 0x02,	gxInactiveDevice			= 0x04};typedef long gxDeviceAttribute;enum gxDotTypes {	gxRoundDot					= 1,	gxSpiralDot,	gxSquareDot,	gxLineDot,	gxEllipticDot,	gxTriangleDot,	gxDispersedDot};typedef long gxDotType;enum gxTintTypes {	gxNoTint,	gxLuminanceTint,	gxAverageTint,	gxMixtureTint,	gxComponent1Tint,	gxComponent2Tint,	gxComponent3Tint,	gxComponent4Tint};typedef long gxTintType;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxHalftone {	Fixed						angle;	Fixed						frequency;	gxDotType					method;	gxTintType					tinting;	gxColor						dotColor;	gxColor						backgroundColor;	gxColorSpace				tintSpace;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifndef __cplusplustypedef struct gxHalftone gxHalftone;	#endif#define gxAllViewDevices ((gxViewGroup) 0)#define gxScreenViewDevices ((gxViewGroup) 1)enum gxSpoolCommands {	gxOpenReadSpool				= 1,	gxOpenWriteSpool,	gxReadSpool,	gxWriteSpool,	gxCloseSpool};typedef long gxSpoolCommand;typedef unsigned char gxGraphicsOpcode;	#ifdef __cplusplusextern "C" {	#endiftypedef long (*gxSpoolProcPtr)(gxSpoolCommand command, struct gxSpoolBlock *block);enum {	uppgxSpoolProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxSpoolCommand)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(struct gxSpoolBlock*)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr gxSpoolUPP;#define CallgxSpoolProc(userRoutine, command, block)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppgxSpoolProcInfo, (command), (block))#define NewgxSpoolProc(userRoutine)		\		(gxSpoolUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppgxSpoolProcInfo, GetCurrentISA())#elsetypedef gxSpoolProcPtr gxSpoolUPP;#define CallgxSpoolProc(userRoutine, command, block)		\		(*(userRoutine))((command), (block))#define NewgxSpoolProc(userRoutine)		\		(gxSpoolUPP)(userRoutine)#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxSpoolBlock {	gxSpoolUPP					spoolProcedure;	void						*buffer;	long						bufferSize;	long						count;	long						operationSize;	long						operationOffset;	gxGraphicsOpcode			lastTypeOpcode;	gxGraphicsOpcode			currentOperation;	gxGraphicsOpcode			currentOperand;	unsigned char				compressed;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifdef __cplusplus}	#endif	#ifndef __cplusplustypedef struct gxSpoolBlock gxSpoolBlock;	#endifenum gxFlattenFlags {	gxFontListFlatten			= 0x01,	gxFontGlyphsFlatten			= 0x02,	gxFontVariationsFlatten		= 0x04,	gxBitmapAliasFlatten		= 0x08};typedef long gxFlattenFlag;#define gxGraphicsSystemClient (gxGraphicsClient)(-1)enum gxClientAttributes {	gxStaticHeapClient			= 0x0001};typedef long gxClientAttribute;#define gxOriginalGraphicsFunction -1#define gxOriginalGraphicsIdentifier 'grfx'#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxBitmapDataSourceAlias {	unsigned long				fileOffset;	unsigned long				aliasRecordSize;	unsigned char				aliasRecord[1];};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#define gxBitmapFileAliasTagType 'bfil'#define gxBitmapFileAliasImageValue 0x00000001#endif