/*	File:		graphics toolbox.h	Copyright:	© 1984-1994 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef graphicsToolboxIncludes#define graphicsToolboxIncludes	#ifndef __WINDOWS__#include <Windows.h>/*	#include <Quickdraw.h>										*//*		#include <Types.h>										*//*			#include <ConditionalMacros.h>						*//*			#include <MixedMode.h>								*//*				#include <Traps.h>								*//*		#include <QuickdrawText.h>								*//*			#include <IntlResources.h>							*//*	#include <Events.h>											*//*		#include <OSUtils.h>									*//*	#include <Controls.h>										*//*		#include <Menus.h>										*/	#endif	#ifndef fontTypesIncludes#include "font types.h"/*	#include "math types.h"										*/	#endif	#ifndef graphicsTypesIncludes#include "graphics types.h"	#endif	#ifndef graphicsLinkageIncludes#include "graphics linkage.h"	#endifenum gxTranslationOptions {	gxDefaultOptionsTranslation	= 0x0000,	gxOptimizedTranslation		= 0x0001,	gxReplaceLineWidthTranslation = 0x0002,	gxSimpleScalingTranslation	= 0x0004,	gxSimpleGeometryTranslation	= 0x0008,	gxSimpleLinesTranslation	= 0x000C,	gxLayoutTextTranslation		= 0x0010,	gxRasterTargetTranslation	= 0x0020,	gxPostScriptTargetTranslation = 0x0040,	gxVectorTargetTranslation	= 0x0080};typedef long gxTranslationOption;enum gxTranslationStatistics {	gxContainsFormsBegin		= 0x0001,	gxContainsFormsEnd			= 0x0002,	gxContainsPostScript		= 0x0004,	gxContainsEmptyPostScript	= 0x0008};typedef long gxTranslationStatistic;#define gxQuickDrawPictTag 0x70696374#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct gxQuickDrawPict {	gxTranslationOption			options;	Rect						srcRect;	Point						styleStretch;	unsigned long				dataLength;	struct gxBitmapDataSourceAlias alias;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif	#ifndef __cplusplustypedef struct gxQuickDrawPict gxQuickDrawPict;	#endiftypedef OSErr (*gxShapeSpoolProcPtr)(gxShape toSpool, long refCon);enum {	uppgxShapeSpoolProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(OSErr)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxShape)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr gxShapeSpoolUPP;#define CallgxShapeSpoolProc(userRoutine, toSpool, refCon)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppgxShapeSpoolProcInfo, (toSpool), (refCon))#define NewgxShapeSpoolProc(userRoutine)		\		(gxShapeSpoolUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppgxShapeSpoolProcInfo, GetCurrentISA())#elsetypedef gxShapeSpoolProcPtr gxShapeSpoolUPP;#define CallgxShapeSpoolProc(userRoutine, toSpool, refCon)		\		(*(userRoutine))((toSpool), (refCon))#define NewgxShapeSpoolProc(userRoutine)		\		(gxShapeSpoolUPP)(userRoutine)#endiftypedef void (*gxUserViewPortFilterProcPtr)(gxShape toFilter, gxViewPort portOrder, long refCon);enum {	uppgxUserViewPortFilterProcInfo = kCStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxShape)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(gxViewPort)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr gxUserViewPortFilterUPP;#define CallgxUserViewPortFilterProc(userRoutine, toFilter, portOrder, refCon)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppgxUserViewPortFilterProcInfo, (toFilter), (portOrder), (refCon))#define NewgxUserViewPortFilterProc(userRoutine)		\		(gxUserViewPortFilterUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppgxUserViewPortFilterProcInfo, GetCurrentISA())#elsetypedef gxUserViewPortFilterProcPtr gxUserViewPortFilterUPP;#define CallgxUserViewPortFilterProc(userRoutine, toFilter, portOrder, refCon)		\		(*(userRoutine))((toFilter), (portOrder), (refCon))#define NewgxUserViewPortFilterProc(userRoutine)		\		(gxUserViewPortFilterUPP)(userRoutine)#endiftypedef gxUserViewPortFilterProcPtr gxUserViewPortFilter;typedef long (*gxConvertQDFontProcPtr)(gxStyle dst, long txFont, long txFace);enum {	uppgxConvertQDFontProcInfo = kCStackBased		 | RESULT_SIZE(SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(gxStyle)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(long)))		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(long)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr gxConvertQDFontUPP;#define CallgxConvertQDFontProc(userRoutine, dst, txFont, txFace)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppgxConvertQDFontProcInfo, (dst), (txFont), (txFace))#define NewgxConvertQDFontProc(userRoutine)		\		(gxConvertQDFontUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppgxConvertQDFontProcInfo, GetCurrentISA())#elsetypedef gxConvertQDFontProcPtr gxConvertQDFontUPP;#define CallgxConvertQDFontProc(userRoutine, dst, txFont, txFace)		\		(*(userRoutine))((dst), (txFont), (txFace))#define NewgxConvertQDFontProc(userRoutine)		\		(gxConvertQDFontUPP)(userRoutine)#endiftypedef gxConvertQDFontProcPtr gxConvertQDFontFunction;	#ifdef __cplusplusextern "C" {	#endifextern gxViewPort GXNewWindowViewPort(WindowPtr qdWindow) THREEWORDINLINE(0x303C, 0x236, 0xA832);extern gxViewPort GXGetWindowViewPort(WindowPtr qdWindow) THREEWORDINLINE(0x303C, 0x237, 0xA832);extern WindowPtr GXGetViewPortWindow(gxViewPort portOrder) THREEWORDINLINE(0x303C, 0x238, 0xA832);extern GDHandle GXGetViewDeviceGDevice(gxViewDevice theDevice) THREEWORDINLINE(0x303C, 0x239, 0xA832);extern gxViewDevice GXGetGDeviceViewDevice(GDHandle qdGDevice) THREEWORDINLINE(0x303C, 0x23a, 0xA832);extern void GXConvertQDPoint(const Point *shortPt, gxViewPort portOrder, gxPoint *fixedPt) THREEWORDINLINE(0x303C, 0x23b, 0xA832);extern void GXGetGlobalMouse(gxPoint *globalPt) THREEWORDINLINE(0x303C, 0x23c, 0xA832);extern void GXGetViewPortMouse(gxViewPort portOrder, gxPoint *localPt) THREEWORDINLINE(0x303C, 0x23d, 0xA832);extern gxUserViewPortFilter GXGetViewPortFilter(gxViewPort portOrder, long *refCon) THREEWORDINLINE(0x303C, 0x25e, 0xA832);extern void GXSetViewPortFilter(gxViewPort portOrder, gxUserViewPortFilter filter, long refCon) THREEWORDINLINE(0x303C, 0x23e, 0xA832);extern void GXInstallQDTranslator(GrafPtr port, gxTranslationOption options, const Rect *srcRect, const Rect *dstRect, Point styleStrech, gxShapeSpoolUPP userFunction, void *reference) THREEWORDINLINE(0x303C, 0x23f, 0xA832);extern gxTranslationStatistic GXRemoveQDTranslator(GrafPtr port, gxTranslationStatistic *statistic) THREEWORDINLINE(0x303C, 0x240, 0xA832);extern gxShape GXConvertPICTToShape(const PicHandle pict, gxTranslationOption options, const Rect *srcRect, const Rect *dstRect, Point styleStretch, gxShape destination, gxTranslationStatistic *stats) THREEWORDINLINE(0x303C, 0x241, 0xA832);extern long GXConvertQDFont(gxStyle theStyle, long txFont, long txFace) THREEWORDINLINE(0x303C, 0x242, 0xA832);extern gxConvertQDFontUPP GXGetConvertQDFont(void) THREEWORDINLINE(0x303C, 0x243, 0xA832);extern void GXSetConvertQDFont(gxConvertQDFontUPP userFunction) THREEWORDINLINE(0x303C, 0x244, 0xA832);	#ifdef __cplusplus}	#endif#endif