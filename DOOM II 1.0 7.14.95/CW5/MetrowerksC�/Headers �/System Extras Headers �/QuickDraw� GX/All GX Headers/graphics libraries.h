/*	File:		graphics libraries.h	Copyright:	© 1984-1994 by Apple Computer, Inc., all rights reserved.	WARNING	This file was auto generated by the interfacer tool. Modifications	must be made to the master file.*/#ifndef graphicsLibrariesIncludes#define graphicsLibrariesIncludes	#ifndef graphicsRoutinesIncludes#include "graphics routines.h"/*	#include "graphics types.h"									*//*		#include "math types.h"									*//*			#include <Types.h>									*//*				#include <ConditionalMacros.h>					*//*				#include <MixedMode.h>							*//*					#include <Traps.h>							*//*	#include "graphics errors.h"								*//*	#include "font types.h"										*//*	#include "graphics linkage.h"								*/	#endif	#ifndef mathRoutinesIncludes#include "math routines.h"/*	#include <FixMath.h>										*/	#endif	#ifdef __cplusplusextern "C" {	#endif#define NilShapeReturn(a) if ((a) == (gxShape) nil) {GXPostGraphicsError(shape_is_nil); return; } else#define NilShapeReturnNil(a) if ((a) == (gxShape) nil) {GXPostGraphicsError(shape_is_nil); return 0L; } else#define NilStyleReturn(a) if ((a) == (gxStyle) nil) {GXPostGraphicsError(style_is_nil); return; } else#define NilStyleReturnNil(a) if ((a) == (gxStyle) nil) {GXPostGraphicsError(style_is_nil); return 0L; } else#define NilInkReturn(a) if ((a) == (gxInk) nil) {GXPostGraphicsError(ink_is_nil); return; } else#define NilInkReturnNil(a) if ((a) == (gxInk) nil) {GXPostGraphicsError(ink_is_nil); return 0L; } else#define NilTransformReturn(a) if ((a) == (gxTransform) nil) {GXPostGraphicsError(transform_is_nil); return; } else#define NilTransformReturnNil(a) if ((a) == (gxTransform) nil) {GXPostGraphicsError(transform_is_nil); return 0L; } else#define NilColorSetReturn(a) if ((a) == (gxColorSet) nil) {GXPostGraphicsError(colorSet_is_nil); return; } else#define NilColorSetReturnNil(a) if ((a) == (gxColorSet) nil) {GXPostGraphicsError(colorSet_is_nil); return 0L; } else#define NilColorProfileReturn(a) if ((a) == (gxColorProfile) nil) {GXPostGraphicsError(colorProfile_is_nil); return; } else#define NilColorProfileReturnNil(a) if ((a) == (gxColorProfile) nil) {GXPostGraphicsError(colorProfile_is_nil); return 0L; } else#define NilTagReturn(a) if ((a) == (gxTag) nil) {GXPostGraphicsError(tag_is_nil); return; } else#define NilTagReturnNil(a) if ((a) == (gxTag) nil) {GXPostGraphicsError(tag_is_nil); return 0L; } else	#ifdef debugging		#undef DebugStr		#undef IfDebug#define IfDebug(a, b) if (a) DebugStr(b); else#define IfDebugReturn(a, b) if (a) { DebugStr(b); return; } else#define IfDebugReturnNil(a, b) if (a) { DebugStr(b); return 0L; } else#define NilParamReturn(a) if ((a) == 0L) {GXPostGraphicsError(parameter_is_nil); return; } else#define NilParamReturnNil(a) if ((a) == 0L) {GXPostGraphicsError(parameter_is_nil); return 0L; } else#define IfErrorReturn(a, b) if (a) { GXPostGraphicsError(b); return; } else#define IfErrorReturnNil(a, b) if (a) { GXPostGraphicsError(b); return 0L; } else#define IfNotice(a, b) if (a) GXPostGraphicsNotice(b); else#define IfWarning(a, b) if (a) GXPostGraphicsWarning(b); else#define IfWarningReturn(a, b) if (a) { GXPostGraphicsWarning(b); return; } else#define IfWarningReturnNil(a, b) if (a) { GXPostGraphicsWarning(b); return 0L; } else	#else#define IfDebug(a, b)#define IfDebugReturn(a, b)#define IfDebugReturnNil(a, b)#define NilParamReturn(a)#define NilParamReturnNil(a)#define IfErrorReturn(a, b)#define IfErrorReturnNil(a, b)#define IfNotice(a, b)#define IfWarning(a, b)#define IfWarningReturn(a, b) if (a) return; else#define IfWarningReturnNil(a, b) if (a) return 0L; else	#endif	#ifndef __QUICKDRAW__	#endifenum commonColors {	gxWhite						= 1,	gxBlack,	gxGray,	gxGrey						= gxGray,	white						= 1,	black,	gray,	grey						= gray,	red,	green,	blue,	cyan,	magenta,	yellow,	orange,	chartreuse,	aqua,	teal						= aqua,	slate,	purple,	violet						= purple,	maroon,	brown,	pink,	turquoise,	cadmium_lemon,	cadmium_light_yellow,	aureoline_yellow,	naples_deep_yellow,	cadmium_yellow,	cadmium_deep_yellow,	cadmium_orange,	cadmium_light_red,	cadmium_deep_red,	geranium_lake,	alizarin_crimson,	rose_madder,	madder_deep_lake,	brown_madder,	permanent_red_violet,	cobalt_deep_violet,	ultramarine_violet,	ultramarine_blue,	cobalt_blue,	royal_blue,	cerulean_blue,	manganese_blue,	indigo,	turquoise_blue,	emerald_green,	permanent_green,	viridian_light,	cobalt_green,	cinnabar_green,	sap_green,	chromium_oxide_green,	terre_verte,	yellow_ochre,	mars_yellow,	raw_sienna,	mars_orange,	gold_ochre,	brown_ochre,	deep_ochre,	burnt_umber,	burnt_sienna,	flesh,	flesh_ochre,	english_red,	venetian_red,	indian_red,	raw_umber,	greenish_umber,	van_dyck_brown,	sepia,	warm_grey,	cold_grey,	ivory_black,	lamp_black,	titanium_white,	zinc_white,	pale_gold,	gold,	old_gold,	pink_gold,	white_gold,	yellow_gold,	green_gold,	platinum,	silver,	antique_silver,	chrome,	steel,	copper,	antique_copper,	oxidized_copper,	bronze,	brass,	iron,	rusted_iron,	lead,	fluorescent_pink,	fluorescent_green,	fluorescent_blue,	incadescent_high,	incadescent_low,	moonlight,	sodium,	daylight,	dawn,	afternoon,	dusk,	mauve,	apple_green,	apple_yellow,	apple_orange,	apple_red,	apple_purple,	apple_blue,	light						= 512,	dark						= 1024,	warm						= 2048,	reddish						= warm,	cool						= 4096,	bluish						= cool,	grayish						= 8192,	whitish						= light,	blackish					= dark,	greenish					= 16384};typedef long commonColor;extern gxColorSet commonColorSet;extern gxSetColor commonColorList[];extern short commonColorCount;#define makeRGBSHORT(a, b, c) ((c >> 14) + ((b >> 13) + (a >> 13) << 3) << 3)#define makeCMYKSHORT(a, b, c, d) ((d >> 14) + ((c >> 14) + ((b >> 14) + (a >> 14) << 2) << 2) << 2)#define makeRGB16(a, b, c) ((c >> 11) + ((b >> 11) + (a >> 11) << 5) << 5)#define makeCMYK16(a, b, c, d) ((d >> 12) + ((c >> 12) + ((b >> 12) + (a >> 12) << 4) << 4) << 4)#define xRGB256(a, b, c) {gxRGBSpace,nil,{(a << 8)+a,(b << 8)+b,(c << 8)+c, 0 }}#define xRGB(a, b, c) {gxRGBSpace,nil,{a,b,c,0}}#define xCMYK(a, b, c, d) {gxCMYKSpace,nil,{a,b,c,d}}#define xHSV(a, b, c) {gxHSVSpace,nil,{a,b,c,0}}#define xCIE(a, b, c) {gxCIESpace,nil,{a,b,c,0}}#define xYIQ(a, b, c) {gxYIQSpace,nil,{a,b,c,0}}#define xXYZ(a, b, c) {gxXYZSpace,nil,{a,b,c,0}}#define xLUV(a, b, c) {gxLUVSpace,nil,{a,b,c,0}}#define xLAB(a, b, c) {gxLABSpace,nil,{a,b,c,0}}#define xHLS(a, b, c) {gxHLSSpace,nil,{a,b,c,0}}#define xNTSC(a, b, c) {gxNTSCSpace,nil,{a,b,c,0}}#define xPAL(a, b, c) {gxPALSpace,nil,{a,b,c,0}}#define xGRAY(a) {gxGraySpace,nil,{a,0,0,0}}#define xRGB16(a, b, c) {gxRGB16Space,nil,{makeRGB16(a,b,c),0,0,0}}#define xRGB32(a, b, c) {gxRGB32Space,nil,{(a >> 8),((c >> 8) + (b >> 8) << 8),0,0}}#define xCMYK32(a, b, c, d) {gxCMYK32Space,nil,{((b >> 8) + (a >> 8) << 8),((d >> 8) + (c >> 8) << 8),0,0}}#define sRGB(r, g, b) {r,g,b,0}#define sCMYK(c, m, y, k) {c,m,y,k}#define sRGB256(a, b, c) {(a << 8)+a,(b << 8)+b,(c << 8)+c, 0 }enum commonFaces {	gxPlain,	gxBold						= 1,	gxItalic					= 2,	gxUnderline					= 4,	gxOutline					= 8,	gxShadow					= 0x10,	gxCondense					= 0x20,	gxExtend					= 0x40,	gxLighten					= 0x80};typedef char commonFace;enum commonTransferModes {	commonAddOverMode			= 2000,	commonSubtractOverMode,	commonSubtractPinMode,	commonTransparentMode,	commonInMode,	commonOutMode};typedef short commonTransferMode;#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct cubic {	gxPoint						a;	gxPoint						b;	gxPoint						c;	gxPoint						d;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#endifstruct conic {	gxPoint						a;	gxPoint						b;	gxPoint						c;	Fixed						lambda;};#if defined(powerc) || defined(__powerc)#pragma options align=reset#endif#ifndef __cplusplustypedef struct cubic cubic;typedef struct conic conic;#endifextern gxShape NewPath(const gxPath *path);extern gxShape NewPolygon(const gxPolygon *polygon);extern gxPolygon *GetPolygon(gxShape source, long contour, gxPolygon *polygon);extern gxPath *GetPath(gxShape source, long contour, gxPath *path);extern void SetPath(gxShape target, long contour, const gxPath *path);extern void SetPolygon(gxShape target, long contour, const gxPolygon *polygon);extern void DrawPolygon(const gxPolygon *polygon, gxShapeFill fill);extern void DrawPath(const gxPath *path, gxShapeFill fill);extern void SetShapeIndexPoint(gxShape target, long index, const gxPoint *point);extern void SetShapeIndexControl(gxShape target, long index, long control);extern gxPoint *GetShapeIndexPoint(gxShape source, long index, gxPoint *point);extern long GetShapeIndexControl(gxShape source, long index, long *control);extern void InsertShape(gxShape target, long index, gxShape toAdd);extern gxShape ExtractShape(gxShape source, long firstPoint, long numPoints);extern void AddToShape(gxShape target, gxShape add);extern void ExtendShape(gxShape target, gxShape add);	#ifdef debuggingextern gxShape NewShape2(gxShapeType type, Fixed x, Fixed y);extern gxShape NewShape4(gxShapeType type, Fixed firstX, Fixed firstY, Fixed lastX, Fixed lastY);extern gxShape NewShape6(gxShapeType type, Fixed firstX, Fixed firstY, Fixed controlX, Fixed controlY, Fixed lastX, Fixed lastY);extern void SetShape2(gxShape target, Fixed x, Fixed y);extern void SetShape4(gxShape target, Fixed firstX, Fixed firstY, Fixed lastX, Fixed lastY);extern void SetShape6(gxShape target, Fixed firstX, Fixed firstY, Fixed controlX, Fixed controlY, Fixed lastX, Fixed lastY);	#else#define NewShape2(type, p1, p2) NewShapeMany(type, (Fixed)p1, (Fixed)p2)#define NewShape4(type, p1, p2, p3, p4) NewShapeMany(type, (Fixed)p1, (Fixed)p2, (Fixed)p3, (Fixed)p4)#define NewShape6(type, p1, p2, p3, p4, p5, p6) NewShapeMany(type, (Fixed)p1, (Fixed)p2, (Fixed)p3, (Fixed)p4, (Fixed)p5, (Fixed)p6)#define SetShape2(source, p1, p2) SetShapeMany(source, (Fixed)p1, (Fixed)p2)#define SetShape4(source, p1, p2, p3, p4) SetShapeMany(source, (Fixed)p1, (Fixed)p2, (Fixed)p3, (Fixed)p4)#define SetShape6(source, p1, p2, p3, p4, p5, p6) SetShapeMany(source, (Fixed)p1, (Fixed)p2, (Fixed)p3, (Fixed)p4, (Fixed)p5, (Fixed)p6)	#endifextern gxShape NewShapeMany(gxShapeType type, Fixed firstArg, ...);extern void SetShapeMany(gxShape target, Fixed firstArg, ...);extern gxShape GetBitmapPartsFromFixedBounds(gxShape source, const gxRectangle *bounds);extern void SetBitmapPartsFromFixedBounds(gxShape target, const gxRectangle *bounds, gxShape bitmapShape);extern gxShape NewArc(const gxRectangle *rect, Fixed startAng, Fixed sweep, boolean wedge);extern gxShape NewOval(const gxRectangle *rect);extern gxShape NewRoundRect(const gxRectangle *rect, const gxPoint *ovalSize);extern gxShape NewCubic(const cubic *curve);extern gxShape NewConic(const conic *curve);extern void DrawArc(const gxRectangle *rect, Fixed startAng, Fixed sweep, boolean wedge);extern void DrawOval(const gxRectangle *rect, gxShapeFill fill);extern void DrawRoundRect(const gxRectangle *rect, const gxPoint *ovalSize, gxShapeFill fill);extern void DrawCubic(const cubic *curve, gxShapeFill fill);extern void DrawConic(const conic *curve, gxShapeFill fill);extern void SetArc(gxShape target, const gxRectangle *rect, Fixed startAng, Fixed sweep, boolean wedge);extern void SetOval(gxShape target, const gxRectangle *rect);extern void SetRoundRect(gxShape target, const gxRectangle *rect, const gxPoint *ovalSize);extern void SetCubic(gxShape target, const cubic *curve);extern void SetConic(gxShape target, const conic *curve);extern void SetGraphicsLibraryErrors(void);extern void SetGraphicsLibraryNotices(void);extern char *GraphicsErrorMessage(gxGraphicsError error);extern char *GraphicsWarningMessage(gxGraphicsWarning warning);extern char *GraphicsNoticeMessage(gxGraphicsNotice notice);extern void DisplayGraphicsErrorMessage(gxGraphicsError error, long reference);extern void DisplayGraphicsWarningMessage(gxGraphicsWarning warning, long reference);extern void DisplayGraphicsNoticeMessage(gxGraphicsNotice notice, long reference);extern void CenterShape(gxShape target, gxRectangle *rect);extern void MoveShapeCenterTo(gxShape target, Fixed x, Fixed y);extern void RotateShapeAboutCenter(gxShape target, Fixed degrees);extern void SkewShapeAboutCenter(gxShape target, Fixed xSkew, Fixed ySkew);extern void ScaleShapeAboutCenter(gxShape target, Fixed hScale, Fixed vScale);extern void MapShapeToSpace(gxShape target, gxViewPort port, gxViewDevice device);extern void MapShapeFromSpace(gxShape target, gxViewPort port, gxViewDevice device);extern void MapPointToSpace(gxPoint *target, gxViewPort port, gxViewDevice device);extern void MapPointFromSpace(gxPoint *target, gxViewPort port, gxViewDevice device);extern gxViewPort GetTransformViewPort(gxTransform source);extern void SetTransformViewPort(gxTransform target, gxViewPort port);extern void AddToTransformViewPort(gxTransform target, gxViewPort port);extern void SetShapeViewPort(gxShape target, gxViewPort port);extern gxViewPort GetShapeViewPort(gxShape source);extern void SetDeepShapeViewPort(gxShape target, gxViewPort port);extern void SetDeepShapeViewPorts(gxShape target, long count, const gxViewPort portList[]);extern void SetDeepShapeTransform(gxShape target, gxTransform);extern void SetDefaultViewPort(gxViewPort port);extern gxViewGroup CopyViewGroup(gxViewGroup group);extern gxTransform ChangeTransformViewGroup(gxTransform target, gxViewGroup oldGroup, gxViewGroup newGroup);extern gxShape ChangeShapeViewGroup(gxShape source, gxViewGroup oldGroup, gxViewGroup newGroup);extern gxTransform SeparateShapeTransform(gxShape source);extern void ReuniteShapeTransform(gxShape target, gxTransform separate);extern gxStyle SeparateShapeStyle(gxShape source);extern void ReuniteShapeStyle(gxShape target, gxStyle separate);extern gxInk SeparateShapeInk(gxShape source);extern void ReuniteShapeInk(gxShape target, gxInk separate);extern void GetPathsIndexPointControl(const gxPaths *source, long index, gxPoint **pt, long **controlPtr, long *controlMask);extern void SetShapeOpenPath(gxShape target);extern void PreMapTransform(gxTransform source, gxMapping *map);#define CopyShape(s) GXCopyToShape(nil,s)#define CopyStyle(s) GXCopyToStyle(nil,s)#define CopyInk(s) GXCopyToInk(nil,s)#define CopyTransform(s) GXCopyToTransform(nil,s)extern void DisposeTransformAt(gxTransform *target);extern void DisposeShapeAt(gxShape *target);extern void DisposeStyleAt(gxStyle *target);extern void DisposeInkAt(gxInk *target);extern void DisposeTagAt(gxTag *target);extern gxColorProfile CreateQMSColorProfile(void);extern gxColorProfile CreateCanonColorProfile(void);extern gxColorProfile CreateColorSyncSystemProfile(void);extern void InitCommonColors(void);extern void DisposeCommonColors(void);extern void SetShapeRGB(gxShape target, gxColorValue red, gxColorValue green, gxColorValue blue);extern void SetInkRGB(gxInk target, gxColorValue red, gxColorValue green, gxColorValue blue);extern void SetShapeHSV(gxShape target, gxColorValue hue, gxColorValue saturation, gxColorValue value);extern void SetInkHSV(gxInk target, gxColorValue hue, gxColorValue saturation, gxColorValue value);extern void SetShapeGray(gxShape target, gxColorValue gray);extern void SetInkGray(gxInk target, gxColorValue gray);extern void SetShapeCommonTransfer(gxShape target, commonTransferMode mode);extern void SetShapeCommonColor(gxShape target, commonColor color);extern void SetShapeCommonFace(gxShape target, commonFace face);extern void SetInkCommonTransfer(gxInk target, commonTransferMode mode);extern void SetInkCommonColor(gxInk target, commonColor);extern void SetStyleCommonFace(gxStyle target, commonFace);extern commonTransferMode GetInkCommonTransfer(gxInk source);extern commonColor GetInkCommonColor(gxInk source);extern commonFace GetStyleCommonFace(gxStyle source);extern commonTransferMode GetShapeCommonTransfer(gxShape source);extern commonColor GetShapeCommonColor(gxShape source);extern commonFace GetShapeCommonFace(gxShape source);extern gxColor *SetCommonColor(gxColor *target, commonColor color);extern commonColor GetCommonColor(const gxColor *source);extern gxColorSpace GetShapeColorSpace(gxShape target);extern gxColorProfile GetShapeColorProfile(gxShape source);extern gxColorSet GetShapeColorSet(gxShape source);extern gxColorSpace GetInkColorSpace(gxInk target);extern gxColorProfile GetInkColorProfile(gxInk source);extern gxColorSet GetInkColorSet(gxInk source);extern void SetShapeColorSpace(gxShape target, gxColorSpace space);extern void SetShapeColorProfile(gxShape target, gxColorProfile profile);extern void SetShapeColorSet(gxShape target, gxColorSet set);extern void SetInkColorSpace(gxInk target, gxColorSpace space);extern void SetInkColorProfile(gxInk target, gxColorProfile profile);extern void SetInkColorSet(gxInk target, gxColorSet set);extern gxColorSet GetViewDeviceColorSet(gxViewDevice source);extern void SetViewDeviceColorSet(gxViewDevice target, gxColorSet set);extern gxColorProfile GetViewDeviceColorProfile(gxViewDevice source);extern void SetViewDeviceColorProfile(gxViewDevice target, gxColorProfile profile);extern long GetColorSpaceComponents(gxColorSpace space);extern void InitTransferMode(gxTransferMode *mode);extern gxTransferMode *SetCommonTransfer(gxTransferMode *transferModeRecord, commonTransferMode mode, unsigned short opValue, const gxColor *opColor);extern gxColor *TransmogrifyColor(gxColor *dstColor, const gxColor *srcColor, const gxTransferMode *);extern void SetInkFastXorTransfer(gxInk inky, gxViewDevice destDevice, gxViewPort destViewPort, gxColor *background, gxColor *result);extern void SetShapeFastXorTransfer(gxShape source, gxColor *background, gxColor *result);extern gxShape NewCString(const char *cString, const gxPoint *position);extern gxShape NewPString(const char *pascalString, const gxPoint *position);extern gxShape NewChar(const char theChar, const gxPoint *position);extern void SetCString(gxShape target, const char *cString, const gxPoint *position);extern void SetPString(gxShape target, const char *pascalString, const gxPoint *position);extern void SetChar(gxShape target, const char theChar, const gxPoint *position);extern void DrawCString(const char *cString, const gxPoint *position);extern void DrawPString(const char *pascalString, const gxPoint *position);extern void gDrawChar(const char theChar, const gxPoint *position);extern Fixed FixTextWidth(const unsigned char *string, short length);extern Fixed FixCStringWidth(const char *string);extern Fixed FixPStringWidth(const char *string);extern Fixed FixCharWidth(char ch);extern gxPoint *GetShapeAdvance(gxShape target, gxPoint *advance);extern void SetGlyphText(gxShape target, const unsigned char *text, long length);extern void SetGlyphAdvance(gxShape target, const long advanceBits[]);extern void SetGlyphStyles(gxShape target, const short styleRuns[], const gxStyle glyphStyles[]);extern long GetGlyphText(gxShape source, unsigned char *text);extern long GetGlyphAdvance(gxShape source, long advanceBits[]);extern long GetGlyphStyles(gxShape source, short styleRuns[], gxStyle glyphStyles[]);extern void PolyToPolyMap(const gxPolygon *source, const gxPolygon *dest, gxMapping *mapping);extern void PaintRectangle(const gxRectangle *source, commonColor color);extern void PaintRectangle2(const gxPoint *leftTop, const gxPoint *rightBottom, commonColor color);extern void PaintRectangle4(long left, long top, long right, long bottom, commonColor color);extern void AddToPicture(gxShape picture, gxShape newShape, gxStyle newStyle, gxInk newInk, gxTransform newTransform);extern void InsertPictureItem(gxShape picture, long index, gxShape newShape, gxStyle newStyle, gxInk newInk, gxTransform newTransform);extern gxShape GetPictureItem(gxShape picture, long index, gxShape *destShape, gxStyle *destStyle, gxInk *destInk, gxTransform *destTransform);extern void SetPictureItem(gxShape picture, long index, gxShape newShape, gxStyle newStyle, gxInk newInk, gxTransform newTransform);extern void AddShapeUser(gxShape target, const void *data, long length, long type);extern long GetShapeUser(gxShape source, void *data, long *length, long requestedType, long *foundType, long index);extern void RemoveShapeUser(gxShape target, long type, long index);extern gxShape NewRamp(const gxColor *firstColor, const gxColor *lastColor, long steps, const gxRectangle *bounds);extern void DrawRamp(const gxColor *firstColor, const gxColor *lastColor, long steps, const gxRectangle *bounds);extern gxShape NewCommonRamp(commonColor firstColor, commonColor lastColor, long steps, const gxRectangle *bounds);extern void DrawCommonRamp(commonColor firstColor, commonColor lastColor, long steps, const gxRectangle *bounds);#define circleSlack ((fract)0x3504f334)enum  {	openSpline,	closedSpline};extern gxShape MirrorSpline(long count, gxPoint *points, fract slack, boolean closed);extern void OutsetShape(gxShape source, Fixed distance);extern void FrameShape(gxShape source, Fixed distance);	#ifdef __cplusplus}	#endif#endif