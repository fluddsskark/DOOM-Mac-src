/************************************************************************//*  Project...: C++ and ANSI-C Compiler Environment                     *//*  Name......: SIOUX.h                                       			*//*  Purpose...: Interface functions to SIOUX			                *//*  Copyright.: ©Copyright 1993 by metrowerks inc. All rights reserved. *//************************************************************************/#ifndef __SIOUX__#define __SIOUX__#ifndef __TYPES__#include <Types.h>#endif#ifndef __EVENTS__#include <Events.h>#endif#if __MWERKS__#pragma options align=mac68k#endif//	Structure for holding the SIOUX specific settings ...//	default values are://		{TRUE, TRUE, FALSE, TRUE, TRUE, 0, 0, 80, 24, 0, 0, monaco, 9, normal};typedef struct tSIOUXSettings {	unsigned short 	initializeTB : 1,		//	Do we initialize the ToolBox ...					setupmenus : 1,			//	Do we draw the SIOUX menus ... 					autocloseonquit : 1,	//	Do we close the SIOUX window on program termination ...					asktosaveonclose : 1,	//	Do we offer to save on a close ...					showstatusline : 1,		//	Do we draw the status line ...					unused : 11;			//	Unused bits ...	short			tabspaces;				//	if non-zero, replace tabs with 'tabspaces' spaces ...	short			columns, rows;			//	The initial size of the SIOUX window ...	short			toppixel, leftpixel;	//	The topleft window position (in pixels)											//		(0,0 centers on main screen) ...	short			fontid, fontsize,					fontface;				//	SIOUX's font, size and textface (i.e. bold, etc...) ...} tSIOUXSettings;extern tSIOUXSettings	SIOUXSettings;		//	SIOUX's settings structure ...#ifdef __cplusplusextern "C" {#endif/* *	extern void SIOUXHandleOneEvent(EventRecord *initialevent); * *	Tells SIOUX to handle one event.  If initialevent is NULL, then SIOUX *	will poll the eventqueue for an event.  For applications which wish to *	use an embedded SIOUX window, call this function at the beginning of *	your eventloop, and pass it your current event ... * *	EventRecord *userevent:	The user's event from their call to Get/WaitNextEvent. *	returns Boolean:		Was the event handled by SIOUX? */extern Boolean SIOUXHandleOneEvent(EventRecord *userevent);#ifdef __cplusplus}#endif#if __MWERKS__#pragma options align=reset#endif#endif