/************************************************************************//*	Project...:	Standard ANSI-C Library									*//*	Name......:	unix.h													*//*	Purpose...:	standard ANSI header file								*//*  Copyright.: ©Copyright 1994 by metrowerks inc. All rights reserved. *//************************************************************************//* *	NB:	This file implements some UNIX low level support.  These functions *		are not guaranteed to be 100% conformant. */#ifndef	_UNIX#define	_UNIX#ifndef __TYPES__#include <Types.h>#endif#ifndef _STDIO#include <stdio.h>#endif#if __MWERKS__#pragma options align=mac68k#endif/* *	Globals for setting the type and creator of new files ... */extern ResType _fcreator, _ftype;/* *	Mode values accessible to open() */#define O_RDWR			0x0			/* open the file in read/write mode */#define O_RDONLY		0x1			/* open the file in read only mode */#define O_WRONLY		0x2			/* open the file in write only mode */#define O_APPEND		0x0100		/* open the file in append mode */#define O_CREAT			0x0200		/* create the file if it doesn't exist */#define O_EXCL			0x0400		/* if the file already exists don't create it again */#define O_TRUNC			0x0800		/* truncate the file after opening it */#define O_BINARY		0x8000		/* open the file in binary mode (default is text mode) */#ifdef __cplusplusextern "C" {#endif/* *	Determines is a fileid is attached to the console. */int isatty(int fildes);/* *	Returns the fileid associated with a stream. */int fileno(FILE *stream);/* *	Creates and opens a file, returning the filenumber.  Note can only be used to set *	binary mode (default is text mode) using O_BINARY */int creat(char *filename, int mode);/* *	Opens a file and returns it's id. */int open(const char *filename, int mode);/* *	Closes an open file. */int close(int fd);/* *	Reads from a file stream. */int read(int fd, char *buf, int count);/* *	Writes to a file stream. */int write(int fd, const char *buf, int count);/* *	Seek on a file stream. */long lseek(int fd, long offset, int whence);/* *	Unlink (delete) a file. */int unlink(const char *filename);/* *	Internal ANSI library functions for reading and writing. */int _Fwrite(FILE *stream, const unsigned char *buf, int count);int _Fread(FILE *stream, unsigned char *buf, int count);#ifdef __cplusplus}#endif#if __MWERKS__#pragma options align=reset#endif#endif