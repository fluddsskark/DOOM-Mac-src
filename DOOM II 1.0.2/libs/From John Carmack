Date:  Fri, Jan 27, 1995 11:23 AM MSTFrom:  johnc@idcube.idsoftware.comSubj:  Re: MIDI for Doom IITo:    Lion.DougSorry I'm late....  Here are the 68k routines I used for NeXT 68k  DOOM.  I didn't spend all much time on them, and I'm not really a 68k  programmer anyway, so these could certainly be improved.(This is gnu asm syntax)(I forwarded your message to Dave for the midi files):#ifdef m68k.text .align 1.globl _FixedMul_FixedMul: link a6,#0 movel a6@(8),d0 mulsl a6@(12),d1:d0 movew d1,d0 swap d0 unlk a6 rts .align 1.globl _FixedDiv2_FixedDiv2: link a6,#0 movel a6@(8),d0 swap d0 movw d0,d1 extl d1 movw #0,d0 divsl a6@(12),d1:d0 unlk a6 rts /*===================== R_DrawColumn====================*/  .align 1.globl _R_DrawColumn_R_DrawColumn: moveml d2/d3/d4/d5/d6/d7/a2,sp@-  movel _dc_yh,d3 movel _dc_yl,d2 subl  d2,d3 bmi  L1    // if count < 0, do nothing lea  _columnofs,a1 movel _dc_x,d1 movel a1@(d1:l:4),a1 lea  _ylookup,a0 addl a0@(d2:l:4),a1 movel _dc_iscale,d4 subl _centery,d2 mulsl d4,d2 addl _dc_texturemid,d2// d0 scratch offset / pixel 1// d1 qaud count// d2 frac 1// d3 count// d4 fracstep// d5 SCREENWIDTH// d6 frac 2// d7 scratch 2// a0 source// a1 dest// a2 colormap movel _dc_source,a0 movel _dc_colormap,a2 addql #1,d3 movel d3,d1 lsrl #2,d1 beq  Lcsinglestart subql #1,d1 bfextu  d2{#9:#7},d0 // feed the first step of the  pipeline movel d2,d6 addl d4,d6   // put d6 a step ahead of d2 lsll #1,d4   // make the step a double  step movel #SCREENWIDTH*4,d5 jmp  Lcquadloop  .align 4Lcquadloop: bfextu d6{#9:#7},d7 moveb a0@(d0),d0 addl d4,d2 moveb a0@(d7),d7 addl d4,d6 moveb a2@(d0),a1@ bfextu d2{#9:#7},d0 moveb a2@(d7),a1@(SCREENWIDTH)  bfextu d6{#9:#7},d7 moveb a0@(d0),d0 addl d4,d2 moveb a0@(d7),d7 addl d4,d6 moveb a2@(d0),a1@(SCREENWIDTH*2) bfextu d2{#9:#7},d0 moveb a2@(d7),a1@(SCREENWIDTH*3) addl d5,a1 dbra d1,Lcquadloop  lsrl #1,d4   // put the step value back to  singles Lcsinglestart: andil #3,d3 beq  L1    // no extras movel #SCREENWIDTH,d5 subql #1,d3 Lcsingleloop: bfextu d2{#9:#7},d0 moveb a0@(d0),d0 addl d4,d2 moveb a2@(d0),a1@ addl d5,a1 dbra d3,LcsingleloopL1: moveml sp@+,d2/d3/d4/d5/d6/d7/a2 rts/*===================== R_DrawSpan====================*/ .align 1.globl _R_DrawSpan_R_DrawSpan: moveml d2/d3/d4/d5/d6/d7/a2,sp@-  movel _ds_x2,d7 cmpl _ds_x1,d7 movel _ds_y,d1 lea _ylookup,a1 movel _ds_x1,d0 lea _columnofs,a0 movel a1@(d1:l:4),a1 addl a0@(d0:l:4),a1 movel _ds_x2,d3 subl _ds_x1,d3// d0 extracted yfrac / composite// d1 extracted xfrac// d2 xfrac yfrac// d3 loop count// d4 xstep ystep// d5 pixel// d6 quad count// a0 ds_source// a1 dest// a2 ds_colormap clrl d5 movel _ds_source,a0 movel _ds_colormap,a2 // build frac movel _ds_yfrac,d2 moveq #10,d0 lsll d0,d2 andil #0xffff0000,d2 movel _ds_xfrac,d0 lsrl #6,d0 andil #0xffff,d0 addl d0,d2// build step movel _ds_ystep,d4 moveq #10,d0 lsll d0,d4 andil #0xffff0000,d4 movel _ds_xstep,d0 lsrl #6,d0 andil #0xffff,d0 addl d0,d4 addql #1,d3 movel d3,d6 lsrl #2,d6 beq  Lsinglestart subql #1,d6// lsll #1,d4   // make the step a double  stepLquadloop: bfextu d2{#0:#6},d0 // extract y bfextu d2{#16:#6},d1 // extract x lsll #6,d0 addl d1,d0 addl d4,d2   // advance fraction moveb a0@(d0),d5  // get source pixel moveb a2@(d5),a1@+ // translate and write out to dest  bfextu d2{#0:#6},d0 // extract y bfextu d2{#16:#6},d1 // extract x lsll #6,d0 addl d1,d0 addl d4,d2   // advance fraction moveb a0@(d0),d5  // get source pixel moveb a2@(d5),a1@+ // translate and write out to dest  bfextu d2{#0:#6},d0 // extract y bfextu d2{#16:#6},d1 // extract x lsll #6,d0 addl d1,d0 addl d4,d2   // advance fraction moveb a0@(d0),d5  // get source pixel moveb a2@(d5),a1@+ // translate and write out to dest  bfextu d2{#0:#6},d0 // extract y bfextu d2{#16:#6},d1 // extract x lsll #6,d0 addl d1,d0 addl d4,d2   // advance fraction moveb a0@(d0),d5  // get source pixel moveb a2@(d5),a1@+ // translate and write out to dest  dbra d6,LquadloopLsinglestart: andil #3,d3 beq  Ldone   // no extras subql #1,d3Lsingleloop: bfextu d2{#0:#6},d0 // extract y bfextu d2{#16:#6},d1 // extract x lsll #6,d0 addl d1,d0 addl d4,d2   // advance fraction moveb a0@(d0),d5  // get source pixel moveb a2@(d5),a1@+ // translate and write out to dest dbra d3,Lsingleloop Ldone: moveml sp@+,d2/d3/d4/d5/d6/d7/a2 rts#endif----------------------- Headers --From johnc@idcube.idsoftware.com Fri Jan 27 10:23:44 1995Received: from idcube.idsoftware.com by hp1.online.apple.com with SMTP (1.38.193.5/16.2) id AA07398; Fri, 27 Jan 1995 10:23:44 -0800Return-Path: <johnc@idcube.idsoftware.com>Received: from idnewt by idcube.idsoftware.com (NX5.67d/NX3.0M) id AA11360; Fri, 27 Jan 95 12:11:46 -0600From: John Carmack <johnc@idcube.idsoftware.com>Message-Id: <9501271811.AA11360@idcube.idsoftware.com>Received: by idnewt.idsoftware.com (NX5.67e/NX3.0X) id AA04327; Fri, 27 Jan 95 12:11:51 -0600Date: Fri, 27 Jan 95 12:11:51 -0600Received: by NeXT.Mailer (1.100.2)Received: by NeXT Mailer (1.100.2)To: Lion.Doug@eworld.comSubject: Re: MIDI for Doom IIAOS-Member: lion.doug